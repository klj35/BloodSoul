<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Color_LUT制作</title>
      <link href="/BloodSoul.github.io/2021/11/12/ta/xin-ji-yuan/xuan-ran-ji-qiao/color-lut-zhi-zuo/"/>
      <url>/BloodSoul.github.io/2021/11/12/ta/xin-ji-yuan/xuan-ran-ji-qiao/color-lut-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<h3 id="一、准备未经处理的-LUT贴图"><a href="#一、准备未经处理的-LUT贴图" class="headerlink" title="一、准备未经处理的 LUT贴图"></a>一、准备未经处理的 LUT贴图</h3><p>256x16</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/LUT_256x16.png" alt="LUT_256x16"> </p><p>1024x32</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/LUT_1024x32.png" alt="LUT_1024x32"> </p><h3 id="二、在PS中进行图片颜色调整"><a href="#二、在PS中进行图片颜色调整" class="headerlink" title="二、在PS中进行图片颜色调整"></a>二、在PS中进行图片颜色调整</h3><p>调整前：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120126555.png" alt="image-20211112120126555" style="zoom:67%;"> <p>调整后：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120048748.png" alt="image-20211112120048748" style="zoom:50%;"> <h3 id="三、将调整应用到-LUT上"><a href="#三、将调整应用到-LUT上" class="headerlink" title="三、将调整应用到 LUT上"></a>三、将调整应用到 LUT上</h3><p>选中上面的图片，将应用直接拖拽的下面的 LUT 上即可</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120329164.png" alt="image-20211112120329164" style="zoom:67%;"> <p>修改前：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120504081.png" alt="image-20211112120504081"></p><p>修改后：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120523799.png" alt="image-20211112120523799"></p><h3 id="四、在Unity中使用"><a href="#四、在Unity中使用" class="headerlink" title="四、在Unity中使用"></a>四、在Unity中使用</h3><p>使用 Color Lookup 效果，将贴图附上即可</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120631890.png" alt="image-20211112120631890" style="zoom: 80%;"> <p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/400119440">https://zhuanlan.zhihu.com/p/400119440</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPOS-VFACE-SV_VertexID</title>
      <link href="/BloodSoul.github.io/2021/11/12/ta/xin-ji-yuan/xuan-ran-ji-chu-zhi-shi/vpos-vface-sv-vertexid/"/>
      <url>/BloodSoul.github.io/2021/11/12/ta/xin-ji-yuan/xuan-ran-ji-chu-zhi-shi/vpos-vface-sv-vertexid/</url>
      
        <content type="html"><![CDATA[<h3 id="SV-VertexID"><a href="#SV-VertexID" class="headerlink" title="SV_VertexID"></a>SV_VertexID</h3><p><strong>uint vid : SV_VertexID</strong></p><p>表示第几个顶点，依次从第0开始…</p><p>这样在进行顶点动画时，可以对指定顶点进行采样</p><p>v2f vert (appdata v, uint vid : SV_VertexID)</p><p>{</p><p>float x = vid;</p><p>…</p><p>此特性仅存在于DX10（ShaderModel4.0）、GLCore、OpenGL ES 3中</p><p>所以需要添加以下编译指令：</p><p>#pragma target 3.5</p><h3 id="VPOS"><a href="#VPOS" class="headerlink" title="VPOS"></a>VPOS</h3><p><strong>VPOS</strong>：屏幕像素坐标，用于片段着色器，需要添加#pragma target 3.0编译指令。</p><p>fixed4 frag (v2f i, UNITY_VPOS_TYPE screenPos : VPOS) : SV_Target</p><p>{</p><p>screenPos.xy = floor(screenPos.xy * 0.25) * 0.5;</p><p>…</p><p>大多数平台，VPOS类型是float4，但是对于Direct3D9为float2，所以要使用UNITY_VPOS_TYPE这个宏来作为screenPos的类型。</p><h3 id="VFACE"><a href="#VFACE" class="headerlink" title="VFACE"></a>VFACE</h3><p><strong>VFACE</strong>：被渲染的面是否朝向摄像机，用于片段着色器，需要添加#pragma target 3.0编译指令。</p><p>如果渲染表面朝向摄像机，则Face节点输出正值1，如果远离摄像机，则输出负值-1。</p><p>fixed4 frag (fixed facing : VFACE) : SV_Target</p><p>{</p><p>return facing &gt; 0 ? fixed4(0,0,0,0) : fixed4(1,1,1,1);</p><p>}</p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip:"></a>Tip:</h3><p>TEXCOORD</p><p>以下为手机平台的常见规则：</p><ul><li>OpenGL     ES2.0支持最多8个</li><li>OpenGL     ES3.0支持最多16个</li></ul><p>从性能优化角度来讲，数量越少性能越好。</p><p>另外，每个语义是4维向量，利用好这一点，可以大大节省总数量。</p><p>参考：</p><p><a href="http://blog.coolcoding.cn/?p=798">http://blog.coolcoding.cn/?p=798</a></p><p><a href="https://zhuanlan.zhihu.com/p/50492287">https://zhuanlan.zhihu.com/p/50492287</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity渲染RT的几种方式</title>
      <link href="/BloodSoul.github.io/2021/11/12/ta/xin-ji-yuan/xuan-ran-ji-qiao/unity-xuan-ran-rt-de-ji-chong-fang-shi/"/>
      <url>/BloodSoul.github.io/2021/11/12/ta/xin-ji-yuan/xuan-ran-ji-qiao/unity-xuan-ran-rt-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="第一种：使用Camera"><a href="#第一种：使用Camera" class="headerlink" title="第一种：使用Camera"></a>第一种：使用Camera</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112111253569.png" alt="image-20211112111253569"></p><h3 id="第二种：使用-GL-和-Graphics-DrawXXX"><a href="#第二种：使用-GL-和-Graphics-DrawXXX" class="headerlink" title="第二种：使用 GL 和 Graphics.DrawXXX"></a>第二种：使用 GL 和 Graphics.DrawXXX</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112111310640.png" alt="image-20211112111310640"> </p><h3 id="第三种：使用-Graphics-Blit"><a href="#第三种：使用-Graphics-Blit" class="headerlink" title="第三种：使用 Graphics.Blit"></a>第三种：使用 Graphics.Blit</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112111351801.png" alt="image-20211112111351801"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112111357232.png" alt="image-20211112111357232"> </p><h3 id="第四种：使用-CommandBuffer"><a href="#第四种：使用-CommandBuffer" class="headerlink" title="第四种：使用 CommandBuffer"></a>第四种：使用 CommandBuffer</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112111717713.png" alt="image-20211112111717713"></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matcap技巧</title>
      <link href="/BloodSoul.github.io/2021/11/12/ta/xin-ji-yuan/xuan-ran-ji-qiao/matcap-ji-qiao/"/>
      <url>/BloodSoul.github.io/2021/11/12/ta/xin-ji-yuan/xuan-ran-ji-qiao/matcap-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h4 id="Cheapest-PBR-Shader-EVER"><a href="#Cheapest-PBR-Shader-EVER" class="headerlink" title="Cheapest PBR Shader EVER!!!!"></a>Cheapest PBR Shader EVER!!!!</h4><p>摘取自：<a href="https://blog.csdn.net/ndsc_dw/article/details/50700201">https://blog.csdn.net/ndsc_dw/article/details/50700201</a></p><p>一提到Physically based rendering, 就感觉跟手游搭不上边，总有种十分高端的感觉吧，可是我现在就是要在手游上用PBR，而且还是高效率的用！！！</p><p>这里提到的高效包括Shader执行高效，Shader鲁棒以及美术和程序的学习成本极低！！！</p><p>不知道大家是否知道matcap，美术用ZBrush的时候的一个shader，主要模拟向光面受光的反射情况</p><p>根据Unreal在Siggraph 2013上做的关于实时PBR的讲座，实时PBR其实就是两个参数，光滑度和金属度。具体可以去下论文，不要钱的也不用翻墙就能看，看完这个再看下面的会觉得恍然大悟，至少了解一下这篇文章怎么做PBR的思路就行，具体公式啊怎么做随机采样都可以跳过。</p><p>那么如我们用一张2D Texture作为madcap贴图，计算材质在各个角度反射的结果，用这个texture的mipmap保存不同粗糙度的情况下的反射情况，那么我们就有了粗糙度</p><p>我们用两张而不是一张matcap贴图，一张保存金属材质的效果，一张保存废金属材质的效果，这样我们有了金属度（根据Unreal说，金属度只有在取完全金属和完全非金属时美术才觉得不是trivial的效果）。</p><p>这样，我们就用MAX，选一个吊炸天的离线PBR的shader，弄个材质球，把光打好，从最光滑渲染到最粗糙保存成mipmap chain，金属非金属一样一个弄好，好了，我们有了PBR的matcap贴图了。</p><p>然后就是madcap的shader少改一下，多接受一张贴图，r通道保存粗糙度，g通道保存金属度，然后在PS里面根据这个贴图指定的每个像素的材质除了用normal选位置再选一下mipmap层和用哪张贴图就完了。</p><p>说到这里完全没说到采样，模糊，PBR理论。。。。。。我觉得稍微用心想一想两天能明白过来，然后你就是next next generation的手游开发者了</p><p>不过这个shader有个问题，摄像机角度不能动，光照角度不能动，但是角色可以随便动！！！！！我觉得大多数手游如果做上帝视角等等视角没问题哦</p><h4 id="基于MatCap实现适于移动平台的“次时代”车漆Shader"><a href="#基于MatCap实现适于移动平台的“次时代”车漆Shader" class="headerlink" title="基于MatCap实现适于移动平台的“次时代”车漆Shader"></a>基于MatCap实现适于移动平台的“次时代”车漆Shader</h4><p><a href="https://zhuanlan.zhihu.com/p/25314364">https://zhuanlan.zhihu.com/p/25314364</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualTexture_虚拟纹理</title>
      <link href="/BloodSoul.github.io/2021/11/12/ta/xin-ji-yuan/xuan-ran-ji-qiao/virtualtexture-xu-ni-wen-li/"/>
      <url>/BloodSoul.github.io/2021/11/12/ta/xin-ji-yuan/xuan-ran-ji-qiao/virtualtexture-xu-ni-wen-li/</url>
      
        <content type="html"><![CDATA[<h3 id="浅谈Virtual-Texture"><a href="#浅谈Virtual-Texture" class="headerlink" title="浅谈Virtual Texture"></a>浅谈Virtual Texture</h3><p><a href="https://zhuanlan.zhihu.com/p/138484024">https://zhuanlan.zhihu.com/p/138484024</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112110312403.png" alt="image-20211112110312403" style="zoom:50%;"> <h3 id="UE4虚拟纹理学习笔记（一）基础知识"><a href="#UE4虚拟纹理学习笔记（一）基础知识" class="headerlink" title="UE4虚拟纹理学习笔记（一）基础知识"></a>UE4虚拟纹理学习笔记（一）基础知识</h3><p><a href="https://zhuanlan.zhihu.com/p/162934135">https://zhuanlan.zhihu.com/p/162934135</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112110336611.png" alt="image-20211112110336611" style="zoom: 67%;">  <p><a href="https://www.cnblogs.com/wujianming-110117/p/12908545.html">https://www.cnblogs.com/wujianming-110117/p/12908545.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112110410372.png" alt="image-20211112110410372" style="zoom:67%;"> <h3 id="Github-开源项目："><a href="#Github-开源项目：" class="headerlink" title="Github 开源项目："></a>Github 开源项目：</h3><p>View-Independent Procedural Virtual Texture with Unity Terrain</p><p><a href="https://github.com/ACskyline/PVTUT">https://github.com/ACskyline/PVTUT</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112110509117.png" alt="image-20211112110509117" style="zoom:67%;"> <p>Runtime Procedural Virtual Texture for UnityTerrain in Universal Render Pipeline(URP)</p><p><a href="https://github.com/haolange/InfinityTexture">https://github.com/haolange/InfinityTexture</a></p><p>Virtual texture for unity</p><p><a href="https://github.com/jintiao/VirtualTexture">https://github.com/jintiao/VirtualTexture</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112110618004.png" alt="image-20211112110618004" style="zoom: 80%;">  ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grass</title>
      <link href="/BloodSoul.github.io/2021/11/07/ta/xin-ji-yuan/tan-suo/zuo-pin-1/grass/"/>
      <url>/BloodSoul.github.io/2021/11/07/ta/xin-ji-yuan/tan-suo/zuo-pin-1/grass/</url>
      
        <content type="html"><![CDATA[<p>一、涵盖技术</p><ul><li><p><input checked="" disabled="" type="checkbox">  渐变色</p></li><li><p><input checked="" disabled="" type="checkbox">  全局风浪</p></li><li><p><input checked="" disabled="" type="checkbox">  风模拟</p><ol><li>弯曲<ol><li>在世界空间中计算弯曲的角度</li><li>必须在模型空间中实际进行弯曲计算，避免旋转对齐造成的影响</li><li>也就是说在世界空间中旋转物体，物体始终朝向一个方向弯曲，不会改变；不然会跟着旋转弯向不同的方向</li><li>单个物体的Pivot不会变，所以没有问题，多个模型合并后的Pivot在整个合并后的中心，不在单个物体脚时下，需要对模型进行特殊处理（将单个物体的Pivot提前计算到UV通道中去）</li></ol></li><li>颤动</li><li>旋转</li></ol></li><li><p><input disabled="" type="checkbox">  地表颜色融合</p></li><li><p><input disabled="" type="checkbox">  可交互</p></li><li><p><input checked="" disabled="" type="checkbox">  透视矫正</p></li><li><p><input checked="" disabled="" type="checkbox">  距离衰减</p></li><li><p><input checked="" disabled="" type="checkbox">  透射表现</p></li><li><p><input disabled="" type="checkbox">  实例化+裁剪</p></li><li><p><input disabled="" type="checkbox">  HBAO</p></li><li><p><input disabled="" type="checkbox">  积雪</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 作品1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity中实现PS的混合效果</title>
      <link href="/BloodSoul.github.io/2021/10/29/ta/xin-ji-yuan/xuan-ran-ji-qiao/unity-zhong-shi-xian-ps-de-hun-he-xiao-guo/"/>
      <url>/BloodSoul.github.io/2021/10/29/ta/xin-ji-yuan/xuan-ran-ji-qiao/unity-zhong-shi-xian-ps-de-hun-he-xiao-guo/</url>
      
        <content type="html"><![CDATA[<p>PS 中的图层效果在ASE 中的对应的精确实现</p><p><a href="http://wiki.amplify.pt/index.php?title=Unity_Products:Amplify_Shader_Editor/Blend_Operations">http://wiki.amplify.pt/index.php?title=Unity_Products:Amplify_Shader_Editor/Blend_Operations</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211020144313761.png" alt="image-20211020144313761" style="zoom:80%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029184638792.png" alt="image-20211029184638792" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029184647030.png" alt="image-20211029184647030" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取屏幕坐标</title>
      <link href="/BloodSoul.github.io/2021/10/29/ta/xin-ji-yuan/xuan-ran-ji-qiao/huo-qu-ping-mu-zuo-biao/"/>
      <url>/BloodSoul.github.io/2021/10/29/ta/xin-ji-yuan/xuan-ran-ji-qiao/huo-qu-ping-mu-zuo-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="获取屏幕坐标"><a href="#获取屏幕坐标" class="headerlink" title="获取屏幕坐标"></a>获取屏幕坐标</h1><h3 id="SV-POSITION-语义获取"><a href="#SV-POSITION-语义获取" class="headerlink" title="SV_POSITION 语义获取"></a>SV_POSITION 语义获取</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183714526.png" alt="image-20211029183714526" style="zoom:80%;"> <p>在 片元着色器中的 SV_Positon, x，y 表示代表屏幕像素，z代表非线性的深度[0,1]，w坐标视空间下的 z 坐标的绝对值，是正数</p><h3 id="VPOS-语义获取"><a href="#VPOS-语义获取" class="headerlink" title="VPOS 语义获取"></a>VPOS 语义获取</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183722863.png" alt="image-20211029183722863" style="zoom:80%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183958183.png" alt="image-20211029183958183"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029184005127.png" alt="image-20211029184005127"></p><h3 id="ComputeScreenPos-方式获取"><a href="#ComputeScreenPos-方式获取" class="headerlink" title="ComputeScreenPos 方式获取"></a>ComputeScreenPos 方式获取</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183731703.png" alt="image-20211029183731703" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183758678.png" alt="image-20211029183758678" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183822488.png" alt="image-20211029183822488" style="zoom:80%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029184142849.png" alt="image-20211029184142849"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029184148741.png" alt="image-20211029184148741"></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从深度图重建世界坐标</title>
      <link href="/BloodSoul.github.io/2021/10/29/ta/xin-ji-yuan/xuan-ran-ji-qiao/cong-shen-du-tu-chong-jian-shi-jie-zuo-biao/"/>
      <url>/BloodSoul.github.io/2021/10/29/ta/xin-ji-yuan/xuan-ran-ji-qiao/cong-shen-du-tu-chong-jian-shi-jie-zuo-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="一、从深度图重建世界坐标"><a href="#一、从深度图重建世界坐标" class="headerlink" title="一、从深度图重建世界坐标"></a>一、从深度图重建世界坐标</h1><h3 id="1-1-从-NDC-重建、在世界空间中重建"><a href="#1-1-从-NDC-重建、在世界空间中重建" class="headerlink" title="1.1 从 NDC 重建、在世界空间中重建"></a>1.1 从 NDC 重建、在世界空间中重建</h3><p><a href="https://zhuanlan.zhihu.com/p/92315967">https://zhuanlan.zhihu.com/p/92315967</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029181934081.png" alt="image-20211029181934081" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029181942318.png" alt="image-20211029181942318" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182009054.png" alt="image-20211029182009054" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182022381.png" alt="image-20211029182022381" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182034664.png" alt="image-20211029182034664" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182048549.png" alt="image-20211029182048549" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182108920.png" alt="image-20211029182108920" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182121096.png" alt="image-20211029182121096" style="zoom:80%;"> <h3 id="1-2-屏幕射线插值方式重建世界坐标"><a href="#1-2-屏幕射线插值方式重建世界坐标" class="headerlink" title="1.2 屏幕射线插值方式重建世界坐标"></a>1.2 屏幕射线插值方式重建世界坐标</h3><p><a href="https://www.jianshu.com/p/3f3a3911a824">https://www.jianshu.com/p/3f3a3911a824</a></p><p>这种方式的重建，可以参考Secrets of CryENGINE 3 Graphics Technology这个CryTech 2011年的PPT。借用一张图：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182829614.png" alt="image-20211029182829614" style="zoom:80%;"> <p>然后偶再画个平面的图：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182856277.png" alt="image-20211029182856277" style="zoom:80%;"> <p>上图中，A为相机位置，G为空间中我们要重建的一点，那么该点的世界坐标为A（worldPos） + 向量AG，我们要做的就是求得向量AG即可。根据三角形相似的原理，三角形AGH相似于三角形AFC，则得到AH / AC = AG / AF。由于三角形相似就是比例关系，所以我们可以把AH / AC看做01区间的比值，那么AC就相当于远裁剪面距离，即为1，AH就是我们深度图采样后变换到01区间的深度值，即Linear01Depth的结果d。那么，AG = AF * d。所以下一步就是求AF，即求出相机到屏幕空间每个像素点对应的射线方向。看到上面的立体图，其实我们可以根据相机的各种参数，求得视锥体对应四个边界射线的值，这个操作在vertex阶段进行，由于我们的后处理实际上就是渲染了一个Quad，上下左右四个顶点，把这个射线传递给pixel阶段时，就会自动进行插值计算，也就是说在顶点阶段的方向值到pixel阶段就变成了逐像素的射线方向。</p><p>那么我们要求的其实就相当于AB这条向量的值，以上下平面为例，三维向量只比二维多一个维度，我们已知远裁剪面距离F，相机的三个方向（相机transform.forward，.right，.up），AB = AC + CB，|BC| = tan(0.5fov) * |AC|，|AC| = Far，AC = transorm.forward * Far，CB = transform.up * tan(0.5fov) * Far。</p><p>我直接使用了远裁剪面对应的位置计算了三个方向向量，进而组合得到最终四个角的向量。用远裁剪面的计算代码比较简单（恩，我懒），不过《ShaderLab入门精要》中使用的是近裁剪面+比例计算，不确定是否有什么考虑（比如精度，没有测出来，如果有大佬知道，还望不吝赐教）。</p><p>shader代码如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182921974.png" alt="image-20211029182921974" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182933590.png" alt="image-20211029182933590" style="zoom:80%;"> <p>C#代码如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182950558.png" alt="image-20211029182950558" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183002341.png" alt="image-20211029183002341" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183022334.png" alt="image-20211029183022334" style="zoom:80%;"> <h3 id="1-2-1-屏幕射线插值方式重建视空间坐标"><a href="#1-2-1-屏幕射线插值方式重建视空间坐标" class="headerlink" title="1.2.1 屏幕射线插值方式重建视空间坐标"></a>1.2.1 屏幕射线插值方式重建视空间坐标</h3><p>补充一条屏幕空间深度重建坐标的Tips。如果我们要求视空间的位置的话，有一种更简便并且性能更好的方式。这种方式与上面的屏幕射线插值的方式重建世界坐标的原理一致。只需要输入一个投影矩阵的逆矩阵，即在vertex阶段，从NDC坐标系的四个远裁剪面边界（+-1，+-1，1，1）乘以逆投影矩阵，得到视空间的四个远裁剪面坐标位置，然后除以齐次坐标转化到普通坐标下。这样的四个点的位置也就是视空间下从相机到该点的射线方向，经过插值到fragment阶段直接乘以01区间深度就得到了该像素点的视空间位置了。</p><p>那么就只有一个问题没有解决，在于应该如何获得NDC坐标系下的边界点。上面推导中提到过，在后处理阶段，实际上就是绘制了一个Quad，对应整个屏幕。这个Quad的四个边界点刚好对应屏幕的四个边界点，uv是（0,1）区间的，刚好对应屏幕空间，我们通过*2 - 1将其转化到（-1,1）区间就可以得到四个边界对应NDC坐标系下的xy坐标了。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183122686.png" alt="image-20211029183122686" style="zoom:80%;"> <p><strong>此处的InverseProjectionMatrix与上文中一样，也需要自己传入，因为在后处理阶段，内置矩阵已经被替换了。</strong></p><h3 id="1-3-证明世界坐标重建正确的方法"><a href="#1-3-证明世界坐标重建正确的方法" class="headerlink" title="1.3 证明世界坐标重建正确的方法"></a>1.3 证明世界坐标重建正确的方法</h3><p>k神方法</p><p><a href="https://github.com/keijiro/DepthInverseProjection">https://github.com/keijiro/DepthInverseProjection</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182315315.png" alt="image-20211029182315315" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182359614.png" alt="image-20211029182359614" style="zoom:67%;"> <p>其他方法</p><p><a href="https://www.jianshu.com/p/3f3a3911a824">https://www.jianshu.com/p/3f3a3911a824</a></p><p>首先，得先找到一种证明反推回世界空间位置正确的方法。这里，我在相机前摆放几个物体，尽量使之在世界坐标下的位置小于1，方便判定颜色如下图：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182601446.png" alt="image-20211029182601446" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182614103.png" alt="image-20211029182614103" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182627015.png" alt="image-20211029182627015" style="zoom:80%;"> <h1 id="二、一些重建世界坐标的代码"><a href="#二、一些重建世界坐标的代码" class="headerlink" title="二、一些重建世界坐标的代码"></a>二、一些重建世界坐标的代码</h1><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">//Reconstruct view-space position from depth.</span>float3 <span class="token function">ReconstructViewPos</span><span class="token punctuation">(</span>float4 screenPos<span class="token punctuation">,</span> float3 viewDir<span class="token punctuation">,</span> SceneDepth sceneDepth<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">UNITY_REVERSED_Z</span></span>        real rawDepth <span class="token operator">=</span> sceneDepth<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>        <span class="token comment">// Adjust z to match NDC for OpenGL</span>        real rawDepth <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span>UNITY_NEAR_CLIP_VALUE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> sceneDepth<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ORTHOGRAPHIC_SUPPORT<span class="token punctuation">)</span></span></span>        <span class="token comment">//View to world position</span>        float4 viewPos <span class="token operator">=</span> <span class="token function">float4</span><span class="token punctuation">(</span><span class="token punctuation">(</span>screenPos<span class="token punctuation">.</span>xy <span class="token operator">/</span> screenPos<span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">-</span> <span class="token number">1.0</span><span class="token punctuation">,</span> rawDepth<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        float4x4 viewToWorld <span class="token operator">=</span> UNITY_MATRIX_I_VP<span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">UNITY_REVERSED_Z </span><span class="token comment">//Wrecked since 7.3.1 "fix" and causes warping, invert second row https://issuetracker.unity3d.com/issues/shadergraph-inverse-view-projection-transformation-matrix-is-not-the-inverse-of-view-projection-transformation-matrix</span></span>            <span class="token comment">//Commit https://github.com/Unity-Technologies/Graphics/pull/374/files</span>            viewToWorld<span class="token punctuation">.</span>_12_22_32_42 <span class="token operator">=</span> <span class="token operator">-</span>viewToWorld<span class="token punctuation">.</span>_12_22_32_42<span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        float4 viewWorld <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>viewToWorld<span class="token punctuation">,</span> viewPos<span class="token punctuation">)</span><span class="token punctuation">;</span>        float3 viewWorldPos <span class="token operator">=</span> viewWorld<span class="token punctuation">.</span>xyz <span class="token operator">/</span> viewWorld<span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token comment">//Projection to world position</span>    float3 camPos <span class="token operator">=</span> _WorldSpaceCameraPos<span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>    float3 worldPos <span class="token operator">=</span> sceneDepth<span class="token punctuation">.</span>eye <span class="token operator">*</span> <span class="token punctuation">(</span>viewDir <span class="token operator">/</span> screenPos<span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token operator">-</span> camPos<span class="token punctuation">;</span>    float3 perspWorldPos <span class="token operator">=</span> <span class="token operator">-</span>worldPos<span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ORTHOGRAPHIC_SUPPORT<span class="token punctuation">)</span></span></span>        <span class="token keyword">return</span> <span class="token function">lerp</span><span class="token punctuation">(</span>perspWorldPos<span class="token punctuation">,</span> viewWorldPos<span class="token punctuation">,</span> unity_OrthoParams<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>        <span class="token keyword">return</span> perspWorldPos<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> <span class="token function">lerp</span><span class="token punctuation">(</span>perspWorldPos<span class="token punctuation">,</span> viewWorldPos<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SceneDepth <span class="token function">SampleDepth</span><span class="token punctuation">(</span>float4 screenPos<span class="token punctuation">)</span><span class="token punctuation">{</span>    SceneDepth depth <span class="token operator">=</span> <span class="token punctuation">(</span>SceneDepth<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_DISABLE_DEPTH_TEX</span></span>        screenPos<span class="token punctuation">.</span>xyz <span class="token operator">/=</span> screenPos<span class="token punctuation">.</span>w<span class="token punctuation">;</span>                depth<span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token function">SampleSceneDepth</span><span class="token punctuation">(</span>screenPos<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>        depth<span class="token punctuation">.</span>eye <span class="token operator">=</span> <span class="token function">LinearEyeDepth</span><span class="token punctuation">(</span>depth<span class="token punctuation">.</span>raw<span class="token punctuation">,</span> _ZBufferParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        depth<span class="token punctuation">.</span>linear01 <span class="token operator">=</span> <span class="token function">LinearDepth</span><span class="token punctuation">(</span>screenPos<span class="token punctuation">.</span>z<span class="token punctuation">,</span> depth<span class="token punctuation">.</span>eye<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>        depth<span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        depth<span class="token punctuation">.</span>eye <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        depth<span class="token punctuation">.</span>linear01 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token keyword">return</span> depth<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183312317.png" alt="image-20211029183312317" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性深度</title>
      <link href="/BloodSoul.github.io/2021/10/29/ta/xin-ji-yuan/xuan-ran-ji-qiao/xian-xing-shen-du/"/>
      <url>/BloodSoul.github.io/2021/10/29/ta/xin-ji-yuan/xuan-ran-ji-qiao/xian-xing-shen-du/</url>
      
        <content type="html"><![CDATA[<h1 id="线性深度"><a href="#线性深度" class="headerlink" title="线性深度"></a>线性深度</h1><p>LinearEyeDepth 负责把深度纹理的采样结果转换到视角空间下的深度值</p><p>Linear01Depth 这会返回一个范围在视角空间下的【0,1】的线性深度值</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029175145080.png" alt="image-20211029175145080"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029175157242.png" alt="image-20211029175157242"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029175205372.png" alt="image-20211029175205372"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029175214963.png" alt="image-20211029175214963"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029175223664.png" alt="image-20211029175223664"></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shader真机调试</title>
      <link href="/BloodSoul.github.io/2021/10/29/ta/xin-ji-yuan/zhen-ji-diao-shi/shader-zhen-ji-diao-shi/"/>
      <url>/BloodSoul.github.io/2021/10/29/ta/xin-ji-yuan/zhen-ji-diao-shi/shader-zhen-ji-diao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p><strong>渲染逆向工程：打造一台调试任意Android游戏的设备</strong></p><p><a href="https://zhuanlan.zhihu.com/p/100583752">https://zhuanlan.zhihu.com/p/100583752</a></p><p>CSV模型转换工具：</p><p>链接：<a href="https://pan.baidu.com/s/1ktY0INxI6fsS98GE2iVGmw,%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Ac5c6">https://pan.baidu.com/s/1ktY0INxI6fsS98GE2iVGmw,提取码：c5c6</a> </p><p>CSV模型转换工具源码地址：</p><p><a href="https://github.com/Alunice/TaTa">https://github.com/Alunice/TaTa</a></p><h1 id="二、RenderDoc"><a href="#二、RenderDoc" class="headerlink" title="二、RenderDoc"></a>二、RenderDoc</h1><p>官网文档 <a href="https://renderdoc.org/docs/window/event_browser.html">https://renderdoc.org/docs/window/event_browser.html</a></p><h1 id="三、华为官方图形调试器（魔改的RenderDoc）"><a href="#三、华为官方图形调试器（魔改的RenderDoc）" class="headerlink" title="三、华为官方图形调试器（魔改的RenderDoc）"></a>三、华为官方图形调试器（魔改的RenderDoc）</h1><p> 官网</p><p><a href="https://developer.huawei.com/consumer/cn/huawei-graphics-profiler/">https://developer.huawei.com/consumer/cn/huawei-graphics-profiler/</a></p><p> 文档</p><p><a href="https://developer.huawei.com/consumer/cn/doc/development/Tools-Guides/overview-0000001050741459">https://developer.huawei.com/consumer/cn/doc/development/Tools-Guides/overview-0000001050741459</a></p><p>在调试真机时，需要在 Tools — settings — Android 填写 jdk、sdk</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029173232789.png" alt="image-20211029173232789" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029173315923.png" alt="image-20211029173315923" style="zoom:80%;"> <h1 id="四、Intel-GPA"><a href="#四、Intel-GPA" class="headerlink" title="四、Intel GPA"></a>四、Intel GPA</h1><p>Intel GPA 可以在 Android 上分析渲染流程</p><p><a href="https://zhuanlan.zhihu.com/p/68741433">https://zhuanlan.zhihu.com/p/68741433</a></p><p>GPA下载地址:</p><p><a href="https://software.intel.com/content/www/us/en/develop/tools/graphics-performance-analyzers.html">https://software.intel.com/content/www/us/en/develop/tools/graphics-performance-analyzers.html</a></p><p>GPA截帧教程:</p><p><a href="https://zhuanlan.zhihu.com/p/68741433">https://zhuanlan.zhihu.com/p/68741433</a></p><p>竞品游戏模型破解流程：</p><p><a href="https://blog.csdn.net/weixin_42198546/article/details/110387643#comments_15889636">https://blog.csdn.net/weixin_42198546/article/details/110387643#comments_15889636</a></p><p>GPA 模拟器抓帧：</p><p><a href="https://zhuanlan.zhihu.com/p/68741433">https://zhuanlan.zhihu.com/p/68741433</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029174130369.png" alt="image-20211029174130369" style="zoom: 50%;"> <p>GPA截下来模型，不带UV，所以改用ninjaripper用来提取游戏内的模型</p><p><a href="https://zhuanlan.zhihu.com/p/76979718">https://zhuanlan.zhihu.com/p/76979718</a> </p><p>ninja 官网教程</p><p><a href="https://cgig.ru/2012/10/ninja-ripper/">https://cgig.ru/2012/10/ninja-ripper/</a></p><p>ninja ripper 抓夜神模拟器使用方式</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029174411978.png" alt="image-20211029174411978" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029174431488.png" alt="image-20211029174431488" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029174445329.png" alt="image-20211029174445329" style="zoom:67%;"> <h1 id="五、Snapdragon-Profiler"><a href="#五、Snapdragon-Profiler" class="headerlink" title="五、Snapdragon Profiler"></a>五、Snapdragon Profiler</h1><p> AdrenoProfiler替代品，支持 Vulkan <a href="https://blog.csdn.net/weixin_38498942/article/details/89333185">https://blog.csdn.net/weixin_38498942/article/details/89333185</a> </p><h1 id="六、Mali-Graphics-Debugger（ARM®-Mali™-GPU的Android）"><a href="#六、Mali-Graphics-Debugger（ARM®-Mali™-GPU的Android）" class="headerlink" title="六、Mali Graphics Debugger（ARM® Mali™ GPU的Android）"></a>六、Mali Graphics Debugger（ARM® Mali™ GPU的Android）</h1><p><a href="https://gameinstitute.qq.com/community/detail/103636">https://gameinstitute.qq.com/community/detail/103636</a></p><h1 id="七、GAPID-OpenGL-ES-和-Vulkan"><a href="#七、GAPID-OpenGL-ES-和-Vulkan" class="headerlink" title="七、GAPID ( OpenGL ES 和 Vulkan)"></a>七、GAPID ( OpenGL ES 和 Vulkan)</h1><p>GAPID (Graphics API Debugger)是 Google 的一款开源且跨平台的图形开发调试工具，用于记录和检查应用程序对图形驱动程序的调用，支持 OpenGL ES 和 Vulkan 调试。</p><p><a href="https://www.zhihu.com/search?type=content&amp;q=%E5%AE%89%E5%8D%93GPU%E8%B0%83%E8%AF%95">https://www.zhihu.com/search?type=content&amp;q=%E5%AE%89%E5%8D%93GPU%E8%B0%83%E8%AF%95</a></p><h1 id="八、Xcode"><a href="#八、Xcode" class="headerlink" title="八、Xcode"></a>八、Xcode</h1><h1 id="九、Arm-Mobile-Studio"><a href="#九、Arm-Mobile-Studio" class="headerlink" title="九、Arm Mobile Studio"></a>九、Arm Mobile Studio</h1><p>GDC 上的介绍：</p><p> <a href="https://www.gdcvault.com/play/1026742/Arm-Mobile-Studio-Providing-Insights">https://www.gdcvault.com/play/1026742/Arm-Mobile-Studio-Providing-Insights</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112114137272.png" alt="image-20211112114137272" style="zoom:67%;"> <p>官网：</p><p><a href="https://developer.arm.com/tools-and-software/graphics-and-gaming/arm-mobile-studio">https://developer.arm.com/tools-and-software/graphics-and-gaming/arm-mobile-studio</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112114250837.png" alt="image-20211112114250837" style="zoom:67%;"> <p>支持的手机设备：</p><p><a href="https://developer.arm.com/mobile-studio/devices">https://developer.arm.com/mobile-studio/devices</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112114348397.png" alt="image-20211112114348397" style="zoom: 50%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112114413430.png" alt="image-20211112114413430" style="zoom:50%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zbrush学习</title>
      <link href="/BloodSoul.github.io/2021/10/29/ta/art/zbrush-xue-xi/zbrush-xue-xi/"/>
      <url>/BloodSoul.github.io/2021/10/29/ta/art/zbrush-xue-xi/zbrush-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="ZB-官网教程"><a href="#ZB-官网教程" class="headerlink" title="ZB 官网教程"></a>ZB 官网教程</h1><p><a href="https://zbrush.mairuan.com/jichu/zbrush-eisd.html">https://zbrush.mairuan.com/jichu/zbrush-eisd.html</a></p><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><p>ZB 新建项目需要从灯箱中选择一个双击创建</p><p>保存工程在顶部中间的 File 中</p><h3 id="ZB-视角移动"><a href="#ZB-视角移动" class="headerlink" title="ZB 视角移动"></a>ZB 视角移动</h3><p><a href="https://zbrush.mairuan.com/jichu/zb-ydysf.html">https://zbrush.mairuan.com/jichu/zb-ydysf.html</a></p><p>平移：鼠标左键点击空白处进行旋转，按住alt+ 鼠标左键进行</p><p>缩放：平移的过程中取消alt键</p><p>缩放：Crtl + 鼠标右键 也可实现</p><h3 id="ZB-细分模型"><a href="#ZB-细分模型" class="headerlink" title="ZB 细分模型"></a>ZB 细分模型</h3><p><a href="https://zbrush.mairuan.com/jinjie/zbrush-4r7-moxing-xifen.html">https://zbrush.mairuan.com/jinjie/zbrush-4r7-moxing-xifen.html</a></p><p>Geometry — Divide</p><p>Crtl + D 增加一级细分</p><p>Shift + D 减少一级细分</p><h3 id="ZB-删除物体"><a href="#ZB-删除物体" class="headerlink" title="ZB 删除物体"></a>ZB 删除物体</h3><p>Zbrush 4R7中如何添加和删除一个SubTool</p><p> <a href="https://zbrush.mairuan.com/jichu/tianjia-shanchu-SubTool.html">https://zbrush.mairuan.com/jichu/tianjia-shanchu-SubTool.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172748930.png" alt="image-20211029172748930" style="zoom: 80%;"> <p>ZB 如何删除模型部分</p><p><a href="https://zbrush.mairuan.com/changjian/shandiao-bufen.html">https://zbrush.mairuan.com/changjian/shandiao-bufen.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172832146.png" alt="image-20211029172832146" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Art </tag>
            
            <tag> ZBrush </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maya学习</title>
      <link href="/BloodSoul.github.io/2021/10/29/ta/art/maya-xue-xi/maya-xue-xi/"/>
      <url>/BloodSoul.github.io/2021/10/29/ta/art/maya-xue-xi/maya-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="设置-UI-大小"><a href="#设置-UI-大小" class="headerlink" title="设置 UI 大小"></a>设置 UI 大小</h1><p>窗口–首选项–界面–DPI</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172333953.png" alt="image-20211029172333953" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172343971.png" alt="image-20211029172343971" style="zoom:80%;"> <h1 id="显示统计信息"><a href="#显示统计信息" class="headerlink" title="显示统计信息"></a>显示统计信息</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172404289.png" alt="image-20211029172404289" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172413143.png" alt="image-20211029172413143" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Art </tag>
            
            <tag> Maya </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高度图的法线用法</title>
      <link href="/BloodSoul.github.io/2021/10/25/ta/xin-ji-yuan/xuan-ran-ji-qiao/gao-du-tu-de-fa-xian-yong-fa/"/>
      <url>/BloodSoul.github.io/2021/10/25/ta/xin-ji-yuan/xuan-ran-ji-qiao/gao-du-tu-de-fa-xian-yong-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="有限差分—-前向差异法"><a href="#有限差分—-前向差异法" class="headerlink" title="有限差分—-前向差异法"></a>有限差分—-前向差异法</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194313147.png" alt="image-20211025194313147" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194325049.png" alt="image-20211025194325049" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194342910.png" alt="image-20211025194342910" style="zoom:80%;"> <h3 id="在高度图中使用（u方向）"><a href="#在高度图中使用（u方向）" class="headerlink" title="在高度图中使用（u方向）"></a>在高度图中使用（u方向）</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194439110.png" alt="image-20211025194439110" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194450296.png" alt="image-20211025194450296" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194504494.png" alt="image-20211025194504494" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194517918.png" alt="image-20211025194517918" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194533518.png" alt="image-20211025194533518" style="zoom:80%;"> <h3 id="中心差法"><a href="#中心差法" class="headerlink" title="中心差法"></a>中心差法</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194559118.png" alt="image-20211025194559118" style="zoom:80%;"> <h3 id="同时使用高度图的-U-和-V"><a href="#同时使用高度图的-U-和-V" class="headerlink" title="同时使用高度图的 U 和 V"></a>同时使用高度图的 U 和 V</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194634207.png" alt="image-20211025194634207" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194645518.png" alt="image-20211025194645518" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194656695.png" alt="image-20211025194656695" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194709688.png" alt="image-20211025194709688" style="zoom:80%;"> <p><strong>叉乘简写</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194738328.png" alt="image-20211025194738328" style="zoom:80%;"> <p>对于高度图如下，可以直接写出，而不必进行计算</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194810031.png" alt="image-20211025194810031" style="zoom:80%;"> <p><a href="https://zhuanlan.zhihu.com/p/143069698">https://zhuanlan.zhihu.com/p/143069698</a></p><h3 id="高度图（灰度图）转法线贴图"><a href="#高度图（灰度图）转法线贴图" class="headerlink" title="高度图（灰度图）转法线贴图"></a>高度图（灰度图）转法线贴图</h3><p>默认高度图如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025195327077.png" alt="image-20211025195327077" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025195426476.png" alt="image-20211025195426476" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025195444540.png" alt="image-20211025195444540" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三平面映射</title>
      <link href="/BloodSoul.github.io/2021/10/25/ta/xin-ji-yuan/xuan-ran-ji-qiao/san-ping-mian-ying-she/"/>
      <url>/BloodSoul.github.io/2021/10/25/ta/xin-ji-yuan/xuan-ran-ji-qiao/san-ping-mian-ying-she/</url>
      
        <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>三平面映射（任意表面纹理化）：使用物体坐标的的 xy、zy、yz 三个平面视作UV，进行贴图采样的方法。</p><p>因为不受物体本身 UV 的影响，可以用在无法获取 UV，或者物体本地的 UV 不适用的情况下。</p><h1 id="二、映射普通贴图"><a href="#二、映射普通贴图" class="headerlink" title="二、映射普通贴图"></a>二、映射普通贴图</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182414872.png" alt="image-20211025182414872" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182431003.png" alt="image-20211025182431003" style="zoom:80%;"> <p>使用YZ平面进行映射时，纹理会旋转90度，需要使用 <strong>ZY</strong> 进行校正</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182518387.png" alt="image-20211025182518387" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182534331.png" alt="image-20211025182534331" style="zoom:80%;"> <p><strong>Tip：</strong> 使用法线作为三平面混合因子时，会有一半贴图镜像显示如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182658641.png" alt="image-20211025182658641" style="zoom:80%;"> <p><strong>另外三个面全镜像</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182718929.png" alt="image-20211025182718929" style="zoom: 67%;"> <p><strong>纠正方法：</strong></p><p>如果是X映射，那就是normal.x为负数。同样，对于Y投影，当normal.y为负时。Z则相反。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182834028.png" alt="image-20211025182834028" style="zoom:80%;"> <h1 id="三、映射法线贴图"><a href="#三、映射法线贴图" class="headerlink" title="三、映射法线贴图"></a>三、映射法线贴图</h1><p>如果使用的是世界坐标，和世界空间下的法线贴图，没有问题</p><p>但是如果使用世界坐标，和切线空间下的法线贴图，则需要如下操作：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025183008194.png" alt="image-20211025183008194" style="zoom:80%;"> <p><strong>Step1</strong> ：需要将映射的法线（现在在切线空间）转换到世界空间中：切线空间定义 <strong>Z</strong> <strong>轴远离表面</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025183632284.png" alt="image-20211025183632284" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025183711818.png" alt="image-20211025183711818" style="zoom:80%;"> <p><strong>Step2</strong> ：防止镜像</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025183740426.png" alt="image-20211025183740426" style="zoom:80%;"> <p><strong>Step3</strong> ：翻转法线向上方向</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025183811523.png" alt="image-20211025183811523" style="zoom:80%;"> <h4 id="平面映射的法线与物体本身法线混合"><a href="#平面映射的法线与物体本身法线混合" class="headerlink" title="平面映射的法线与物体本身法线混合"></a><strong>平面映射的法线与物体本身法线混合</strong></h4><p><strong>Step1</strong> ：在没有切线到世界空间的转换矩阵时，可以使用 <strong>BlendNormlas</strong>（泛白）在切线空间进行混合</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025184257596.png" alt="image-20211025184257596" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025184311908.png" alt="image-20211025184311908" style="zoom:80%;"> <p><strong>Step2</strong> ：去掉 <strong>z</strong> <strong>方向的校正</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025184353627.png" alt="image-20211025184353627" style="zoom:80%;"> <p>参考：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxMzgzMzQxOA==&amp;mid=2247486039&amp;idx=1&amp;sn=4f0cfcce0d1b98f092a237452ab4d055&amp;chksm=97b189f2a0c600e4d819ce004c305a9eb174888c0875aa0782900e14373904c33a9dafeead5e&amp;scene=178&amp;cur_album_id=1745807625885171715#rd">https://mp.weixin.qq.com/s?__biz=MzIxMzgzMzQxOA==&amp;mid=2247486039&amp;idx=1&amp;sn=4f0cfcce0d1b98f092a237452ab4d055&amp;chksm=97b189f2a0c600e4d819ce004c305a9eb174888c0875aa0782900e14373904c33a9dafeead5e&amp;scene=178&amp;cur_album_id=1745807625885171715#rd</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>曲面细分着色器</title>
      <link href="/BloodSoul.github.io/2021/10/25/ta/xin-ji-yuan/xuan-ran-ji-chu-zhi-shi/qu-mian-xi-fen-zhao-se-qi/"/>
      <url>/BloodSoul.github.io/2021/10/25/ta/xin-ji-yuan/xuan-ran-ji-chu-zhi-shi/qu-mian-xi-fen-zhao-se-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>曲面细分是将事物切成较小部分的艺术。可以把一条边分成多条边，把一个三角形，分多个子三角形</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025140911874.png" alt="image-20211025140911874" style="zoom:80%;"> <p>流程为：Hull 程序和常量方法并行运行确定细分规则 -&gt; 硬件进行细分 -&gt; Domain 程序对细分后的数据进行组合（比如：法线计算、UV计算、坐标计算）</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025141255616.png" alt="image-20211025141255616" style="zoom:80%;"> <h1 id="二、使用规则"><a href="#二、使用规则" class="headerlink" title="二、使用规则"></a>二、使用规则</h1><h4 id="a、渲染限制"><a href="#a、渲染限制" class="headerlink" title="a、渲染限制"></a>a、渲染限制</h4><p>渲染目标最低为 4.6 ：target 4.6</p><p>细分因子最多只能有 64 个细分级别</p><p>Unity 无法同时支持实例化和曲面细分</p><h4 id="b、定义-Hull-程序"><a href="#b、定义-Hull-程序" class="headerlink" title="b、定义 Hull 程序"></a>b、定义 Hull 程序</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">hull MyHullProgram</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="c、定义-Hull-程序控制规则"><a href="#c、定义-Hull-程序控制规则" class="headerlink" title="c、定义 Hull 程序控制规则"></a>c、定义 Hull 程序控制规则</h4><p>SV_OutputControlPointID 为控制点（顶点）定义，每个顶点会调用一次 Hull 程序，并传入控制点 id</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token punctuation">[</span><span class="token function">UNITY_domain</span><span class="token punctuation">(</span><span class="token string">"tri"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//定义处理的数据类型，完整的类型有三角形、四边形、等直线。  unity 只支持三角形</span><span class="token punctuation">[</span><span class="token function">UNITY_partitioning</span><span class="token punctuation">(</span><span class="token string">"fractional_odd"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//告知GPU应该如何分割补丁 integer pow2 fractional_even fractional_odd</span><span class="token punctuation">[</span><span class="token function">UNITY_outputcontrolpoints</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//定义每个 patch 输出三个控制点</span><span class="token punctuation">[</span><span class="token function">UNITY_outputtopology</span><span class="token punctuation">(</span><span class="token string">"triangle_cw"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//告知GPU图元的创建规则  point line triangle_cw triangle_ccw</span><span class="token punctuation">[</span><span class="token function">UNITY_patchconstantfunc</span><span class="token punctuation">(</span><span class="token string">"MyPatchConstantFunc"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//定义每个 patch 分割的具体规则，需要定义一个同名方法</span>v2hd <span class="token function">MyHullProgram</span><span class="token punctuation">(</span>InputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">,</span> <span class="token keyword">uint</span> id<span class="token operator">:</span> SV_OutputControlPointID<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">patch</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//细分规则函数，与 hull 程序并行运行</span>TessllationFactors <span class="token function">MyPatchConstantFunc</span><span class="token punctuation">(</span>InputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TessllationFactors <span class="token keyword">output</span> <span class="token operator">=</span> <span class="token punctuation">(</span>TessllationFactors<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>inside <span class="token operator">=</span> _InsideTesselatLevel<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">output</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d、定义-Domain-程序"><a href="#d、定义-Domain-程序" class="headerlink" title="d、定义 Domain 程序"></a>d、定义 Domain 程序</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">domain MyDomainProgram</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="e、定义-Domain-程序规则"><a href="#e、定义-Domain-程序规则" class="headerlink" title="e、定义 Domain 程序规则"></a>e、定义 Domain 程序规则</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// SV_DomainLocation 为重心坐标定义，可以简单理解为权重</span><span class="token punctuation">[</span><span class="token function">UNITY_domain</span><span class="token punctuation">(</span><span class="token string">"tri"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//指定数据处理类型为三角形</span>d2g <span class="token function">MyDomainProgram</span><span class="token punctuation">(</span>TessllationFactors factors<span class="token punctuation">,</span> OutputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">,</span> float3 barycentricPos<span class="token operator">:</span> SV_DomainLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    d2g <span class="token keyword">output</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d2g<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>        float4 postionOS <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>    half2 uv <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>    half3 normalOS <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>        <span class="token keyword">output</span><span class="token punctuation">.</span>positionCS <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>postionOS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>uv <span class="token operator">=</span> <span class="token function">TRANSFORM_TEX</span><span class="token punctuation">(</span>uv<span class="token punctuation">,</span> _MainTex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>positionWS <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>unity_ObjectToWorld<span class="token punctuation">,</span> postionOS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>normalWS <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>unity_WorldToObject<span class="token punctuation">,</span> normalOS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">output</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025143759966.png" alt="image-20211025143759966" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025143821977.png" alt="image-20211025143821977" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025143844762.png" alt="image-20211025143844762" style="zoom:67%;"> <p><strong>完整代码：</strong></p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">Shader <span class="token string">"Custom/TessellationWireframeUnit"</span><span class="token punctuation">{</span>    Properties    <span class="token punctuation">{</span>        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Texture"</span><span class="token punctuation">,</span> <span class="token number">2</span>D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token function">_Roughness</span> <span class="token punctuation">(</span><span class="token string">"_Roughness"</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span>        <span class="token function">_SpecularColor</span> <span class="token punctuation">(</span><span class="token string">"_SpecularColor"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_FresnelPow</span> <span class="token punctuation">(</span><span class="token string">"_FresnelPow"</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token function">_FresnelColor</span> <span class="token punctuation">(</span><span class="token string">"_FresnelColor"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_WireframeSmooth</span> <span class="token punctuation">(</span><span class="token string">"_WireframeSmooth"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token function">_WireframeWidth</span> <span class="token punctuation">(</span><span class="token string">"_WireframeWidth"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token function">_WireframeColor</span> <span class="token punctuation">(</span><span class="token string">"_WireColor"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">[</span><span class="token function">Header</span><span class="token punctuation">(</span>Tessellation<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token function">_EdgeTesselatLevel</span> <span class="token punctuation">(</span><span class="token string">"_TesselatLevel"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token function">_InsideTesselatLevel</span> <span class="token punctuation">(</span><span class="token string">"_InsideTesselatLevel"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    SubShader    <span class="token punctuation">{</span>        Tags <span class="token punctuation">{</span> <span class="token string">"RenderType"</span> <span class="token operator">=</span> <span class="token string">"Opaque"</span> <span class="token punctuation">}</span>        LOD <span class="token number">100</span>                Pass        <span class="token punctuation">{</span>            CGPROGRAM                        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">target <span class="token number">4.6</span></span></span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">vertex vert</span></span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">hull MyHullProgram</span></span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">domain MyDomainProgram</span></span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">geometry MyGeometryProgram</span></span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">fragment frag</span></span>                        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"UnityCG.cginc"</span></span>                        <span class="token keyword">struct</span> <span class="token class-name">TessllationFactors</span>            <span class="token punctuation">{</span>                <span class="token keyword">float</span> edge<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">:</span> SV_TessFactor<span class="token punctuation">;</span>                <span class="token keyword">float</span> inside<span class="token operator">:</span> SV_InsideTessFactor<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token keyword">struct</span> <span class="token class-name">appdata</span>            <span class="token punctuation">{</span>                float4 postionOS<span class="token operator">:</span> POSITION<span class="token punctuation">;</span>                float2 uv<span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>                float3 normalOS<span class="token operator">:</span> NORMAL<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token comment">// vertex to hull/domain</span>            <span class="token keyword">struct</span> <span class="token class-name">v2hd</span>            <span class="token punctuation">{</span>                float4 postionOS<span class="token operator">:</span> INTERNALTESSPOS<span class="token punctuation">;</span>                float2 uv<span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>                float3 normalOS<span class="token operator">:</span> NORMAL<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token comment">//domain to geometry</span>            <span class="token keyword">struct</span> <span class="token class-name">d2g</span>            <span class="token punctuation">{</span>                float4 positionCS<span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>                float2 uv<span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>                float3 positionWS<span class="token operator">:</span> TEXCOORD1<span class="token punctuation">;</span>                float3 normalWS<span class="token operator">:</span> TEXCOORD2<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token comment">// geometry to fragment</span>            <span class="token keyword">struct</span> <span class="token class-name">g2f</span>            <span class="token punctuation">{</span>                float4 positionCS<span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>                float2 uv<span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>                float3 positionWS<span class="token operator">:</span> TEXCOORD1<span class="token punctuation">;</span>                float3 normalWS<span class="token operator">:</span> TEXCOORD2<span class="token punctuation">;</span>                float3 triangleBarycentric<span class="token operator">:</span> TEXCOORD3<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token keyword">sampler2D</span> _MainTex<span class="token punctuation">;</span> float4 _MainTex_ST<span class="token punctuation">;</span>            <span class="token keyword">half</span> _Roughness<span class="token punctuation">,</span> _FresnelPow<span class="token punctuation">;</span>            half4 _SpecularColor<span class="token punctuation">,</span> _FresnelColor<span class="token punctuation">;</span>            <span class="token keyword">half</span> _WireframeWidth<span class="token punctuation">,</span> _WireframeSmooth<span class="token punctuation">;</span>            half4 _WireframeColor<span class="token punctuation">;</span>            <span class="token keyword">half</span> _EdgeTesselatLevel<span class="token punctuation">,</span> _InsideTesselatLevel<span class="token punctuation">;</span>                                    g2f <span class="token function">InitG2fData</span><span class="token punctuation">(</span>d2g <span class="token keyword">input</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                g2f result <span class="token operator">=</span> <span class="token punctuation">(</span>g2f<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span>positionCS <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>positionCS<span class="token punctuation">;</span>                result<span class="token punctuation">.</span>uv <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>uv<span class="token punctuation">;</span>                result<span class="token punctuation">.</span>positionWS <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>positionWS<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                                    v2hd <span class="token function">vert</span><span class="token punctuation">(</span>appdata <span class="token keyword">input</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                v2hd <span class="token keyword">output</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v2hd<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>postionOS <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>postionOS<span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>uv <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>uv<span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>normalOS <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>normalOS<span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token keyword">output</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token punctuation">[</span><span class="token function">UNITY_domain</span><span class="token punctuation">(</span><span class="token string">"tri"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//unity 只支持三角形</span>            <span class="token punctuation">[</span><span class="token function">UNITY_partitioning</span><span class="token punctuation">(</span><span class="token string">"fractional_odd"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//integer pow2 fractional_even fractional_odd</span>            <span class="token punctuation">[</span><span class="token function">UNITY_outputcontrolpoints</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token punctuation">[</span><span class="token function">UNITY_outputtopology</span><span class="token punctuation">(</span><span class="token string">"triangle_cw"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//point line triangle_cw triangle_ccw</span>            <span class="token punctuation">[</span><span class="token function">UNITY_patchconstantfunc</span><span class="token punctuation">(</span><span class="token string">"MyPatchConstantFunc"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            v2hd <span class="token function">MyHullProgram</span><span class="token punctuation">(</span>InputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">,</span> <span class="token keyword">uint</span> id<span class="token operator">:</span> SV_OutputControlPointID<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">patch</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        TessllationFactors <span class="token function">MyPatchConstantFunc</span><span class="token punctuation">(</span>InputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                TessllationFactors <span class="token keyword">output</span> <span class="token operator">=</span> <span class="token punctuation">(</span>TessllationFactors<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>inside <span class="token operator">=</span> _InsideTesselatLevel<span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token keyword">output</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token punctuation">[</span><span class="token function">UNITY_domain</span><span class="token punctuation">(</span><span class="token string">"tri"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            d2g <span class="token function">MyDomainProgram</span><span class="token punctuation">(</span>TessllationFactors factors<span class="token punctuation">,</span> OutputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">,</span> float3 barycentricPos<span class="token operator">:</span> SV_DomainLocation<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                d2g <span class="token keyword">output</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d2g<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                                float4 postionOS <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>                half2 uv <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>                half3 normalOS <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>                                <span class="token keyword">output</span><span class="token punctuation">.</span>positionCS <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>postionOS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>uv <span class="token operator">=</span> <span class="token function">TRANSFORM_TEX</span><span class="token punctuation">(</span>uv<span class="token punctuation">,</span> _MainTex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>positionWS <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>unity_ObjectToWorld<span class="token punctuation">,</span> postionOS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>normalWS <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>unity_WorldToObject<span class="token punctuation">,</span> normalOS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token keyword">output</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token punctuation">[</span><span class="token function">maxvertexcount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">void</span> <span class="token function">MyGeometryProgram</span><span class="token punctuation">(</span>triangle d2g <span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">inout</span> TriangleStream <span class="token operator">&lt;</span> g2f <span class="token operator">&gt;</span> outStream<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                g2f output1<span class="token punctuation">,</span> output2<span class="token punctuation">,</span> output3<span class="token punctuation">;</span>                                half3 edge1 <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>positionWS <span class="token operator">-</span> <span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>positionWS<span class="token punctuation">)</span><span class="token punctuation">;</span>                half3 edge2 <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>positionWS <span class="token operator">-</span> <span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>positionWS<span class="token punctuation">)</span><span class="token punctuation">;</span>                half3 normalWS <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>edge1<span class="token punctuation">,</span> edge2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                output1 <span class="token operator">=</span> <span class="token function">InitG2fData</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output2 <span class="token operator">=</span> <span class="token function">InitG2fData</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output3 <span class="token operator">=</span> <span class="token function">InitG2fData</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                output1<span class="token punctuation">.</span>normalWS <span class="token operator">=</span> normalWS<span class="token punctuation">;</span>                output2<span class="token punctuation">.</span>normalWS <span class="token operator">=</span> normalWS<span class="token punctuation">;</span>                output3<span class="token punctuation">.</span>normalWS <span class="token operator">=</span> normalWS<span class="token punctuation">;</span>                                output1<span class="token punctuation">.</span>triangleBarycentric <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output2<span class="token punctuation">.</span>triangleBarycentric <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output3<span class="token punctuation">.</span>triangleBarycentric <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                outStream<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span><span class="token punctuation">;</span>                outStream<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token punctuation">;</span>                outStream<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>output3<span class="token punctuation">)</span><span class="token punctuation">;</span>                                outStream<span class="token punctuation">.</span><span class="token function">RestartStrip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        half4 <span class="token function">frag</span><span class="token punctuation">(</span>g2f <span class="token keyword">input</span><span class="token punctuation">)</span><span class="token operator">:</span> SV_Target            <span class="token punctuation">{</span>                half4 col <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> <span class="token keyword">input</span><span class="token punctuation">.</span>uv<span class="token punctuation">)</span><span class="token punctuation">;</span>                                half3 normalWS <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">.</span>normalWS<span class="token punctuation">)</span><span class="token punctuation">;</span>                half3 viewDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceCameraPos<span class="token punctuation">.</span>xyz <span class="token operator">-</span> <span class="token keyword">input</span><span class="token punctuation">.</span>positionWS<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span>                half3 lightDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceLightPos0<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span>                half3 Hdir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>viewDir <span class="token operator">+</span> lightDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">half</span> NdotH <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>normalWS<span class="token punctuation">,</span> Hdir<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">half</span> NdotV <span class="token operator">=</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>normalWS<span class="token punctuation">,</span> viewDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">half</span> NdotL <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>normalWS<span class="token punctuation">,</span> lightDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                                half3 diffuseColor <span class="token operator">=</span> NdotL <span class="token operator">*</span> col<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>                                half3 specularColor <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">saturate</span><span class="token punctuation">(</span>NdotH<span class="token punctuation">)</span><span class="token punctuation">,</span> _Roughness<span class="token punctuation">)</span> <span class="token operator">*</span> _SpecularColor<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>                                half3 fresnelColor <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> NdotV<span class="token punctuation">)</span><span class="token punctuation">,</span> _FresnelPow<span class="token punctuation">)</span> <span class="token operator">*</span> _FresnelColor<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>                                half3 triangleB <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>triangleBarycentric<span class="token punctuation">;</span>                half3 deltaTriangleB <span class="token operator">=</span> <span class="token function">fwidth</span><span class="token punctuation">(</span>triangleB<span class="token punctuation">)</span><span class="token punctuation">;</span>                deltaTriangleB <span class="token operator">*=</span> _WireframeWidth<span class="token punctuation">;</span>                triangleB <span class="token operator">=</span> <span class="token function">smoothstep</span><span class="token punctuation">(</span>deltaTriangleB<span class="token punctuation">,</span> deltaTriangleB <span class="token operator">*</span> _WireframeSmooth<span class="token punctuation">,</span> triangleB<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">half</span> wireframeMask <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>triangleB<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>triangleB<span class="token punctuation">.</span>y<span class="token punctuation">,</span> triangleB<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                half3 finalColor <span class="token operator">=</span> diffuseColor <span class="token operator">+</span> specularColor <span class="token operator">+</span> fresnelColor<span class="token punctuation">;</span>                finalColor <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span>finalColor<span class="token punctuation">,</span> _WireframeColor<span class="token punctuation">.</span>rgb<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> wireframeMask<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token function">half4</span><span class="token punctuation">(</span>finalColor<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        ENDCG                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/XjU6Ujgmtt33aZRM8mTJOw">https://mp.weixin.qq.com/s/XjU6Ujgmtt33aZRM8mTJOw</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shader技巧</title>
      <link href="/BloodSoul.github.io/2021/10/25/ta/xin-ji-yuan/xuan-ran-ji-qiao/shader-ji-qiao/"/>
      <url>/BloodSoul.github.io/2021/10/25/ta/xin-ji-yuan/xuan-ran-ji-qiao/shader-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="一、ddx、ddy"><a href="#一、ddx、ddy" class="headerlink" title="一、ddx、ddy"></a>一、ddx、ddy</h1><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p> ddx，ddy 获取屏幕空间中任何两个片段之间的变化率，需要在片段着色器中使用</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025134830981.png" alt="image-20211025134830981" style="zoom:80%;"> <h3 id="1-2-获取同一个三角面"><a href="#1-2-获取同一个三角面" class="headerlink" title="1.2 获取同一个三角面"></a>1.2 获取同一个三角面</h3><p>三角形内是法线相同</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025135020614.png" alt="image-20211025135020614" style="zoom:80%;"> <h3 id="1-3-利用曲率转法线"><a href="#1-3-利用曲率转法线" class="headerlink" title="1.3 利用曲率转法线"></a>1.3 利用曲率转法线</h3><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">float3 <span class="token function">heightToNormal</span><span class="token punctuation">(</span><span class="token keyword">float</span> height<span class="token punctuation">,</span> <span class="token keyword">float</span> intensity<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> dU <span class="token operator">=</span> <span class="token function">ddx</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> dV <span class="token operator">=</span> <span class="token function">ddy</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    float3 n <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">float3</span><span class="token punctuation">(</span>dU<span class="token punctuation">,</span> dV<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> intensity<span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025184819525.png" alt="image-20211025184819525" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025184848664.png" alt="image-20211025184848664" style="zoom: 67%;"> <p>在进行一次 Gamma 校正</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">float3 n <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">heightToNormal</span><span class="token punctuation">(</span>Color<span class="token punctuation">,</span> _Intensity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025185009161.png" alt="image-20211025185009161" style="zoom: 50%;"> <p>参考： <a href="https://zhuanlan.zhihu.com/p/92939613">https://zhuanlan.zhihu.com/p/92939613</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几何着色器</title>
      <link href="/BloodSoul.github.io/2021/10/25/ta/xin-ji-yuan/xuan-ran-ji-chu-zhi-shi/ji-he-zhao-se-qi/"/>
      <url>/BloodSoul.github.io/2021/10/25/ta/xin-ji-yuan/xuan-ran-ji-chu-zhi-shi/ji-he-zhao-se-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>位于顶点着色器之后，输入的是图元数据，不但能够获取点、线、面之间的关系，还能够进行新增以及删除的动作。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025102945956.png" alt="image-20211025102945956" style="zoom:80%;"> <h1 id="二、使用规则"><a href="#二、使用规则" class="headerlink" title="二、使用规则"></a>二、使用规则</h1><h4 id="a、渲染目标限制"><a href="#a、渲染目标限制" class="headerlink" title="a、渲染目标限制"></a>a、渲染目标限制</h4><p>渲染目标最低为 4.0 ：target 4.0</p><h4 id="b、属性"><a href="#b、属性" class="headerlink" title="b、属性"></a>b、属性</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token function">maxvertexcount</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>    <span class="token comment">//設定 Geometry Shader 的最大輸出頂點數</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="c、输入"><a href="#c、输入" class="headerlink" title="c、输入"></a>c、输入</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">point <span class="token comment">//点图元数据</span>line <span class="token comment">//线图元数据</span>lineadj <span class="token comment">//线图元数据，包含临近线图元数据</span>triangle <span class="token comment">//面图元数据</span>triangleleadj <span class="token comment">//面图元数据，包含临近面数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d、输出"><a href="#d、输出" class="headerlink" title="d、输出"></a>d、输出</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">PointStream <span class="token comment">//点 stream 数据</span>LineStream <span class="token comment">//线 stream 数据</span>TriangleStream <span class="token comment">//面 stream 数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="e、Stream-方法"><a href="#e、Stream-方法" class="headerlink" title="e、Stream 方法"></a>e、Stream 方法</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">struct</span><span class="token punctuation">)</span> <span class="token comment">//新增 stream 数据</span><span class="token function">RestartStrip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//使用 TriangleStream 时，需要使用这个方法形成面图元数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="f、定义几何着色器"><a href="#f、定义几何着色器" class="headerlink" title="f、定义几何着色器"></a>f、定义几何着色器</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">geometry MyGemometryProgram</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="g、设置输出的顶点数"><a href="#g、设置输出的顶点数" class="headerlink" title="g、设置输出的顶点数"></a>g、设置输出的顶点数</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token punctuation">[</span><span class="token function">maxvertexcount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、案例展示"><a href="#三、案例展示" class="headerlink" title="三、案例展示"></a>三、案例展示</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025104918692.png" alt="image-20211025104918692" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025105041109.png" alt="image-20211025105041109" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025105052631.png" alt="image-20211025105052631" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025105113846.png" alt="image-20211025105113846" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025105125945.png" alt="image-20211025105125945" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025105138318.png" alt="image-20211025105138318" style="zoom:80%;"> <p>参考：</p><p><a href="https://mp.weixin.qq.com/s/wutD7y7kGmu0t07Ph4EfhA">https://mp.weixin.qq.com/s/wutD7y7kGmu0t07Ph4EfhA</a></p><p><a href="https://tedsieblog.wordpress.com/2019/04/09/unity-geometry-shader-cookbook/">https://tedsieblog.wordpress.com/2019/04/09/unity-geometry-shader-cookbook/</a></p><p><a href="https://github.com/ted10401/GeometryShaderCookbook">https://github.com/ted10401/GeometryShaderCookbook</a></p><p><a href="https://www.youtube.com/watch?v=7C-mA08mp8o">https://www.youtube.com/watch?v=7C-mA08mp8o</a></p><p><a href="https://gamedevbill.com/geometry-shaders-in-urp/">https://gamedevbill.com/geometry-shaders-in-urp/</a></p><p><a href="https://www.youtube.com/watch?v=beSRCSRS6mI">https://www.youtube.com/watch?v=beSRCSRS6mI</a></p><p><a href="https://github.com/keijiro/StandardGeometryShader">https://github.com/keijiro/StandardGeometryShader</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>材质IOR查询</title>
      <link href="/BloodSoul.github.io/2021/10/24/ta/cai-zhi-ior-cha-xun/"/>
      <url>/BloodSoul.github.io/2021/10/24/ta/cai-zhi-ior-cha-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="IOR-Index-of-Refraction"><a href="#IOR-Index-of-Refraction" class="headerlink" title="IOR(Index of Refraction)"></a>IOR(Index of Refraction)</h1><p>数百种常见材质的折射率值(IOR - Index of Refraction)备忘查询表</p><p>在过去的几年里，大佬一直在收集能找到的，用于 3d 渲染应用程序的 IOR(折射率)值，许多 3d 应用程序支持输入实际 IOR 值，以便在渲染 3d 模型时获得更精确的效果。如果您知道要了解正确 IOR 值是什么，那么这显然是有帮助的。<br>那么支持的常用 3D 程序如下，如 NewTek Lightwave 3d、Blender 3d、Autodesk 3DS Max、Autodesk Maya、Autodesk Softimage、Maxon Cinema 4D、Next Limit Maxwell、Foundry Modo 和 Strata 3d。</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>常见材质 Common Materials</td><td></td><td></td><td></td></tr><tr><td>英文名称</td><td>中文名称</td><td>最小值</td><td>最大值</td></tr><tr><td>Acrylic glass</td><td>有机玻璃(树脂、亚克力)</td><td>1.490</td><td>1.492</td></tr><tr><td>Air</td><td>空气</td><td>1.000</td><td></td></tr><tr><td>Alcohol, Ethyl (grain)</td><td>酒类(酒精、乙醇、含沉淀物颗粒)</td><td>1.360</td><td></td></tr><tr><td>Aluminum</td><td>铝</td><td>1.390</td><td>1.440</td></tr><tr><td>Asphalt</td><td>沥青、柏油</td><td>1.635</td><td></td></tr><tr><td>Beer</td><td>啤酒</td><td>1.345</td><td></td></tr><tr><td>Bronze</td><td>青铜</td><td>1.180</td><td></td></tr><tr><td>Copper</td><td>铜</td><td>1.100</td><td>2.430</td></tr><tr><td>Crystal</td><td>水晶、石英、结晶</td><td>2.000</td><td></td></tr><tr><td>Diamond</td><td>钻石</td><td>2.418</td><td></td></tr><tr><td>Emerald</td><td>翡翠、绿宝石、祖母绿</td><td>1.560</td><td>1.605</td></tr><tr><td>Eye,Lens</td><td>眼睛、镜头</td><td>1.410</td><td></td></tr><tr><td>Glass</td><td>玻璃</td><td>1.500</td><td></td></tr><tr><td>Glass,Pyrex</td><td>耐热玻璃</td><td>1.474</td><td></td></tr><tr><td>Gold</td><td>金</td><td>0.470</td><td></td></tr><tr><td>Ice</td><td>冰</td><td>1.309</td><td></td></tr><tr><td>Iron</td><td>铁</td><td>2.950</td><td></td></tr><tr><td>Ivory</td><td>象牙</td><td>1.540</td><td></td></tr><tr><td>Lead</td><td>铅</td><td>2.010</td><td></td></tr><tr><td>Lucite</td><td>透明的合成树脂</td><td>1.495</td><td></td></tr><tr><td>Mercury(liquid)</td><td>汞、水银(液体)</td><td>1.620</td><td></td></tr><tr><td>Milk</td><td>奶、乳汁</td><td>1.350</td><td></td></tr><tr><td>Nickel</td><td>镍</td><td>1.080</td><td></td></tr><tr><td>Nylon</td><td>尼龙(丝袜)</td><td>1.530</td><td></td></tr><tr><td>Pearl</td><td>珍珠</td><td>1.530</td><td>1.690</td></tr><tr><td>Plastic</td><td>塑料</td><td>1.460</td><td></td></tr><tr><td>Teflon</td><td>特氟隆(不粘涂层、氟碳涂料)</td><td>1.350</td><td>1.380</td></tr><tr><td>Titanium</td><td>钛</td><td>2.160</td><td></td></tr><tr><td>Vodka</td><td>伏特加</td><td>1.363</td><td></td></tr><tr><td>Water (35 deg C)</td><td>水(35°)</td><td>1.325</td><td></td></tr></tbody></table><h3 id="更多折射率"><a href="#更多折射率" class="headerlink" title="更多折射率"></a>更多折射率</h3><p><strong>A - Materials</strong><br>Acetone 丙酮(常温下无色液体) 1.360<br>Acrylic glass 有机玻璃(树脂、亚克力) 1.490 ~ 1.492 ◀<br>Actinolite 阳起石(和田玉) 1.618 ◀<br>Agalmatoite 玛瑙石 1.550<br>Agate 玛瑙 1.544 ~ 1.553<br>Agate, Moss 玛瑙，苔藓 1.540<br>Air 空气 1.000<br>Alcohol 酒精、乙醇 1.329 ◀<br>Alcohol, Ethyl (grain) 酒精、乙基、乙醇、含沉淀物颗粒 1.360<br>Alcohol, Methyl (wood) 酒精、甲基、甲醇、木醇 1.329<br>Alexandrite 翠绿宝石、紫翠玉、亚历山大变色石 1.746 ~ 1.755<br>Almandine 铁铝榴石、石榴子石、贵榴石 1.244<br>Aluminum 铝 1.244<br>Aluminum Chloride 氯化铝 2.700<br>Aluminum Oxide 氧化铝、刚玉砂 1.665<br>Amber 琥珀 1.539 ~ 1.546<br>Amblygonite 琥珀石、锂磷铝石、磷铝石 1.611<br>Amethyst 紫水晶 1.532 ~ 1.554<br>Ammolite 斑彩石 1.520 ~ 1.680<br>Amorphous Selenium 非晶硒(灰色带金属光泽的固体) 2.920<br>Anatase 锐钛矿、锐钛石(四方晶系) 2.490<br>Andalusite 红柱石(斜方晶系) 1.629 ~ 1.650<br>Anhydrite 硬石膏 1.571 ◀<br>Apatite 磷灰石(玻璃状晶体、块体或结核) 1.420 ~ 1.632<br>Apophyllite 鱼眼石(四方晶系) 1.536<br>Aquamarine 海蓝宝石 1.567<br>Aragonite 文石、霰石 1.530<br>Argon 氩气 1.000<br>Argonite 陶粒 1.530 ◀<br>Asphalt 沥青、柏油 1.635 ◀<br>Augelite 光彩石 1.574<br>Axenite 硅质岩 1.674 ~ 1.704<br>Axinite 轴晶岩 1.675<br>Azurite 蓝铜矿、石青 1.730</p><p><strong>B - Materials</strong><br>Barite 重晶石 1.636<br>Barytocalcite 重晶方解石、钡方解石 1.684<br>Beer 啤酒 1.345 ◀<br>Benitoite 贝宁岩、蓝锥石 1.757<br>Benzene 苯 1.501<br>Beryl 绿柱石 1.570 ~ 1.600<br>Beryl, Red 红柱石 1.570 ~ 1.598<br>Beryllonite 绿柱石、磷钠铍石 1.553<br>Borax 硼砂 1.446<br>Brazilianite 磷铝钠石、巴西石 1.603<br>Bromine (liquid) 溴水（液体）1.661<br>Bronze 青铜 1.180 ◀<br>Brownite 钙铁石 1.567</p><p><strong>C - Materials</strong><br>Calcite 方解石、冰洲石、颗石球、霰石 1.486<br>Calspar 火山口 1.486 ~ 1.660<br>Cancrinite 钙霞石、灰霞石 1.491<br>Carbon Dioxide 二氧化碳 1.000<br>Carbon Disulfide 二硫化碳 1.628<br>Carbon Tetrachloride 四氯化碳 1.460<br>Carbonated Beverages 碳酸饮料类 1.340 ◀<br>Cassiterite 锡石 1.997<br>Celestite 天青石 1.622<br>Cerussite 白云石、碳酸铅、白铅 1.804<br>Ceylanite 铁尖晶石 1.770<br>Chalcedony 玉髓、石髓 1.544 ~ 1.553<br>Chalk 粉笔、白垩 1.510 ◀<br>Chalybite 球菱铁矿 1.630<br>Chlorine (gas) 氯（气体） 1.001<br>Chlorine (liquid) 氯（液体）1.385<br>Chrome Green 铬绿 2.400<br>Chrome Red 铬红 2.420<br>Chrome Tourmaline 铬绿碧玺 1.610 ~ 1.640<br>Chrome Yellow 铬黄 2.310<br>Chromium 铬 2.970<br>Chromium Oxide 氧化铬 2.705<br>Chrysoberyl 金绿石 1.745<br>Chrysocolla 孔雀石、凤凰石 1.500<br>Chrysoprase 绿玉髓、澳洲玉 1.534<br>Cinnabar (Mecury Sulfide) 朱砂(硫化亚汞) 3.020<br>Citrine 黄水晶、柠檬黄 1.532<br>Cleaner (all purpose) 清洁剂、去污剂（通用）1.293 ◀<br>Clinohumite 斜辉石 1.625<br>Clinozoisite 斜黝帘石 1.724<br>Cobalt Blue 钴蓝 1.740<br>Cobalt Green 钴绿 1.970<br>Cobalt Violet 钴紫 1.710<br>Colemanite 硼钙石、柯尔曼尼岩 1.586<br>Copper 铜 1.100 ~ 2.430 ◀<br>Copper Oxide 氧化铜 2.705 ◀<br>Coral 珊瑚 1.486<br>Cordierite 堇青石 1.540<br>Corundum 刚玉、金刚砂 1.766<br>Cranberry Juice (25%) 蔓越莓汁 1.351 ◀<br>Crocoite 红宝石 2.310<br>Cromite 铁云母 2.160<br>Crown Glass (impure) 厚玻璃(不纯) 1.485 ~ 1.755 ◀<br>Crown Glass (pure) 厚玻璃(纯) 1.500 ~ 1.540 ◀<br>Cryolite 冰晶石 1.338<br>Crysoberyl, Catseye 猫眼石 1.746 ~ 1.755<br>Crystal 水晶 2.000<br>Cubic Zirconia 立方氧化锆 2.150 ~ 2.180<br>Cuprite 赤铜 2.850 ◀</p><p>**D - Materials<br>**Danburite 赛黄晶 1.627 ~ 1.641<br>Diamond 钻石、金刚石 2.418 ◀<br>Diopside 透辉石 1.680<br>Dolomite 白云石、大理石 1.503 ◀<br>Dumortierite 蓝线石、杜莫铁石 1.686</p><p><strong>E - Materials</strong><br>Ebonite 硬橡胶 1.660 ◀<br>Ekanite 埃卡石 1.600<br>Elaeolite 伊利石、脂光石 1.532<br>Emerald 翡翠、绿宝石、祖母绿 1.560 ~ 1.605 ◀<br>Emerald Catseye 翡翠、绿宝石、祖母绿猫眼 1.560 ~ 1.605<br>Emerald, Synth Flux 翡翠、绿宝石、祖母绿合成 1.561<br>Emerald, Synth Hydro 翡翠、绿宝石、祖母绿合成 1.568<br>Enstatite 顽火岩 1.663<br>Epidote 绿帘石 1.733<br>Ethanol 乙醇、酒精 1.360 ◀<br>Ethyl Alcohol 乙醇、酒精 1.360<br>Euclase 蓝柱石 1.652<br>Eye, Aqueous Humor 眼睛、水样体液 1.330 ◀<br>Eye, Cornea 眼角膜 1.380 ◀<br>Eye, Lens 眼睛晶状体、镜头 1.410 ◀<br>Eye, Vitreous Humor 眼睛、玻璃状体液 1.340 ◀</p><p><strong>F - Materials</strong><br>Fabulite 辉绿岩 2.409<br>Feldspar, Adventurine 长石、外来 1.532<br>Feldspar, Albite 钠长石 1.525<br>Feldspar, Amazonite 长石、亚马逊石 1.525<br>Feldspar, Labrodorite 长石、钠铝榴石 1.565<br>Feldspar, Microcline 长石、微斜长石 1.525<br>Feldspar, Oligoclase 奥长石 1.539<br>Feldspar, Orthoclase 正长石 1.525<br>Flint Glass (impure) 高质量无色玻璃(不纯) 1.523 ~ 1.925 ◀<br>Flint Glass (pure) 高质量无色玻璃(纯) 1.600 ~ 1.620 ◀<br>Flourite 绿萤石 1.433<br>Fluoride 氟化物 1.560<br>Fluorite 萤石 1.434<br>Formica 氟石 1.470<br>Fused Quartz 熔融石英(水晶) 1.460</p><p><strong>G - Materials</strong><br>Gallium(III) Arsenide 砷化镓 3.927<br>Gallium(III) Phosphide 磷化镓 3.500<br>Garnet, Almandine 石榴石、铁铝榴石、贵榴石、石榴子石 1.760<br>Garnet, Almandite 石榴石、铁铝榴石 1.790<br>Garnet, Andradite 石榴石、钙铁榴石 1.820<br>Garnet, Demantiod 石榴石、翠榴石 1.880 ~ 1.900<br>Garnet, Grossular 石榴石、钙铝榴石 1.720 ~ 1.800<br>Garnet, Hessonite 石榴石、钙铝榴石、肉桂石 1.745<br>Garnet, Mandarin 石榴石、芬达石、锰铝榴石 1.790 ~ 1.800<br>Garnet, Pyrope 石榴石、镁铝榴石、红榴石 1.730 ~ 1.760<br>Garnet, Rhodolite 石榴石、玫瑰榴石、红宝石 1.740 ~ 1.770<br>Garnet, Spessartite 石榴石、铁铝榴石 1.810<br>Garnet, Tsavorite 石榴石、沙弗莱石、绿榴石 1.739 ~ 1.744<br>Garnet, Uvarovite 石榴石、钙铬榴石 1.740 ~ 1.870<br>Gaylussite 榴辉石、斜钠钙石 1.517<br>Glass 玻璃 1.500 ◀<br>Glass, Albite 玻璃、钠长石 1.489<br>Glass, Arsenic Trisulfide 玻璃、三硫化砷 2.040<br>Glass, Crown 皇冠玻璃 1.520<br>Glass, Crown, Zinc 锌皇冠玻璃 1.517<br>Glass, Flint, 29% lead 无色玻璃、29%铅 1.569<br>Glass, Flint, 55% lead 无色玻璃、55%铅 1.669<br>Glass, Flint, 71% lead 无色玻璃、71%铅 1.805<br>Glass, Flint, Dense 无色玻璃、密集 1.660<br>Glass, Flint, Heaviest 无色玻璃、最厚重密集 1.890<br>Glass, Flint, Heavy 无色玻璃、厚重的 1.655<br>Glass, Flint, Lanthanum 无色玻璃、镧 1.800<br>Glass, Flint, Light 无色玻璃、轻薄 1.580<br>Glass, Flint, Medium 无色玻璃、中等 1.627<br>Glass, Fused Silica 无色玻璃、熔融石英 1.459<br>Glass, Pyrex 派莱克斯耐高温玻璃 1.474<br>Glycerine 甘油 1.473<br>Glycerol 甘油 1.473<br>Gold 金 0.470 ◀<br>Gypsium 石膏 1.519 ◀</p><p><strong>H - Materials</strong><br>Hambergite 硼铍石 1.559<br>Hauyne 蓝方石 1.490 ~ 1.505<br>Hauynite 蓝方石、辉长岩 1.502<br>Heaviest Flint Glass 最重的火石玻璃 1.890<br>Heavy Flint Glass 重火石玻璃 1.650<br>Helium 氦气 1.000<br>Hematite 赤铁矿、黑胆石 2.940<br>Hemimorphite 异极矿 1.614<br>Hiddenite 辉石、翠绿锂辉石、希登石 1.655<br>Honey, 13% water content 蜂蜜，含水量 13% 1.504 ◀<br>Honey, 17% water content 蜂蜜，含水量 17% 1.494 ◀<br>Honey, 21% water content 蜂蜜，含水量 21% 1.484 ◀<br>Howlite 火山岩、白纹石、白松石 1.586<br>Hydrogen (gas) 氢（气体）1.000<br>Hydrogen (liquid) 氢（液体）1.097<br>Hypersthene 紫苏辉石 1.670</p><p><strong>I - Materials</strong><br>Ice 冰 1.309 ◀<br>Idocrase 符山石 1.713<br>Iodine Crystal 碘晶体 3.340<br>Iolite 堇青石 1.522 ~ 1.578<br>Iron 钢铁 2.950 ◀<br>Ivory 象牙 1.540 ◀</p><p><strong>J - Materials</strong><br>Jade, Jadeite 翡翠、硬玉 1.640 ~ 1.667 ◀<br>Jade, Nephrite 翡翠、软玉、和田玉、白玉 1.600 ~ 1.641 ◀<br>Jadeite 硬玉 1.665<br>Jasper 碧玉 1.540<br>Jet 黑色大理石、黑玉、煤玉 1.660 ◀</p><p><strong>K - Materials</strong><br>Kornerupine 柱晶石 1.665<br>Kunzite 昆石、锂辉石、孔赛石 1.660 ~ 1.676<br>Kyanite 晶石、蓝晶石 1.715</p><p><strong>L - Materials</strong><br>Labradorite 拉长石、拉布拉多岩 1.560 ~ 1.572<br>Lapis Gem 拉皮斯宝石 1.500<br>Lapis Lazuli 拉皮斯青金石、琉璃 1.500 ~ 1.550<br>Lazulite 天青石 1.615<br>Lead 铅 2.010 ◀<br>Lead Nitrate 亚硝酸铅 1.782<br>Leucite 白榴石 1.509<br>Light Flint Glass 薄火石玻璃 1.575<br>Liquid Carbon Dioxide 液态二氧化碳 1.200<br>Liquid Water (20 deg C) 水 20° 1.333<br>Lucite 绿彩石、透明合成树脂、人造荧光树脂 1.495 ◀</p><p><strong>M - Materials</strong><br>Magnesite 菱镁矿、碳酸镁 1.515<br>Malachite 孔雀石 1.655<br>Meerschaum 海泡石 1.530<br>Mercury (liquid) 汞（液体）1.620<br>Methanol 甲醇 1.329<br>Milk 奶、乳汁、白色汁液 1.350 ◀<br>Moissanite 莫桑石、碳硅石、碳矽石 2.650 ~ 2.690<br>Moldavite 玻璃陨石 1.500<br>Moonstone 月光石 1.518 ~ 1.526<br>Moonstone, Adularia 月光石、冰长石 1.525<br>Moonstone, Albite 月光石、钠长石 1.535<br>Morganite 莫甘石、摩根石、半宝石 1.585 ~ 1.594<br>Mylar 聚酯薄膜 1.650 ◀</p><p><strong>N - Materials</strong><br>Natrolite 钠沸石 1.480<br>Nephrite 软玉、和田玉 1.600<br>Nickel 镍 1.080<br>Nitrogen (gas) 氮气（气体）1.000<br>Nitrogen (liq) 氮气（流体）1.205<br>Nylon 尼龙女袜 1.530 ◀</p><p><strong>O - Materials</strong><br>Obsidian 黑曜石 1.486 ~ 1.500<br>Oil of Wintergreen 冬青油 1.536<br>Oil, Clove 丁香精油 1.535<br>Oil, Lemon 柠檬精油 1.481<br>Oil, Neroli 橙花精油 1.482<br>Oil, Orange 橙子精油 1.473<br>Oil, Safflower 红花精油 1.466<br>Oil, vegetable (50deg C) 植物精油 50° 1.470 ◀<br>Olivine 橄榄石 1.670<br>Onyx 玛瑙、文石 1.486<br>Onyx Marble 大理石玛瑙 1.486<br>Opal 猫眼石 1.450<br>Opal, Black 猫眼石、欧珀 1.440 ~ 1.460<br>Opal, Fire 猫眼石、欧珀 1.430 ~ 1.460<br>Opal, White 猫眼石、白 1.440 ~ 1.460<br>Oregon Sunstone 俄勒冈太阳石 1.560 ~ 1.572<br>Oxygen (gas) 氧气(气体) 1.000<br>Oxygen (liquid) 氧气(液体) 1.221</p><p><strong>P - Materials</strong><br>Padparadja 帕德帕拉德杰 1.760 ~ 1.773<br>Painite 白云石、铝硼锆钙石 1.787<br>Pearl 珍珠 1.530 ~ 1.690 ◀<br>Periclase 方镁石 1.740<br>Peristerite 橄榄石 1.525<br>PET 聚酯(食品包装薄膜、碳酸饮料包装、纺织品纤维、胶片、电气绝缘等等) 1.575 ◀<br>Petalite 花瓣岩、叶长石 1.502<br>PETg 聚酯(替代 PET) 1.570 ◀<br>Phenakite 硅铍石 1.650<br>Phosgenite 角铅矿 2.117<br>Plastic 塑料 1.460 ◀<br>Platinum 铂金 2.330 ◀<br>Plexiglas 树脂玻璃、胶质玻璃 1.500 ◀<br>PMMA 压克力、亚克力 1.489 ~ 1.490 ◀<br>Polycarbonate 聚碳酸酯(坚硬透明塑料) 1.584<br>Polystyrene 聚苯乙烯(保丽龙) 1.550<br>Prase 绿玉髓 1.540<br>Prasiolite 橄榄岩、绿水晶、堇云石 1.540<br>Prehnite 橄榄岩、葡萄石 1.610<br>Proustite 淡红银矿 2.790<br>Purpurite 紫水晶 1.840 ◀<br>Pyrite 黄铁、硫铁 1.810<br>Pyrope 镁铝榴石 1.740</p><p><strong>Q - Materials</strong><br>Quartz 石英 1.544 ~ 1.644<br>Quartz, Fused 熔融石英 1.458</p><p><strong>R - Materials</strong><br>Rhodizite 硼锂铍石 1.690<br>Rhodochrisite 红榴石 1.600<br>Rhodonite 褐铁矿、玫瑰石 1.735<br>Rock salt 岩盐、粗盐 1.516 ~ 1.544<br>Rubber, Natural 天然橡胶 1.519 ◀<br>Ruby 深红宝石 1.757 ~ 1.779 ◀<br>Rum, White 朗姆酒白色 1.361 ◀<br>Rutile 金红石 2.620</p><p><strong>S - Materials</strong><br>Salt (NaCl) 食盐 1.544 ◀<br>Sanidine 透长石、玻璃长石 1.522<br>Sapphire 蓝宝石 1.757 ~ 1.779 ◀<br>Sapphire, Star 星光蓝宝石 1.760 ~ 1.773<br>Scapolite 方柱石 1.540<br>Scapolite, Yellow 黄方柱石 1.555<br>Scheelite 灰重石、白钨矿 1.920<br>Selenium, Amorphous 非晶体硒 2.920<br>Serpentine 蛇纹石 1.560<br>Shampoo 洗发剂、香波 1.362 ◀<br>Shell 贝壳 1.530<br>Shower gel 沐浴啫喱、浴乳乳、沐浴露 1.510 ◀<br>Silicon 硅 4.010 ~ 4.240<br>Sillimanite 硅线石、矽线石 1.658<br>Silver 银 0.180 ~ 1.350 ◀<br>Sinhalite 硼铝镁石 1.699<br>Smaragdite 绿闪石 1.608<br>Smithsonite 炉甘石、菱锌矿 1.621<br>Sodalite 苏打石、方钠石 1.483<br>Sodium Chloride 1.544 ~ 1.644<br>Spessarite 白云石 1.790 ~ 1.810<br>Sphalerite 闪锌矿 2.368<br>Sphene 楣石、榍石 1.885<br>Spinel 尖晶石 1.712 ~ 1.717<br>Spinel, Blue 尖晶石蓝 1.7 12 1.747<br>Spinel, Red 尖晶石红 1.708 1.735<br>Spodumene 锂辉石 1.650<br>Star Ruby 星光红宝石 1.760 ~ 1.773<br>Staurolite 十字石 1.739<br>Steatite 滑石、滑石瓷 1.539 ◀<br>Steel 钢 2.500 ◀<br>Stichtite 碳铬镁矿 1.520<br>Strontium Titanate 钛酸锶 2.410<br>Styrofoam 聚苯乙烯泡沫塑料(用于制造器皿) 1.595 ◀<br>Styrene 苯乙烯 1.519<br>Sugar Solution 30% 糖液溶液 1.380<br>Sugar Solution 80% 糖液溶液 1.490<br>Sulphur 硫化铁、硫磺 1.960<br>Synthetic Spinel 人造尖晶石 1.730</p><p><strong>T - Materials</strong><br>Taaffeite 塔菲石、铍镁晶石 1.720<br>Tantalite 钽铁矿 2.240<br>Tanzanite 坦桑石、丹泉石 1.692 ~ 1.700<br>Teflon 特氟隆(不粘涂层、氟碳涂料) 1.350 ~ 1.380<br>Thomsonite 沸石 1.530<br>Tiger eye 虎眼、虎睛石 1.544<br>Tin Iodide 碘化锡 2.106<br>Titanium 钛 2.160 ◀<br>Topaz 黄玉、黄宝石 1.607 ~ 1.627<br>Topaz, Blue 黄宝石 蓝 1.610<br>Topaz, Imperial 黄宝石 特级 1.605 ~ 1.640<br>Topaz, Pink 黄宝石 粉 1.620<br>Topaz, White 黄宝石 白 1.630<br>Topaz, Yellow 黄宝石 黄 1.620<br>Tourmaline 璧玺 1.603 ~ 1.655<br>Tourmaline, Blue 璧玺蓝 1.610 ~ 1.640<br>Tourmaline, Catseye 璧玺猫眼 1.610 ~ 1.640<br>Tourmaline, Green 璧玺绿 1.610 ~ 1.640<br>Tourmaline, Paraiba 璧玺帕赖巴 1.610 ~ 1.650<br>Tourmaline, Red 璧玺红 1.610 ~ 1.640<br>Tremolite 透闪石 1.600<br>Tugtupite 硅铍铝钠石 1.496<br>Turpentine 松节油、松脂、松香 1.472 ◀<br>Turquoise 翠蓝、松石蓝 1.610 ~ 1.650</p><p><strong>U - Materials</strong><br>Ulexite 硼钠钙石 1.490<br>Uvarovite 钙铬榴石 1.870</p><p><strong>V - Materials</strong><br>Vacuum 真空 1.000<br>Variscite 磷铝石 1.550<br>Vivianite 维维安岩 1.580<br>Vodka 伏特加 1.363 ◀</p><p><strong>W - Materials</strong><br>Wardite 水磷铝纳石 1.590<br>Water (0 deg C) 水 0° 1.333 ◀<br>Water ( 100 deg C) 水 100° 1.318 ◀<br>Water (20 deg C) 水 20° 1.333 ◀<br>Water (gas) 水气态 1.000 ◀<br>Water (35 deg C) 水 35° 1.325 ◀<br>Water Ice 水固态 1.310 ◀<br>Whisky 威士忌 1.356 ◀<br>Wulfenite 钼铅矿 2.300</p><p><strong>Z - Materials</strong><br>Zinc Crown Glass 锌冕玻璃 1.517<br>Zincite 红锌矿 2.010<br>Zircon 锆石 1.777 ~ 1.987<br>Zircon, High 锆石高 1.960<br>Zircon, Low 锆石低 1.800<br>Zirconia, Cubic 氧化锆 立方 2.173 ~ 2.210</p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mathjax使用</title>
      <link href="/BloodSoul.github.io/2021/10/24/block/mathjax-shi-yong/"/>
      <url>/BloodSoul.github.io/2021/10/24/block/mathjax-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="语法总结"><a href="#语法总结" class="headerlink" title="语法总结"></a>语法总结</h2><p>官网：<a href="https://www.mathjax.org/">https://www.mathjax.org/</a></p><p><a href="https://blog.csdn.net/ajacker/article/details/80301378">https://blog.csdn.net/ajacker/article/details/80301378</a></p><p><a href="https://blog.csdn.net/jyfu2_12/article/details/79207643">https://blog.csdn.net/jyfu2_12/article/details/79207643</a></p><p><a href="https://qianwenma.cn/2018/05/17/mathjax-yu-fa-can-kao/">https://qianwenma.cn/2018/05/17/mathjax-yu-fa-can-kao/</a></p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>markdown如何打出双下标 <a href="https://blog.csdn.net/u013698770/article/details/55210693>">https://blog.csdn.net/u013698770/article/details/55210693&gt;</a></p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>国内 mathjax CDN <a href="https://www.bootcdn.cn/mathjax/">https://www.bootcdn.cn/mathjax/</a></p><p>国外 mathjax CDN  <a href="https://github.com/mathjax/MathJax-src">https://github.com/mathjax/MathJax-src</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>scriptid<span class="token operator">=</span><span class="token string">"MathJax-script"</span> asyncsrc<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mathjax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP学习笔记</title>
      <link href="/BloodSoul.github.io/2021/10/24/ta/art/substancepainter-xue-xi/sp-xue-xi-bi-ji/"/>
      <url>/BloodSoul.github.io/2021/10/24/ta/art/substancepainter-xue-xi/sp-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>SP 基于模型创建项目</p><p>OpenGL 法线是右手准则 Maya使用 </p><p>DirectX 法线是左手准则 Max使用</p><p>F1,F2,F3 切换三维视图和二维视图，以及同时显示二维和三维</p><p>M 键：显示材质</p><p>Alt+鼠标左右中，视图控制，按住sift可以卡在某个位置</p><p>Shift+鼠标右键更改光影，和八猴一样</p><p>Ctrl+鼠标右键左右调整笔刷大小，上下调整笔刷软硬</p><p>X 键翻转黑白笔刷</p><p>添加 Mask图层 -&gt;然后添加生成器-&gt;选择生成器材质</p><p>添加颜色选择遮罩，通过 ID 贴图选择想要操作的部分</p><h4 id="上色流程"><a href="#上色流程" class="headerlink" title="上色流程"></a>上色流程</h4><p>Step1:选中区块，分底色</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024120549726.png" alt="image-20211024120549726" style="zoom:50%;"> <h4 id="头发流程"><a href="#头发流程" class="headerlink" title="头发流程"></a>头发流程</h4><p>AboutCG 机械少女 头发</p><p> Xgen -&gt; 贴图-&gt;插片</p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Art </tag>
            
            <tag> SP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八猴渲染</title>
      <link href="/BloodSoul.github.io/2021/10/24/ta/art/ba-hou-xue-xi/ba-hou-xuan-ran/"/>
      <url>/BloodSoul.github.io/2021/10/24/ta/art/ba-hou-xue-xi/ba-hou-xuan-ran/</url>
      
        <content type="html"><![CDATA[<p>八猴渲染MMD笔记汇总以及材质贴图的介绍</p><p><a href="https://www.bilibili.com/read/cv6708403/">https://www.bilibili.com/read/cv6708403/</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Art </tag>
            
            <tag> 八猴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity小技巧</title>
      <link href="/BloodSoul.github.io/2021/10/24/gameplay/unity-xiao-ji-qiao/"/>
      <url>/BloodSoul.github.io/2021/10/24/gameplay/unity-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p>加快 C# 编译速度技巧</p><p><a href="https://www.xuanyusong.com/archives/4474">https://www.xuanyusong.com/archives/4474</a></p><p>UnityEditor 到运行游戏耗时分析</p><p><a href="https://github.com/Unity-Technologies/com.unity.editoriterationprofiler">https://github.com/Unity-Technologies/com.unity.editoriterationprofiler</a></p><p><a href="https://thegamedev.guru/unity-developer-performance/editor-iteration-times-profiler-eip/">https://thegamedev.guru/unity-developer-performance/editor-iteration-times-profiler-eip/</a></p><p>《系统重构与迁移指南》</p><p> <a href="https://github.com/phodal/migration">https://github.com/phodal/migration</a> </p><p>游戏开发知识图谱</p><p><a href="http://gamextech.org/">http://gamextech.org/</a></p><p>数学建模常用软件</p><p>matlab、lingo</p><p>数据建模案例：葡萄酒的质量分析与评价</p><p>链接：<a href="https://pan.baidu.com/s/19vHzYxofIlqz_c7BRMrgxA">https://pan.baidu.com/s/19vHzYxofIlqz_c7BRMrgxA</a><br>提取码：zlld </p>]]></content>
      
      
      <categories>
          
          <category> GamePlay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SD学习</title>
      <link href="/BloodSoul.github.io/2021/10/17/ta/art/substancedesigner-xue-xi/sd-xue-xi/"/>
      <url>/BloodSoul.github.io/2021/10/17/ta/art/substancedesigner-xue-xi/sd-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>1.软件安装</p><p>最新版本下载地址：<a href="http://www.gfxcamp.com/substance-3d-designer-v112/">三维贴图材质制作软件 Substance 3D Designer V11.2.1.4934 Win/Mac 中文/英文/破解版 | 龋齿一号GFXCamp</a></p><p>安装：要求大家安装英文版本，中文版本支持不好，而且翻译容易歧义</p><p>初级入门教程</p><p>严美子老师 [（人美声甜技术高）,视频录制交早，使用软件为早期版本，不过影响不大，建议优先 观看与尝试练习制作]<br>    <a href="https://www.bilibili.com/video/av22746446/">Substance      Designer 中文教程_哔哩哔哩_bilibili 2</a>Substance     </p><p>Designer 2021 新手教程 -     [基于最新版本的教程，英文，各个节点讲解]<br>    <a href="https://www.bilibili.com/video/BV1dh411q7Rw?p=1">Substance      Designer 2021 新手教程_哔哩哔哩_bilibili 1</a></p><p>翼虎网 Substance Designer 2020-快速入门到案例实战教学</p><p><a href="https://www.yiihuu.com/a_9548.html">https://www.yiihuu.com/a_9548.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024115732813.png" alt="image-20211024115732813" style="zoom:80%;"> <h3 id="一、资源导入导出"><a href="#一、资源导入导出" class="headerlink" title="一、资源导入导出"></a>一、资源导入导出</h3><p>SD 的 import 只是复制文件，不会实时更新</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026212607282.png" alt="image-20211026212607282" style="zoom:67%;"> <p>Link 会实时跟随原始图片变化</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026212641082.png" alt="image-20211026212641082" style="zoom:67%;"> <p>发布</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026212656997.png" alt="image-20211026212656997" style="zoom: 80%;"> <h3 id="二、节点操控"><a href="#二、节点操控" class="headerlink" title="二、节点操控"></a>二、节点操控</h3><p>选择一个节点，按 返回键 便会删除这个节点，但保留原来的连线</p><p>选择一个线，新建的节点会默认连接</p><p>选择两个线，按 x 键可以交换两个的连接顺序</p><p>按 shift 可以同时移动多个节点到另一个节点上</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030120052053.png" alt="image-20211030120052053" style="zoom:67%;"> <p>灰色的点点代表节点是一个灰色的输入或输出</p><p>黄色的点点代表节点是一个RGB输入或输出</p><p>灰度和RGB相连接时会显示红色虚线，表示连接错误</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026213216446.png" alt="image-20211026213216446" style="zoom:67%;"> <p>可以使用 grayscale conversion 节点进行 RGB 转灰度</p><p>可以使用 gradient map 进行 灰度转 RGB</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026212737639.png" alt="image-20211026212737639" style="zoom:80%;"> <p>线的粗细代表位深度，线越粗，代表越大</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026214136502.png" alt="image-20211026214136502" style="zoom:67%;"> <p>选择一个节点，按D键进行折叠和展开</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026215255103.png" alt="image-20211026215255103" style="zoom:80%;"> <p>可以通过选择节点创建 Graph 节点，使用 input 和 output 进行自定义节点</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026220840199.png" alt="image-20211026220840199" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026220943677.png" alt="image-20211026220943677" style="zoom:80%;"> <h3 id="三、2D-视图"><a href="#三、2D-视图" class="headerlink" title="三、2D 视图"></a>三、2D 视图</h3><p>节点上的棋盘格图标代表着在2d视图中显示，需要双击</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211028222714547.png" alt="image-20211028222714547" style="zoom:80%;"> <p>文档图标代表属性栏当前显示的节点属性</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211028222837528.png" alt="image-20211028222837528" style="zoom:67%;"> <p>2D窗口</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211028231345241.png" alt="image-20211028231345241"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211028232531579.png" alt="image-20211028232531579"> <h3 id="四、3D-视图"><a href="#四、3D-视图" class="headerlink" title="四、3D 视图"></a>四、3D 视图</h3><p>移动：鼠标中键、Ctrl+鼠标右键</p><p>缩放：鼠标滚轮、鼠标右键上下滑动</p><p>旋转：鼠标左键</p><p>旋转环境：shift+Ctrl+鼠标右键</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030094950556.png" alt="image-20211030094950556" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030094655455.png" alt="image-20211030094655455" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030095138279.png" alt="image-20211030095138279" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030095124178.png" alt="image-20211030095124178" style="zoom:80%;"> <p>在3D窗口中预览视图</p><p>方法一：点击节点右键</p><p>方法二：右键节点图标，然后拖拽到视图</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030095446126.png" alt="image-20211030095446126" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030095522052.png" alt="image-20211030095522052" style="zoom:80%;"> <h3 id="五、基本材质节点"><a href="#五、基本材质节点" class="headerlink" title="五、基本材质节点"></a>五、基本材质节点</h3><p>BaseMaterial</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030113217431.png" alt="image-20211030113217431" style="zoom:67%;"> <p>启用对应输入节点</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030113245264.png" alt="image-20211030113245264" style="zoom:67%;"> <p>一键创建输出节点</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030113355501.png" alt="image-20211030113355501" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030113517298.png" alt="image-20211030113517298" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Art </tag>
            
            <tag> SD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shader报错集锦</title>
      <link href="/BloodSoul.github.io/2021/10/17/ta/xin-ji-yuan/shaderbug/shader-bao-cuo-ji-jin/"/>
      <url>/BloodSoul.github.io/2021/10/17/ta/xin-ji-yuan/shaderbug/shader-bao-cuo-ji-jin/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在使用 URP 库文件，但是程序仍然是 CGPROGRAM 会报 _Time 重定义的错误</p></li><li><p>在 URP 的Linear空间中使用 RT 渲染时,默认格式是 R8G8B8A8_SRGB 格式，如果想得到默认的中灰图，需要如下代码，并引入 Color 库</p><ol><li><pre><code class="glsl">#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"Gamma22ToLinear(half4(0, 0, 0, 0))    Gamma-&gt;Linear(RT Shader 写入时)-&gt;Gamma(系统写入时)-Linear(其他shader读取时)//RT 使用格式为：Gamma-&gt;Linear 然后写入时系统会自动转一次Gamma//拿到贴图时，需要再次从Gamma转Linear</code></pre></li></ol></li><li><p>使用 Alpha Cutoff 的贴图，最好不要使用 Mip Maps，在不同层级切换时，会导致 Alpha 精度变动，导致白边和物体密度丢失</p><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211020110702104.png" alt="image-20211020110701185" style="zoom:80%;"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211020111252815.png" alt="image-20211020111252815" style="zoom:80%;"> </li></ol></li><li><p>unity采样unity_SpecCube0得到UnityBlackCube（黑色）的问题，天空盒的贴图需要烘焙之后才有数据，所以要先烘焙才能用。</p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025113724301.png" alt="image-20211025113724301" style="zoom: 50%;"> </p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025113754796.png" alt="image-20211025113754796" style="zoom: 50%;">  </p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025113913172.png" alt="image-20211025113913172" style="zoom:67%;"> </p></li><li><p>模型切线的w记录是构造副法线是是否需要翻转，原因是在建模软件中使用镜像建模时，部分切线需要翻转而部分不需要翻转</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194858229.png" alt="image-20211025194858229" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194907116.png" alt="image-20211025194907116" style="zoom:80%;"> </li><li><p>使用抗锯齿时，屏幕UV不同平台的差异会出现，需要手动处理</p></li><li><p>Attributes 中的标签，必须使用全大写，不然的话，在Unity 中是正常的，在真机上会拿不到数据，变黑</p><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211102161546422.png" alt="image-20211102161546422" style="zoom:80%;"> </li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShaderBug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美术绘画分类</title>
      <link href="/BloodSoul.github.io/2021/10/17/ta/art/mei-zhu-hui-hua-fen-lei/"/>
      <url>/BloodSoul.github.io/2021/10/17/ta/art/mei-zhu-hui-hua-fen-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="一、风格分类"><a href="#一、风格分类" class="headerlink" title="一、风格分类"></a>一、风格分类</h1><p>轮廓线：勾勒物体形状的线</p><p>固有色：物体原本的颜色（默认是白光下物体呈现的色彩）</p><p>阴影：光照射物体后，没有被光照到的部分所呈现不同程度的黑暗区域</p><p>色光： 带有冷暖色彩倾向的光照射在物体上后，会改变其原本呈现的颜色（例：青苹果被夕阳的橙红光照射会偏向紫色）</p><p>具象塑造：物体的细节，即体现现实物体的详细结构和质感的描绘手法</p><p>抽象肌理：随机纹路，靠绘画材料的特性、笔刷效果等等这种抽象元素制造</p><p>*[具象塑造]与[抽象肌理]两者都是为了增加画面的信息量（精细度）。它们之间可以分开也可以巧妙结合。 </p><p><a href="https://www.douban.com/group/topic/234875985/">https://www.douban.com/group/topic/234875985/</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/p472025324.webp" alt="img"> </p><h1 id="二、职业分类（插画-原画）"><a href="#二、职业分类（插画-原画）" class="headerlink" title="二、职业分类（插画/原画）"></a>二、职业分类（插画/原画）</h1><p><a href="https://www.bilibili.com/read/cv7907297">https://www.bilibili.com/read/cv7907297</a></p><h4 id="插画："><a href="#插画：" class="headerlink" title="插画："></a>插画：</h4><p>一般是我们在一些杂志上、文学作品上所看到的一些插图，它的作用不是为了铺垫设定，而是通过精美的画面来清晰地表达文字中的内容。插画的用途比较广泛，例如广告插画，出版物插画，儿童绘本插画，自然科学插画等等</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017213350396.png" alt="image-20211017213350396" style="zoom:80%;"> <h4 id="原画："><a href="#原画：" class="headerlink" title="原画："></a>原画：</h4><p>主要是针对动画设计和游戏设计的，原画是关键的设计稿，在动画和游戏流程中起到非常重要的作用。原画的用途在人物设定、场景设定等等，这些都需要原画来做承接，游戏原画作为游戏制作前期的一个重要环节，主要内容是场景画面的描绘、人物的造型设计、材质的搭配等</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017213431656.png" alt="image-20211017213431656" style="zoom:80%;"> <h1 id="三、职业技能"><a href="#三、职业技能" class="headerlink" title="三、职业技能"></a>三、职业技能</h1><h4 id="插画技能"><a href="#插画技能" class="headerlink" title="插画技能"></a>插画技能</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%8F%92%E7%94%BB%E5%8E%9F%E7%94%BB%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD.jpg" alt="插画原画职业技能" style="zoom:50%;"> <h4 id="原画职业技能"><a href="#原画职业技能" class="headerlink" title="原画职业技能"></a>原画职业技能</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%8E%9F%E7%94%BB%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD.jpg" alt="原画职业技能" style="zoom:50%;"> <h4 id="厚涂技法"><a href="#厚涂技法" class="headerlink" title="厚涂技法"></a>厚涂技法</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%8E%9A%E6%B6%82%E6%8A%80%E6%B3%95.jpg" alt="厚涂技法" style="zoom:50%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Art </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原画学习01_透视原理</title>
      <link href="/BloodSoul.github.io/2021/10/17/ta/art/yuan-hua-xue-xi/yuan-hua-xue-xi-01-tou-shi-yuan-li/"/>
      <url>/BloodSoul.github.io/2021/10/17/ta/art/yuan-hua-xue-xi/yuan-hua-xue-xi-01-tou-shi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="透视"><a href="#透视" class="headerlink" title="透视"></a>透视</h1><p>近大远小，越拉伸距离灭点越近</p><h1 id="一点透视"><a href="#一点透视" class="headerlink" title="一点透视"></a>一点透视</h1><p>一个灭点，由摄像机移动产程</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017212005034.png" alt="image-20211017212005034"> </p><h1 id="二点透视"><a href="#二点透视" class="headerlink" title="二点透视"></a>二点透视</h1><p>有两个灭点，由物体旋转造成的</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017212123864.png" alt="image-20211017212123864" style="zoom:80%;"> <h1 id="三点透视"><a href="#三点透视" class="headerlink" title="三点透视"></a>三点透视</h1><p>由物体旋转 + 摄像机旋转产生</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017212335037.png" alt="image-20211017212335037" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017212451979.png" alt="image-20211017212451979" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Art </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shader效果素材</title>
      <link href="/BloodSoul.github.io/2021/10/17/ta/shader-xiao-guo-su-cai/shader-xiao-guo-su-cai/"/>
      <url>/BloodSoul.github.io/2021/10/17/ta/shader-xiao-guo-su-cai/shader-xiao-guo-su-cai/</url>
      
        <content type="html"><![CDATA[<h1 id="一、特效"><a href="#一、特效" class="headerlink" title="一、特效"></a>一、特效</h1><h3 id="Starry-Sky-星空渲染"><a href="#Starry-Sky-星空渲染" class="headerlink" title="Starry Sky (星空渲染)"></a>Starry Sky (星空渲染)</h3><p><a href="https://assetstore.unity.com/publishers/13886">https://assetstore.unity.com/publishers/13886</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017203422188.png" alt="image-20211017203422188"></p><h3 id="Tornado-龙卷风"><a href="#Tornado-龙卷风" class="headerlink" title="Tornado (龙卷风)"></a>Tornado (龙卷风)</h3><p><a href="https://www.shadertoy.com/view/wtf3Wn">https://www.shadertoy.com/view/wtf3Wn</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017203634996.png" alt="image-20211017203634996" style="zoom:80%;"> <p><a href="https://www.shadertoy.com/view/WttcR8">https://www.shadertoy.com/view/WttcR8</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017203727342.png" alt="image-20211017203727342" style="zoom: 80%;"> <p><a href="https://www.shadertoy.com/view/wdfyzN">https://www.shadertoy.com/view/wdfyzN</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017203818994.png" alt="image-20211017203818994" style="zoom:80%;"> <p><a href="https://assetstore.unity.com/packages/vfx/particles/spells/epic-toon-vfx-2-157651">https://assetstore.unity.com/packages/vfx/particles/spells/epic-toon-vfx-2-157651</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024120210586.png" alt="image-20211024120210586" style="zoom:80%;"> <h3 id="Brush-笔刷"><a href="#Brush-笔刷" class="headerlink" title="Brush(笔刷)"></a>Brush(笔刷)</h3><p><a href="https://www.shadertoy.com/view/ltj3Wc">https://www.shadertoy.com/view/ltj3Wc</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017203920413.png" alt="image-20211017203920413" style="zoom:80%;"> <h3 id="2D-Shader-Magic-2D-图片效果"><a href="#2D-Shader-Magic-2D-图片效果" class="headerlink" title="2D Shader Magic (2D 图片效果)"></a>2D Shader Magic (2D 图片效果)</h3><p><a href="https://assetstore.unity.com/publishers/13886">https://assetstore.unity.com/publishers/13886</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017205801573.png" alt="image-20211017205801573" style="zoom:80%;"> <h3 id="Hyperspace-Teleport-超空间传送效果"><a href="#Hyperspace-Teleport-超空间传送效果" class="headerlink" title="Hyperspace Teleport(超空间传送效果)"></a>Hyperspace Teleport(超空间传送效果)</h3><p><a href="https://assetstore.unity.com/publishers/13886">https://assetstore.unity.com/publishers/13886</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017205950730.png" alt="image-20211017205950730" style="zoom:80%;"> <p><a href="https://zhuanlan.zhihu.com/p/77608852">https://zhuanlan.zhihu.com/p/77608852</a></p><p><a href="https://github.com/keijiro/TestbedHDRP">https://github.com/keijiro/TestbedHDRP</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211023112616617.png" alt="image-20211023112616617" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211023112712478.png" alt="image-20211023112712478" style="zoom:80%;"> <p><a href="https://github.com/keijiro/GVoxelizer/tree/master/ProjectSettings">https://github.com/keijiro/GVoxelizer/tree/master/ProjectSettings</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211023112724939.png" alt="image-20211023112724939" style="zoom:80%;"> <p><a href="https://github.com/keijiro/VectorFieldExamples">https://github.com/keijiro/VectorFieldExamples</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211023112836972.png" alt="image-20211023112836972" style="zoom:80%;"> <h3 id="火焰"><a href="#火焰" class="headerlink" title="火焰"></a>火焰</h3><p><a href="https://twitter.com/chiba_akihito">https://twitter.com/chiba_akihito</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017212724499.png" alt="image-20211017212724499" style="zoom:80%;"> <p><a href="https://youtu.be/XQlFokCzU6M">https://youtu.be/XQlFokCzU6M</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024112941763.png" alt="image-20211024112941763" style="zoom:80%;"> <p><a href="https://youtu.be/w3Xzzs1TWpk">https://youtu.be/w3Xzzs1TWpk</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113037468.png" alt="image-20211024113037468" style="zoom: 80%;"> <h3 id="爆炸"><a href="#爆炸" class="headerlink" title="爆炸"></a>爆炸</h3><p><a href="https://www.youtube.com/watch?v=8utDEwPYsfw">https://www.youtube.com/watch?v=8utDEwPYsfw</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211031115150810.png" alt="image-20211031115150810" style="zoom:67%;"> <h3 id="激光炮"><a href="#激光炮" class="headerlink" title="激光炮"></a>激光炮</h3><p><a href="https://www.youtube.com/watch?v=TR1xM1HMNQ8&amp;t=4s">https://www.youtube.com/watch?v=TR1xM1HMNQ8&amp;t=4s</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211031115305249.png" alt="image-20211031115305249" style="zoom:67%;"> <h3 id="护盾"><a href="#护盾" class="headerlink" title="护盾"></a>护盾</h3><p><a href="https://youtu.be/IZAzckJaSO8">https://youtu.be/IZAzckJaSO8</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113135132.png" alt="image-20211024113135132" style="zoom:80%;"> <p><a href="https://www.youtube.com/watch?v=i2w0p_mV8_g&amp;t=6s">https://www.youtube.com/watch?v=i2w0p_mV8_g&amp;t=6s</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211031121518526.png" alt="image-20211031121518526" style="zoom:80%;"> <h3 id="魔法阵"><a href="#魔法阵" class="headerlink" title="魔法阵"></a>魔法阵</h3><p><a href="https://assetstore.unity.com/packages/vfx/particles/the-beautiful-portal-level-up-teleport-warp-vfx-181236">https://assetstore.unity.com/packages/vfx/particles/the-beautiful-portal-level-up-teleport-warp-vfx-181236</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211031121033610.png" alt="image-20211031121033610"></p><h3 id="刀光"><a href="#刀光" class="headerlink" title="刀光"></a>刀光</h3><p><a href="https://zhuanlan.zhihu.com/p/339785163">https://zhuanlan.zhihu.com/p/339785163</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024112431731.png" alt="image-20211024112431731" style="zoom:80%;"> <p><a href="https://assetstore.unity.com/publishers/52783">https://assetstore.unity.com/publishers/52783</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024120128346.png" alt="image-20211024120128346" style="zoom:80%;"> <h3 id="冰"><a href="#冰" class="headerlink" title="冰"></a>冰</h3><p><a href="https://youtu.be/gfOaGvNQ28U">https://youtu.be/gfOaGvNQ28U</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113450452.png" alt="image-20211024113450452" style="zoom:80%;"> <h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p><a href="https://assetstore.unity.com/packages/vfx/particles/perfect-rpg-mmo-3d-effect-vfx-pack-190082">https://assetstore.unity.com/packages/vfx/particles/perfect-rpg-mmo-3d-effect-vfx-pack-190082</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024120051002.png" alt="image-20211024120051002" style="zoom:80%;"> <p><a href="https://assetstore.unity.com/publishers/8569">https://assetstore.unity.com/publishers/8569</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024120238347.png" alt="image-20211024120238347" style="zoom:80%;"> <h1 id="二、场景效果"><a href="#二、场景效果" class="headerlink" title="二、场景效果"></a>二、场景效果</h1><h3 id="Raindrop-Wet-Surface-（下雨潮湿表面）"><a href="#Raindrop-Wet-Surface-（下雨潮湿表面）" class="headerlink" title="Raindrop Wet Surface （下雨潮湿表面）"></a>Raindrop Wet Surface （下雨潮湿表面）</h3><p><a href="https://assetstore.unity.com/publishers/13886">https://assetstore.unity.com/publishers/13886</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017204056571.png" alt="image-20211017204056571" style="zoom:80%;"> <p><a href="https://seblagarde.wordpress.com/2013/01/03/water-drop-2b-dynamic-rain-and-its-effects/">https://seblagarde.wordpress.com/2013/01/03/water-drop-2b-dynamic-rain-and-its-effects/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017204140518.png" alt="image-20211017204140518" style="zoom:80%;"> <p>逆水寒下雨效果解析：</p><p> <a href="https://zhuanlan.zhihu.com/p/111904859">https://zhuanlan.zhihu.com/p/111904859</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017204320108.png" alt="image-20211017204320108" style="zoom:80%;"> <p><a href="https://zhuanlan.zhihu.com/p/182459720">https://zhuanlan.zhihu.com/p/182459720</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017205116668.png" alt="image-20211017205116668" style="zoom:80%;"> <p><a href="https://zhuanlan.zhihu.com/p/331781508">https://zhuanlan.zhihu.com/p/331781508</a></p><p><a href="https://github.com/clatterrr/FluidSimulationTutorialsUnity">https://github.com/clatterrr/FluidSimulationTutorialsUnity</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024112705056.png" alt="image-20211024112705056" style="zoom:80%;"> <p>海之号角2 屏幕雨效果模拟 </p><p><a href="https://zhuanlan.zhihu.com/p/90697134">https://zhuanlan.zhihu.com/p/90697134</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024114309981.png" alt="image-20211024114309981" style="zoom:80%;"> <p>NVIDIA 的 GPU 雨模拟 </p><p><a href="https://developer.download.nvidia.cn/SDK/10/direct3d/Source/rain/doc/RainSDKWhitePaper.pdf">https://developer.download.nvidia.cn/SDK/10/direct3d/Source/rain/doc/RainSDKWhitePaper.pdf</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024114522169.png" alt="image-20211024114522169" style="zoom:80%;"> <p>雨线模拟 </p><p><a href="https://www1.cs.columbia.edu/CAVE/publications/pdfs/Garg_TOG06.pdf">https://www1.cs.columbia.edu/CAVE/publications/pdfs/Garg_TOG06.pdf</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024114632615.png" alt="image-20211024114632615" style="zoom:80%;"> <p>Unity 商店效果</p><p><a href="https://assetstore.unity.com/packages/vfx/particles/environment/realistic-rain-storm-46192#content">https://assetstore.unity.com/packages/vfx/particles/environment/realistic-rain-storm-46192#content</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024114830092.png" alt="image-20211024114830092" style="zoom:80%;"> <p><a href="https://assetstore.unity.com/packages/vfx/particles/environment/rain-35156#content">https://assetstore.unity.com/packages/vfx/particles/environment/rain-35156#content</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024114903319.png" alt="image-20211024114903319" style="zoom:80%;"> <h3 id="Lightning-闪电"><a href="#Lightning-闪电" class="headerlink" title="Lightning(闪电)"></a>Lightning(闪电)</h3><p><a href="https://zhuanlan.zhihu.com/p/38785982">https://zhuanlan.zhihu.com/p/38785982</a></p><p><a href="https://github.com/noobdawn/Fractal-Lightning-Unity">https://github.com/noobdawn/Fractal-Lightning-Unity</a></p><p>分形闪电</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017210454663.png" alt="image-20211017210454663" style="zoom:80%;"> <p>黑白屏控制</p><p> <a href="https://zhuanlan.zhihu.com/p/118533357">https://zhuanlan.zhihu.com/p/118533357</a> </p><p><a href="https://github.com/MarcusXie3D/MobileWeatherSystem">https://github.com/MarcusXie3D/MobileWeatherSystem</a></p><p><a href="https://www.youtube.com/watch?v=ewC_c6aHbf8">Unity 2017 - Game VFX -Lightning and Thunder Effect</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113753798.png" alt="image-20211024113753798" style="zoom:80%;"> <p>程序闪电</p><p><a href="https://assetstore.unity.com/packages/tools/particles-effects/procedural-lightning-high-performance-and-shocking-lightning-34217">https://assetstore.unity.com/packages/tools/particles-effects/procedural-lightning-high-performance-and-shocking-lightning-34217</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113839856.png" alt="image-20211024113839856" style="zoom:80%;"> <p>免费版本 <a href="https://assetstore.unity.com/packages/tools/particles-effects/lightning-bolt-effect-for-unity-59471">https://assetstore.unity.com/packages/tools/particles-effects/lightning-bolt-effect-for-unity-59471</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113914561.png" alt="image-20211024113914561" style="zoom:80%;"> <p>着色器闪电，附带完整解决方案 <a href="https://assetstore.unity.com/packages/tools/particles-effects/thor-thunderstorm-103956">https://assetstore.unity.com/packages/tools/particles-effects/thor-thunderstorm-103956</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113947790.png" alt="image-20211024113947790" style="zoom:80%;"> <h3 id="可交互地表"><a href="#可交互地表" class="headerlink" title="可交互地表"></a>可交互地表</h3><p><a href="https://github.com/TYJia/SandTrace">https://github.com/TYJia/SandTrace</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024125609176.png" alt="image-20211024125609176" style="zoom:80%;"> <h3 id="Mirror（镜子）"><a href="#Mirror（镜子）" class="headerlink" title="Mirror（镜子）"></a>Mirror（镜子）</h3><p><a href="https://github.com/Kink3d/kMirrors">https://github.com/Kink3d/kMirrors</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171144101.png" alt="image-20211029171144101" style="zoom:80%;">  <h3 id="Portal-Visibility（可见性测试）"><a href="#Portal-Visibility（可见性测试）" class="headerlink" title="Portal Visibility（可见性测试）"></a>Portal Visibility（可见性测试）</h3><p><a href="https://github.com/Kink3d/kPortals">https://github.com/Kink3d/kPortals</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171352549.png" alt="image-20211029171352549" style="zoom:80%;"> <h3 id="Water-水"><a href="#Water-水" class="headerlink" title="Water (水)"></a>Water (水)</h3><p>URP 官网海水示例</p><p><a href="https://www.youtube.com/watch?v=gRq-IdShxpU">https://www.youtube.com/watch?v=gRq-IdShxpU</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171847946.png" alt="image-20211029171847946" style="zoom:80%;"> <p><a href="https://www.youtube.com/watch?v=FbTAbOnhRcI">OCEAN shader with Unity Shader Graph!</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029185158340.png" alt="image-20211029185158340" style="zoom: 67%;"> <p>Water Rendering in Far Cry 5</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029185225833.png" alt="image-20211029185225833" style="zoom:67%;"> <p>KWS Water System (URP Rendering)</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029185252327.png" alt="image-20211029185252327" style="zoom:80%;"> <h3 id="Interactive-Water（-可交互水体）"><a href="#Interactive-Water（-可交互水体）" class="headerlink" title="Interactive Water（ 可交互水体）"></a>Interactive Water（ 可交互水体）</h3><p><a href="https://marketplace-website-node-launcher-prod.ol.epicgames.com/ue/marketplace/zh-CN/product/uiws-unified-interactive-water-system">https://marketplace-website-node-launcher-prod.ol.epicgames.com/ue/marketplace/zh-CN/product/uiws-unified-interactive-water-system</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171958338.png" alt="image-20211029171958338" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172014540.png" alt="image-20211029172014540" style="zoom:67%;"> <p>SHADERSOURCE - Fluid Interaction Tool</p><p><a href="https://marketplace-website-node-launcher-prod.ol.epicgames.com/ue/marketplace/zh-CN/product/fluid-interaction-tool">https://marketplace-website-node-launcher-prod.ol.epicgames.com/ue/marketplace/zh-CN/product/fluid-interaction-tool</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172052810.png" alt="image-20211029172052810" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172101962.png" alt="image-20211029172101962" style="zoom:67%;"> <h1 id="二、后效"><a href="#二、后效" class="headerlink" title="二、后效"></a>二、后效</h1><h3 id="Screen-Transition-Shader-屏幕转场效果"><a href="#Screen-Transition-Shader-屏幕转场效果" class="headerlink" title="Screen Transition Shader (屏幕转场效果)"></a>Screen Transition Shader (屏幕转场效果)</h3><p><a href="https://assetstore.unity.com/publishers/13886">https://assetstore.unity.com/publishers/13886</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017204928058.png" alt="image-20211017204928058" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017204946959.png" alt="image-20211017204946959" style="zoom:80%;"> <h3 id="Raindrops（雨滴模拟）"><a href="#Raindrops（雨滴模拟）" class="headerlink" title="Raindrops（雨滴模拟）"></a>Raindrops（雨滴模拟）</h3><p><a href="https://zhuanlan.zhihu.com/p/298606553">https://zhuanlan.zhihu.com/p/298606553</a></p><p><a href="https://www.shadertoy.com/view/ltffzl">https://www.shadertoy.com/view/ltffzl</a></p><p><a href="https://github.com/ya7gisa0/Unity-Raindrops">https://github.com/ya7gisa0/Unity-Raindrops</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017205554465.png" alt="image-20211017205554465" style="zoom:80%;"> <p><a href="https://github.com/Kink3d/LensRain">https://github.com/Kink3d/LensRain</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029170819017.png" alt="image-20211029170819017" style="zoom:80%;"> <h3 id="坏电视（信号干扰）"><a href="#坏电视（信号干扰）" class="headerlink" title="坏电视（信号干扰）"></a>坏电视（信号干扰）</h3><p><a href="https://github.com/klj35/LearnUnityShader">https://github.com/klj35/LearnUnityShader</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017215059420.png" alt="image-20211017215059420" style="zoom:80%;"> <h3 id="Digital-Rain（数字雨）"><a href="#Digital-Rain（数字雨）" class="headerlink" title="Digital Rain（数字雨）"></a>Digital Rain（数字雨）</h3><p><a href="https://www.shadertoy.com/view/NsyXDm">https://www.shadertoy.com/view/NsyXDm</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211023113148722.png" alt="image-20211023113148722" style="zoom:80%;"> <h3 id="Motion-Blur-（运动模糊）"><a href="#Motion-Blur-（运动模糊）" class="headerlink" title="Motion Blur （运动模糊）"></a>Motion Blur （运动模糊）</h3><p><a href="https://github.com/Kink3d/kMotion">https://github.com/Kink3d/kMotion</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171030013.png" alt="image-20211029171030013" style="zoom:80%;"> <h1 id="三、UI"><a href="#三、UI" class="headerlink" title="三、UI"></a>三、UI</h1><p><a href="https://zhuanlan.zhihu.com/p/144732274">https://zhuanlan.zhihu.com/p/144732274</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024112329924.png" alt="image-20211024112329924" style="zoom: 67%;"> <h1 id="四、噪声"><a href="#四、噪声" class="headerlink" title="四、噪声"></a>四、噪声</h1><p>K神的噪声库 <a href="https://github.com/keijiro/NoiseShader">https://github.com/keijiro/NoiseShader</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024112522269.png" alt="image-20211024112522269" style="zoom:80%;"> <h1 id="五、五彩斑斓的效果"><a href="#五、五彩斑斓的效果" class="headerlink" title="五、五彩斑斓的效果"></a>五、五彩斑斓的效果</h1><p><a href="https://zhuanlan.zhihu.com/p/165144284">https://zhuanlan.zhihu.com/p/165144284</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123953641.png" alt="image-20211024123953641" style="zoom:67%;"> <p><a href="https://www.element3ds.com/forum.php?mod=viewthread&amp;tid=347261&amp;extra=page=1">https://www.element3ds.com/forum.php?mod=viewthread&amp;tid=347261&amp;extra=page%3D1</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123300704.png" alt="image-20211024123300704" style="zoom: 50%;"> <p><a href="https://mp.weixin.qq.com/s/yvOwySJVfwTS3ipAHYwZAg">https://mp.weixin.qq.com/s/yvOwySJVfwTS3ipAHYwZAg</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123629285.png" alt="image-20211024123629285" style="zoom:80%;"> <p><a href="https://80.lv/articles/building-an-iridescence-shader-in-ue4/">https://80.lv/articles/building-an-iridescence-shader-in-ue4/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123705486.png" alt="image-20211024123705486" style="zoom: 50%;"> <p><a href="https://blog.naver.com/PostView.nhn?blogId=daehuck&amp;logNo=220800855171&amp;categoryNo=34">https://blog.naver.com/PostView.nhn?blogId=daehuck&amp;logNo=220800855171&amp;categoryNo=34</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123744253.png" alt="image-20211024123744253" style="zoom:80%;"> <p><a href="https://80.lv/articles/stylized-character-production-techniques-in-ue4/">https://80.lv/articles/stylized-character-production-techniques-in-ue4/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123833795.png" alt="image-20211024123833795" style="zoom: 50%;"> <p><a href="https://polycount.com/discussion/141545/ue4-polarized-colored-reflections">https://polycount.com/discussion/141545/ue4-polarized-colored-reflections</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123918583.png" alt="image-20211024123918583" style="zoom:80%;"> <p><a href="https://github.com/TYJia/Bubble">https://github.com/TYJia/Bubble</a></p><p><a href="https://github.com/klj35/Bubble">https://github.com/klj35/Bubble</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024124454146.png" alt="image-20211024124454146" style="zoom:80%;"> <h1 id="六、工具"><a href="#六、工具" class="headerlink" title="六、工具"></a>六、工具</h1><h3 id="Bezier-Spline-贝塞尔曲线"><a href="#Bezier-Spline-贝塞尔曲线" class="headerlink" title="Bezier Spline (贝塞尔曲线)"></a>Bezier Spline (贝塞尔曲线)</h3><p><a href="https://github.com/Kink3d/kSplines">https://github.com/Kink3d/kSplines</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171558412.png" alt="image-20211029171558412" style="zoom:80%;"> <h3 id="URP-Debug"><a href="#URP-Debug" class="headerlink" title="URP Debug"></a>URP Debug</h3><p><a href="https://assetstore.unity.com/packages/tools/utilities/urp-debug-views-158837">https://assetstore.unity.com/packages/tools/utilities/urp-debug-views-158837</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171722188.png" alt="image-20211029171722188" style="zoom:80%;"> <h1 id="七、角色"><a href="#七、角色" class="headerlink" title="七、角色"></a>七、角色</h1><h3 id="卡通渲染"><a href="#卡通渲染" class="headerlink" title="卡通渲染"></a>卡通渲染</h3><p><a href="https://github.com/Kink3d/kShading">https://github.com/Kink3d/kShading</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171637683.png" alt="image-20211029171637683" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shader素材 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>傅里叶变换</title>
      <link href="/BloodSoul.github.io/2021/10/03/ta/xin-ji-yuan/shu-xue/fu-li-xie-bian-huan/"/>
      <url>/BloodSoul.github.io/2021/10/03/ta/xin-ji-yuan/shu-xue/fu-li-xie-bian-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="零、-傅里叶知识结构"><a href="#零、-傅里叶知识结构" class="headerlink" title="零、 傅里叶知识结构"></a>零、 傅里叶知识结构</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103602953.png" alt="image-20211003103602953" style="zoom:150%;"> <h1 id="一、微分积分"><a href="#一、微分积分" class="headerlink" title="一、微分积分"></a>一、微分积分</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101426711.png" alt="image-20211003101426711" style="zoom:80%;"> <p>微分：是通过在一个非常小的变化中，利用简单方程进行近似模拟出原方程，进行研究求得正确结果的过程（微分就是将函数化繁为简，在局部近似出一个简单的函数替代原函数，使用该简单函数进行推导查看起变化，进而求出正确结果的过程）。可以简单理解为斜率，变化率，切线</p><p>积分：简单理解为 求某个方程与X轴围城的面积</p><p>定积分：简单理解为 给一个确定的X范围，求出方程与X轴围城的面积</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101540223.png" alt="image-20211003101540223" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101612731.png" alt="image-20211003101612731" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101752360.png" alt="image-20211003101752360" style="zoom:80%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101832229.png" alt="image-20211003101832229" style="zoom:80%;"><h1 id="二、三角函数的运算"><a href="#二、三角函数的运算" class="headerlink" title="二、三角函数的运算"></a>二、三角函数的运算</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101907589.png" alt="image-20211003101907589" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102017358.png" alt="image-20211003102017358" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102039206.png" alt="image-20211003102039206" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102100656.png" alt="image-20211003102100656" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102228817.png" alt="image-20211003102228817" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102412535.png" alt="image-20211003102412535" style="zoom:80%;"> <h1 id="三、正交"><a href="#三、正交" class="headerlink" title="三、正交"></a>三、正交</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102445311.png" alt="image-20211003102445311" style="zoom:80%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102519417.png" alt="image-20211003102519417" style="zoom:80%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/Screenshot_20210930_105342_com.jd.app.reader.jpg" alt="Screenshot_20210930_105342_com.jd.app.reader" style="zoom:80%;"> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103008703.png" alt="image-20211003103008703" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103030878.png" alt="image-20211003103030878" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103145203.png" alt="image-20211003103145203" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103249636.png" alt="image-20211003103249636" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103401636.png" alt="image-20211003103401636" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103428672.png" alt="image-20211003103428672" style="zoom:80%;"><h1 id="四、三角函数合成"><a href="#四、三角函数合成" class="headerlink" title="四、三角函数合成"></a>四、三角函数合成</h1><h5 id="4-1-相同周期的合成"><a href="#4-1-相同周期的合成" class="headerlink" title="4.1 相同周期的合成"></a>4.1 相同周期的合成</h5><p><strong>相互正交的两个函数，他们自己无法通过组合表示对方，例如 X,Y</strong></p><p>sinmx 与 cosmx， 以及 sinm 与 sinn （m不等于n),等等</p> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/Screenshot_20210930_144428_com.jd.app.reader.jpg" alt="Screenshot_20210930_144428_com.jd.app.reader" style="zoom:80%;"> <p>acosx + bsinx 可以理解成用 cosx 和 sinx 表示基底，也就是X轴Y轴表示坐标</p><p>还可以理解成如下方式：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003104608111.png" alt="image-20211003104608111" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003104851782.png" alt="image-20211003104851782" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105001738.png" alt="image-20211003105001738" style="zoom:80%;"> <h5 id="4-2-不同周期的合成"><a href="#4-2-不同周期的合成" class="headerlink" title="4.2 不同周期的合成"></a>4.2 不同周期的合成</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105503492.png" alt="image-20211003105503492" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105541198.png" alt="image-20211003105541198" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105601935.png" alt="image-20211003105601935" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105626862.png" alt="image-20211003105626862" style="zoom:80%;"> <h1 id="五、傅里叶级数"><a href="#五、傅里叶级数" class="headerlink" title="五、傅里叶级数"></a>五、傅里叶级数</h1><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105721218.png" alt="image-20211003105721218" style="zoom:80%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/Screenshot_20210930_152601_com.jd.app.reader.jpg" alt="Screenshot_20210930_152601_com.jd.app.reader" style="zoom:80%;">  </p><p><strong>锯齿状波</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105924089.png" alt="image-20211003105924089" style="zoom:80%;">  <p><strong>方形波</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110141802.png" alt="image-20211003110141802" style="zoom:80%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/Screenshot_20210930_153526_com.jd.app.reader.jpg" alt="Screenshot_20210930_153526_com.jd.app.reader"></p><h1 id="六、傅里叶变换与解析"><a href="#六、傅里叶变换与解析" class="headerlink" title="六、傅里叶变换与解析"></a>六、傅里叶变换与解析</h1><p>傅里叶变换：选择一个无规律的波形，找出其最大的周期，然后假设该周期进行循环，进行研究，拆解出它是由哪些基础波形进行组合的到的，研究一个波形是怎样组合而成的叫傅里叶变换，这里的组合并不一定完全遵循傅里叶级数</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110704993.png" alt="image-20211003110704993" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110748339.png" alt="image-20211003110748339" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110416972.png" alt="image-20211003110416972" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003111050177.png" alt="image-20211003111050177" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/Screenshot_20210930_154507_com.jd.app.reader.jpg" alt="Screenshot_20210930_154507_com.jd.app.reader" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110602297.png" alt="image-20211003110602297" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110631601.png" alt="image-20211003110631601" style="zoom:80%;"> <p><strong>傅里叶系数的三个表达式</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110939324.png" alt="image-20211003110939324" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110909826.png" alt="image-20211003110909826" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染流水线</title>
      <link href="/BloodSoul.github.io/2021/10/02/ta/xin-ji-yuan/xuan-ran-ji-chu-zhi-shi/xuan-ran-liu-shui-xian/"/>
      <url>/BloodSoul.github.io/2021/10/02/ta/xin-ji-yuan/xuan-ran-ji-chu-zhi-shi/xuan-ran-liu-shui-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、知识概念"><a href="#一、知识概念" class="headerlink" title="一、知识概念"></a>一、知识概念</h1><h3 id="1-1-其次坐标空间"><a href="#1-1-其次坐标空间" class="headerlink" title="1.1 其次坐标空间"></a>1.1 其次坐标空间</h3><p>因为平移是仿射变换，无法使用 3x3 矩阵表示，需要使用 4x4 矩阵表示，把矩阵扩展到四维空间下进行统一表示旋转、平移、缩放，这个四维空间叫 <strong>齐次坐标空间</strong> </p><h4 id="1-1-1-常见变换类型的特性"><a href="#1-1-1-常见变换类型的特性" class="headerlink" title="1.1.1 常见变换类型的特性"></a>1.1.1 常见变换类型的特性</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022141612240.png" alt="image-20211022141612240" style="zoom:80%;">  <p>Tip：</p><ol><li>注意旋转矩阵和镜像矩阵是正交矩阵</li><li> <strong>正交矩阵的逆矩阵等于它的转置矩阵</strong> ，可以避免复杂的求逆矩阵过程，就可以直接得到逆矩阵</li></ol><h4 id="1-1-2-点和方向矢量扩展到四维的区别"><a href="#1-1-2-点和方向矢量扩展到四维的区别" class="headerlink" title="1.1.2 点和方向矢量扩展到四维的区别"></a>1.1.2 点和方向矢量扩展到四维的区别</h4><p>点扩展到四维空间时，需要指定 <strong>w 的分量为 1</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022143609742.png" alt="image-20211022143609742" style="zoom:80%;"> <p>方向矢量扩展到四维空间时，需要<strong>指定 w 的分量为 0</strong> ，方向矢量不收平移影响</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022143552668.png" alt="image-20211022143552668" style="zoom:80%;"> <h3 id="1-2-变换矩阵"><a href="#1-2-变换矩阵" class="headerlink" title="1.2 变换矩阵"></a>1.2 变换矩阵</h3><h4 id="1-2-1-平移矩阵"><a href="#1-2-1-平移矩阵" class="headerlink" title="1.2.1 平移矩阵"></a>1.2.1 平移矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022143609742.png" alt="image-20211022143609742" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022143552668.png" alt="image-20211022143552668" style="zoom:80%;"> 平移矩阵的逆矩阵<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022143952071.png" alt="image-20211022143952071"> <h4 id="1-2-2-缩放矩阵"><a href="#1-2-2-缩放矩阵" class="headerlink" title="1.2.2 缩放矩阵"></a>1.2.2 缩放矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022144420597.png" alt="image-20211022144420597" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022144435954.png" alt="image-20211022144435954" style="zoom:80%;"> <p>缩放矩阵的逆矩阵</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022144514191.png" alt="image-20211022144514191" style="zoom:80%;"> <p>Tip:</p><ol><li>kx、ky、kz三个参数相等时为统一缩放，不等时为非统一缩放</li><li>非统一缩放会改变模型相关的角度和比例，会导致部分信息变换错误（如：法线，直接运用顶点变换矩阵会导致错误）</li><li>如果我们希望在任意方向上进行缩放，就需要使用一个复合变换。其中一种方法的主要思想就是，先将缩放轴变换成标准坐标轴，然后进行沿坐标轴的缩放，再使用逆变换得到原来的缩放轴朝向</li></ol><h4 id="1-2-3-旋转矩阵"><a href="#1-2-3-旋转矩阵" class="headerlink" title="1.2.3 旋转矩阵"></a>1.2.3 旋转矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022150418879.png" alt="image-20211022150418879" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022150432666.png" alt="image-20211022150432666" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022150450219.png" alt="image-20211022150450219" style="zoom:80%;"> <p>Unity 中的旋转顺序为：zxy，详细如下图</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022150858614.png" alt="image-20211022150858614" style="zoom:80%;"> <h3 id="1-3-复合变换顺序"><a href="#1-3-复合变换顺序" class="headerlink" title="1.3 复合变换顺序"></a>1.3 复合变换顺序</h3><p>Unity 约定，复合变换的顺序为：缩放 -&gt; 旋转 -&gt; 平移</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022151421564.png" alt="image-20211022151421564" style="zoom:80%;"> <p>原因：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022151613477.png" alt="image-20211022151613477">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022151649125.png" alt="image-20211022151649125" style="zoom: 67%;"> <h3 id="1-4-坐标空间变换"><a href="#1-4-坐标空间变换" class="headerlink" title="1.4 坐标空间变换"></a>1.4 坐标空间变换</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165258751.png" alt="image-20211022165258751"><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165326875.png" alt="image-20211022165326875"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165343516.png" alt="image-20211022165343516"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165400871.png" alt="image-20211022165400871"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165434146.png" alt="image-20211022165434146"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165456049.png" alt="image-20211022165456049"></p><p><strong>从A空间变换到B空间的方法：</strong></p><ol><li>求出B的三个坐标轴在A空间下的表示，然后就可以利用该表示得出 A-B空间的变换矩阵（上述介绍内容）</li><li>变换整个坐标空间B，使与坐标空间A的原点重合，坐标轴对齐，那么整个变换矩阵就是 从A-&gt;B空间变换的矩阵（下述介绍的 世界空间 -&gt; 观察空间的变换）</li></ol><h3 id="1-5-法线变换"><a href="#1-5-法线变换" class="headerlink" title="1.5 法线变换"></a>1.5 法线变换</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184640256.png" alt="image-20211022184640256" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184659496.png" alt="image-20211022184659496" style="zoom:80%;"> <p>BuildIn 中的变换实现：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184812583.png" alt="image-20211022184812583"></p><p>URP 中的变换实现：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184725030.png" alt="image-20211022184725030" style="zoom:80%;"> <h1 id="二、渲染流水线（Unity"><a href="#二、渲染流水线（Unity" class="headerlink" title="二、渲染流水线（Unity)"></a>二、渲染流水线（Unity)</h1><h3 id="2-1-渲染流水线简易图"><a href="#2-1-渲染流水线简易图" class="headerlink" title="2.1 渲染流水线简易图"></a>2.1 渲染流水线简易图</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022170538292.png" alt="image-20211022170538292" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022170605270.png" alt="image-20211022170605270" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="渲染流程图" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022170948573.png" alt="image-20211022170948573"> <p>URP 流程：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/URP%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="URP渲染流程图">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184203976.png" alt="image-20211022184203976" style="zoom:50%;"> <h3 id="2-2-模型空间到世界空间（M矩阵）"><a href="#2-2-模型空间到世界空间（M矩阵）" class="headerlink" title="2.2 模型空间到世界空间（M矩阵）"></a>2.2 模型空间到世界空间（M矩阵）</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022171241957.png" alt="image-20211022171241957"> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022171321296.png" alt="image-20211022171321296" style="zoom:80%;"> <p><strong>M</strong> 矩阵是由 Transform 组件信息的得来的</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022171719063.png" alt="image-20211022171719063"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022171745574.png" alt="image-20211022171745574"></p><h3 id="2-3-世界空间到观察空间（V矩阵）"><a href="#2-3-世界空间到观察空间（V矩阵）" class="headerlink" title="2.3 世界空间到观察空间（V矩阵）"></a>2.3 世界空间到观察空间（V矩阵）</h3><p>观察空间时右手坐标系</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022172239893.png" alt="image-20211022172239893"></p><p>在 OpenGL 图形库中，z 轴方向与相机的指向相反，形成右手坐标系</p><p>在 Direct3D 图形库中，z 轴方向与相机的指向相同，形成左手坐标系</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022172829452.png" alt="image-20211022172829452"><p>求观察矩阵的顺序为根据 Transform 组件：</p><ol><li>反向平移</li><li>反向进行zxy旋转</li><li>反向缩放</li></ol><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022173423975.png" alt="image-20211022173423975" style="zoom:150%;"><h3 id="2-4-观察空间到投影空间（P矩阵）"><a href="#2-4-观察空间到投影空间（P矩阵）" class="headerlink" title="2.4 观察空间到投影空间（P矩阵）"></a>2.4 观察空间到投影空间（P矩阵）</h3><p>投影空间的两个目的：</p><ol><li>为后面真正的投影做准备，即齐次除法</li><li>对 x、y、z进行缩放</li></ol><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022173917737.png" alt="image-20211022173917737"></p><h4 id="2-4-1-透视投影"><a href="#2-4-1-透视投影" class="headerlink" title="2.4.1 透视投影"></a>2.4.1 透视投影</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022180936847.png" alt="image-20211022180936847" style="zoom: 67%;"> <p> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182208386.png" alt="image-20211022182208386"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182513079.png" alt="image-20211022182513079"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182620218.png" alt="image-20211022182620218"> </p><h4 id="2-4-2-正交投影"><a href="#2-4-2-正交投影" class="headerlink" title="2.4.2 正交投影"></a>2.4.2 正交投影</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182856797.png" alt="image-20211022182856797"> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182918280.png" alt="image-20211022182918280"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022183004904.png" alt="image-20211022183004904"> </p><h4 id="2-4-3-知识扩展"><a href="#2-4-3-知识扩展" class="headerlink" title="2.4.3 知识扩展"></a>2.4.3 知识扩展</h4><p>因为投影空间对 x、y、z进行了缩放操作，而且这个不是线性的</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022174625241.png" alt="image-20211022174625241" style="zoom: 67%;"> <p>深度差值不是线性，而与深度的倒数成线性</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022174703574.png" alt="image-20211022174703574" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022174721704.png" alt="image-20211022174721704" style="zoom:67%;"> <p>顶点光照颜色，顶点颜色、顶点纹理坐标，在进行光栅化差值时，想要获得正确结果的计算方法： </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022174739790.png" alt="image-20211022174739790" style="zoom: 67%;">  <h4 id="2-4-4-延伸阅读"><a href="#2-4-4-延伸阅读" class="headerlink" title="2.4.4 延伸阅读"></a>2.4.4 延伸阅读</h4><p>3D 图形光栅化的透视校正问题？<a href="https://www.zhihu.com/question/40624282">https://www.zhihu.com/question/40624282</a></p><p>计算机图形学六：透视矫正插值和图形渲染管线总结 <a href="https://zhuanlan.zhihu.com/p/144331875">https://zhuanlan.zhihu.com/p/144331875</a></p><h3 id="2-5-归一化的设备坐标（NDC-）"><a href="#2-5-归一化的设备坐标（NDC-）" class="headerlink" title="2.5 归一化的设备坐标（NDC ）"></a>2.5 归一化的设备坐标（NDC ）</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022183352387.png" alt="image-20211022183352387"> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182808720.png" alt="image-20211022182808720" style="zoom:67%;"> <h4 id="2-5-1-透视投影的-NDC"><a href="#2-5-1-透视投影的-NDC" class="headerlink" title="2.5.1 透视投影的 NDC"></a>2.5.1 透视投影的 NDC</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022183815967.png" alt="image-20211022183815967"></p><h4 id="2-5-2-正交投影的-NDC"><a href="#2-5-2-正交投影的-NDC" class="headerlink" title="2.5.2 正交投影的 NDC"></a>2.5.2 正交投影的 NDC</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022183847805.png" alt="image-20211022183847805"></p><h3 id="2-6-屏幕映射"><a href="#2-6-屏幕映射" class="headerlink" title="2.6 屏幕映射"></a>2.6 屏幕映射</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184117321.png" alt="image-20211022184117321"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184133797.png" alt="image-20211022184133797"></p><h3 id="2-7-Unity-中的特殊矩阵作用"><a href="#2-7-Unity-中的特殊矩阵作用" class="headerlink" title="2.7 Unity 中的特殊矩阵作用"></a>2.7 Unity 中的特殊矩阵作用</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022185255400.png" alt="image-20211022185255400"></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022185314212.png" alt="image-20211022185314212" style="zoom: 50%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022185544200.png" alt="image-20211022185544200"></p><p><strong>Tip:</strong></p><p>C# 中默认构建的矩阵是列优先的，而shader中构建的矩阵，默认是行优先的</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022185823407.png" alt="image-20211022185823407"> </p><p>延伸阅读</p><p>变换矩阵 <a href="https://zhuanlan.zhihu.com/p/93022039">https://zhuanlan.zhihu.com/p/93022039</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火焰溶解</title>
      <link href="/BloodSoul.github.io/2021/09/29/ta/xin-ji-yuan/tan-suo/huo-yan-rong-jie/"/>
      <url>/BloodSoul.github.io/2021/09/29/ta/xin-ji-yuan/tan-suo/huo-yan-rong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="一、最终效果"><a href="#一、最终效果" class="headerlink" title="一、最终效果"></a>一、最终效果</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA1.gif" alt="火焰溶解_效果展示1" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA2.gif" alt="火焰溶解_效果展示2" style="zoom:80%;"> <h1 id="二、制作步骤"><a href="#二、制作步骤" class="headerlink" title="二、制作步骤"></a>二、制作步骤</h1><p>溶解效果的核心思想为 clip 函数的使用</p><p><strong>2.1 使用 noise 贴图，来模拟不规则边缘</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929170932172.png" alt="image-20210929170932172" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_Noise%E4%BD%BF%E7%94%A81.gif" alt="火焰溶解_Noise使用1" style="zoom:80%;"> <p><strong>2.2 通过使用 smoothstep 方法，并添加内焰和外焰颜色，实现火焰效果</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_Noise%E4%BD%BF%E7%94%A8.gif" alt="火焰溶解_Noise使用" style="zoom:80%;"> <pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">_EdgeWidth <span class="token operator">=</span> <span class="token function">Remap</span><span class="token punctuation">(</span>_EdgeWidth<span class="token punctuation">,</span> <span class="token function">half2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">half2</span><span class="token punctuation">(</span>_ClipValue<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">half</span> edgeMask <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token function">smoothstep</span><span class="token punctuation">(</span>_ClipValue<span class="token punctuation">,</span> _EdgeWidth<span class="token punctuation">,</span> dissolveMask<span class="token punctuation">)</span><span class="token punctuation">;</span>half4 edgeColor <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span>_EdgeColor1 <span class="token operator">*</span> _EdgeColor1Intensity<span class="token punctuation">,</span> _EdgeColor2 <span class="token operator">*</span> _EdgeColor2Intensity<span class="token punctuation">,</span> edgeMask<span class="token punctuation">)</span><span class="token punctuation">;</span>edgeColor <span class="token operator">=</span> edgeColor <span class="token operator">*</span> edgeMask<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.3 通过设置一个中心点，计算 UV 到该中心点的距离，与 mask 值相加，可实现定向（圆形）溶解</strong></p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">half</span> dissolveDis <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>IN<span class="token punctuation">.</span>texcoord<span class="token punctuation">.</span>xy<span class="token punctuation">,</span> <span class="token function">half2</span><span class="token punctuation">(</span>_DissolveCenterX<span class="token punctuation">,</span> _DissolveCenterY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929172726451.png" alt="image-20210929172726451" style="zoom:80%;"> <p><strong>2.4 通过 _Time 偏移 noise 贴图的 offset 便可实现火焰流动的动态效果</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%BD%95%E5%88%B6_2021_09_29_17_34_33_346.gif" alt="录制_2021_09_29_17_34_33_346" style="zoom:80%;"> <p> 2.5 通过添加一个缩放值，计算在距离结果上，可以改变它的扩散</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_%E6%89%A9%E6%95%A3%E6%95%88%E6%9E%9C.gif" alt="火焰溶解_扩散效果" style="zoom:80%;"> <p>代码如下：</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">half4 finalColor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>texcoord<span class="token punctuation">.</span>xy<span class="token punctuation">)</span> <span class="token operator">+</span> _TextureSampleAdd<span class="token punctuation">)</span> <span class="token operator">*</span> IN<span class="token punctuation">.</span>color<span class="token punctuation">;</span><span class="token keyword">half</span> dissolveDis <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>IN<span class="token punctuation">.</span>texcoord<span class="token punctuation">.</span>xy<span class="token punctuation">,</span> <span class="token function">half2</span><span class="token punctuation">(</span>_DissolveCenterX<span class="token punctuation">,</span> _DissolveCenterY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">half</span> dissolveMask <span class="token operator">=</span> maskRaw <span class="token operator">+</span> dissolveDis <span class="token operator">*</span> _DissolveScale<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最终效果：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA1.gif" alt="火焰溶解_效果展示1" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA2.gif" alt="火焰溶解_效果展示2" style="zoom:80%;"> <p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/138942181">https://zhuanlan.zhihu.com/p/138942181</a></p><p><a href="https://github.com/zd304/Dissolve/tree/master/Assets/Shaders">https://github.com/zd304/Dissolve/tree/master/Assets/Shaders</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向量</title>
      <link href="/BloodSoul.github.io/2021/09/26/ta/xin-ji-yuan/shu-xue/xiang-liang/"/>
      <url>/BloodSoul.github.io/2021/09/26/ta/xin-ji-yuan/shu-xue/xiang-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、平面坐标点的四种解释"><a href="#一、平面坐标点的四种解释" class="headerlink" title="一、平面坐标点的四种解释"></a>一、平面坐标点的四种解释</h1><p>以下以（7, 4）为例</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926154154436.png" alt="image-20210926154154436" style="zoom: 80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926154216389.png" alt="image-20210926154216389" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926154234435.png" alt="image-20210926154234435" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926154256124.png" alt="image-20210926154256124" style="zoom:80%;"> <h1 id="二、数学计算"><a href="#二、数学计算" class="headerlink" title="二、数学计算"></a>二、数学计算</h1><p>向量是特殊的矩阵，满足矩阵的计算规律</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926154639478.png" alt="image-20210926154639478" style="zoom:80%;"> <h2 id="2-1-内积（点积、标量积）"><a href="#2-1-内积（点积、标量积）" class="headerlink" title="2.1 内积（点积、标量积）"></a>2.1 内积（点积、标量积）</h2><h3 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926174525316.png" alt="image-20210926174525316" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926174813420.png" alt="image-20210926174813420" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926181051863.png" alt="image-20210926181051863" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926175428511.png" alt="image-20210926175428511" style="zoom:80%;"> <h3 id="2-1-2-性质"><a href="#2-1-2-性质" class="headerlink" title="2.1.2 性质"></a>2.1.2 性质</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926182905557.png" alt="image-20210926182905557" style="zoom:80%;"> <h3 id="2-1-3-应用"><a href="#2-1-3-应用" class="headerlink" title="2.1.3 应用"></a>2.1.3 应用</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926175022929.png" alt="image-20210926175022929" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926175236327.png" alt="image-20210926175236327" style="zoom:80%;">   <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926181008092.png" alt="image-20210926181008092" style="zoom:80%;">  <p><strong>点积也可以用来表示两个向量的相似程度</strong> ，在图形渲染中非非非常常用，常用两个单位向量进行点积，比如：NdotV，NdotL，NdotH ….</p><h2 id="2-2-外积（叉积、向量积）"><a href="#2-2-外积（叉积、向量积）" class="headerlink" title="2.2 外积（叉积、向量积）"></a>2.2 外积（叉积、向量积）</h2><h3 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1 定义"></a>2.2.1 定义</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185505954.png" alt="image-20210926185505954" style="zoom:80%;">   <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185542733.png" alt="image-20210926185542733" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185607404.png" alt="image-20210926185607404" style="zoom:80%;"> <h3 id="2-2-2-性质"><a href="#2-2-2-性质" class="headerlink" title="2.2.2 性质"></a>2.2.2 性质</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185849987.png" alt="image-20210926185849987" style="zoom:80%;"> <h3 id="2-2-3-应用"><a href="#2-2-3-应用" class="headerlink" title="2.2.3 应用"></a>2.2.3 应用</h3><p>求任意三角形面积</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185806353.png" alt="image-20210926185806353" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185704340.png" alt="image-20210926185704340" style="zoom:80%;"> <p><strong>Billboard</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926190338802.png" alt="image-20210926190338802" style="zoom:80%;"> <p>俯视矫正</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926190533037.png" alt="image-20210926190533037" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 向量 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2D光照</title>
      <link href="/BloodSoul.github.io/2021/09/22/ta/xin-ji-yuan/tan-suo/2d-guang-zhao/"/>
      <url>/BloodSoul.github.io/2021/09/22/ta/xin-ji-yuan/tan-suo/2d-guang-zhao/</url>
      
        <content type="html"><![CDATA[<h1 id="一、制作步骤"><a href="#一、制作步骤" class="headerlink" title="一、制作步骤"></a>一、制作步骤</h1><p><strong>1.1 使用一张 Mask 控制灯光形状</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929163412446.png" alt="image-20210929163412446" style="zoom:80%;">  <p><strong>1.2 通过对 mask offset 的控制，可以模拟灯光的照射方向</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AF%E5%85%89%E6%A8%A1%E6%8B%9F%E6%96%B9%E5%90%91%E8%B0%83%E6%95%B4.gif" alt="灯光模拟方向调整" style="zoom:80%;"> <p><strong>1.3 通过与 UV进行计算，可实现从左上到右下的衰减，并通过 pow 加强变化</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AF%E5%85%89%E6%A8%A1%E6%8B%9F_%E8%A1%B0%E5%87%8F%E8%B0%83%E6%95%B4.gif" alt="灯光模拟_衰减调整" style="zoom:80%;"> <pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">half</span> mask <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MaskTex<span class="token punctuation">,</span> maskTexUV<span class="token punctuation">)</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>mask <span class="token operator">=</span> mask <span class="token operator">-</span> maskTexUV<span class="token punctuation">.</span>x <span class="token operator">*</span> _AttenuationX <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> maskTexUV<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> _AttenuationY<span class="token punctuation">;</span>mask <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">saturate</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token punctuation">,</span> _Pow<span class="token punctuation">)</span> <span class="token operator">/</span> _Smooth <span class="token operator">*</span> _MaskInstensity <span class="token operator">+</span> _MaskBias<span class="token punctuation">;</span>mask <span class="token operator">=</span> <span class="token function">saturate</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.3 通过 mask 区分亮暗部，并通过不同颜色加以控制</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AF%E5%85%89%E6%A8%A1%E6%8B%9F_%E4%BA%AE%E6%9A%97%E9%A2%9C%E8%89%B2%E6%8E%A7%E5%88%B6.gif" alt="灯光模拟_亮暗颜色控制" style="zoom:80%;"> <p><strong>1.4 将颜色转换成灰度后，与 mask 做计算，实现照亮的部分对比加强增加立体感</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AF%E5%85%89%E6%A8%A1%E6%8B%9F_%E5%AF%B9%E6%AF%94%E8%B0%83%E6%95%B4.gif" alt="灯光模拟_对比调整" style="zoom:80%;"> <p><strong>1.5 为了更加可控，添加了旋转 UV 功能</strong></p><p>旋转UV默认是在左下角旋转，如果想要居中旋转，需要 将坐标缩放到【-1,1】（UV远点在中间），旋转完成后在缩放到【0,1】</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AF%E5%85%89%E6%A8%A1%E6%8B%9F_%E7%81%AF%E5%85%89%E6%97%8B%E8%BD%AC.gif" alt="灯光模拟_灯光旋转" style="zoom:80%;"> <h1 id="二、最终效果"><a href="#二、最终效果" class="headerlink" title="二、最终效果"></a>二、最终效果</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929165725753.png" alt="image-20210929165725753" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929165750007.png" alt="image-20210929165750007" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929165909109.png" alt="image-20210929165909109" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929165944902.png" alt="image-20210929165944902" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵</title>
      <link href="/BloodSoul.github.io/2021/09/22/ta/xin-ji-yuan/shu-xue/ju-zhen/"/>
      <url>/BloodSoul.github.io/2021/09/22/ta/xin-ji-yuan/shu-xue/ju-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="一、矩阵的算数运算"><a href="#一、矩阵的算数运算" class="headerlink" title="一、矩阵的算数运算"></a>一、矩阵的算数运算</h1><h3 id="1-1-矩阵的加减法"><a href="#1-1-矩阵的加减法" class="headerlink" title="1.1 矩阵的加减法"></a>1.1 矩阵的加减法</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923171318778.png" alt="image-20210923171318778" style="zoom:80%;"> <h3 id="1-2-矩阵的数乘"><a href="#1-2-矩阵的数乘" class="headerlink" title="1.2 矩阵的数乘"></a>1.2 矩阵的数乘</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923171505661.png" alt="image-20210923171505661" style="zoom:80%;"> <h3 id="1-3-矩阵的乘法"><a href="#1-3-矩阵的乘法" class="headerlink" title="1.3 矩阵的乘法"></a>1.3 矩阵的乘法</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923171751418.png" alt="image-20210923171751418" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923171834281.png" alt="image-20210923171834281" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923171906558.png" alt="image-20210923171906558" style="zoom:80%;"> <h3 id="1-4-矩阵的次幂"><a href="#1-4-矩阵的次幂" class="headerlink" title="1.4 矩阵的次幂"></a>1.4 矩阵的次幂</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926152450379.png" alt="image-20210926152450379" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926152539841.png" alt="image-20210926152539841" style="zoom: 80%;"> <p><strong>特征值求法</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926153004314.png" alt="image-20210926153004314" style="zoom:80%;">  <p><strong>特征向量求法</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926153117739.png" alt="image-20210926153117739" style="zoom:80%;">  <h3 id="1-5-矩阵的性质"><a href="#1-5-矩阵的性质" class="headerlink" title="1.5 矩阵的性质"></a>1.5 矩阵的性质</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926192803295.png" alt="image-20210926192803295" style="zoom:80%;"> <h1 id="二、矩阵乘法的几何意义"><a href="#二、矩阵乘法的几何意义" class="headerlink" title="二、矩阵乘法的几何意义"></a>二、矩阵乘法的几何意义</h1><p>矩阵乘法的几何意义即为对二维物体或者三维物体进行：<strong>平移、旋转、缩放</strong> 等变换。</p><h3 id="2-1-二维变换"><a href="#2-1-二维变换" class="headerlink" title="2.1 二维变换"></a>2.1 二维变换</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923172158026.png" alt="image-20210923172158026" style="zoom:80%;"> <p><em>Tip</em>:</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923172245214.png" alt="image-20210923172245214" style="zoom:80%;"> <p>旋转 90 度的简单写法：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165839155.png" alt="image-20211022165839155" style="zoom:67%;"> <h3 id="2-2-三维变换"><a href="#2-2-三维变换" class="headerlink" title="2.2 三维变换"></a>2.2 三维变换</h3><h4 id="2-2-1-缩放矩阵"><a href="#2-2-1-缩放矩阵" class="headerlink" title="2.2.1 缩放矩阵"></a>2.2.1 缩放矩阵</h4><p>$$<br>\begin{bmatrix}<br>x &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; y &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; z &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1\\<br>\end{bmatrix}<br>$$</p><h4 id="2-2-2-位移矩阵"><a href="#2-2-2-位移矩阵" class="headerlink" title="2.2.2 位移矩阵"></a>2.2.2 位移矩阵</h4><p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; x\\<br>0 &amp; 1 &amp; 0 &amp; y\\<br>0 &amp; 0 &amp; 1 &amp; z\\<br>0 &amp; 0 &amp; 0 &amp; 1\\<br>\end{bmatrix}<br>$$</p><h4 id="2-2-3-绕-x-轴旋转矩阵"><a href="#2-2-3-绕-x-轴旋转矩阵" class="headerlink" title="2.2.3 绕 x 轴旋转矩阵"></a>2.2.3 绕 x 轴旋转矩阵</h4><p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; cos\theta &amp; -sin\theta &amp; 0\\<br>0 &amp; sin\theta &amp; cos\theta &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1\\<br>\end{bmatrix}<br>$$</p><h4 id="2-2-4-绕-y-轴旋转矩阵"><a href="#2-2-4-绕-y-轴旋转矩阵" class="headerlink" title="2.2.4 绕 y 轴旋转矩阵"></a>2.2.4 绕 y 轴旋转矩阵</h4><p>$$<br>\begin{bmatrix}<br>cos\theta &amp; 0 &amp; sin\theta &amp; 0\\<br>0 &amp; 1 &amp; 0 &amp; 0\\<br>-sin\theta &amp; 0 &amp; cos\theta &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1\\<br>\end{bmatrix}<br>$$</p><h4 id="2-2-5-绕-z-轴旋转矩阵"><a href="#2-2-5-绕-z-轴旋转矩阵" class="headerlink" title="2.2.5 绕 z 轴旋转矩阵"></a>2.2.5 绕 z 轴旋转矩阵</h4><p>$$<br>\begin{bmatrix}<br>cos\theta &amp; -sin\theta &amp; 0 &amp; 0\\<br>sin\theta &amp; cos\theta &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; 1 &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1\\<br>\end{bmatrix}<br>$$</p><h4 id="2-2-6-等体积缩放矩阵"><a href="#2-2-6-等体积缩放矩阵" class="headerlink" title="2.2.6 等体积缩放矩阵"></a>2.2.6 等体积缩放矩阵</h4><p>把 xyz 的旋转矩阵提前相乘，然后在进行应用可以得到等体积缩放</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">float4 RotateBias(float4 orginPos, float4 rotateValue){    rotateValue = 3.14 / 180 * rotateValue;        float cosXValue = cos(rotateValue.x);    float cosYValue = cos(rotateValue.y);    float cosZValue = cos(rotateValue.z);    float sinXValue = sin(rotateValue.x);    float sinYValue = sin(rotateValue.y);    float sinZValue = sin(rotateValue.z);        float4x4 RotateXMatrix = float4x4(        float4(1, 0, 0, 0),        float4(0, cosXValue, -sinXValue, 0),        float4(0, sinXValue, cosXValue, 0),        float4(0, 0, 0, 1)    );        float4x4 RotateYMatrix = float4x4(        float4(cosYValue, 0, sinYValue, 0),        float4(0, 1, 0, 0),        float4(-sinYValue, 0, cosYValue, 0),        float4(0, 0, 0, 1)    );        float4x4 RotateZMatrix = float4x4(        float4(cosZValue, -sinZValue, 0, 0),        float4(sinZValue, cosZValue, 0, 0),        float4(0, 0, 1, 0),        float4(0, 0, 0, 1)    );        float4 result = orginPos;        // 这样会变成等体积缩放,即总体积不变,沿某个轴缩放    //float4x4 rotateMatrix = RotateZMatrix * RotateYMatrix * RotateXMatrix;    //result = mul(rotateMatrix, orginPos);        //沿三个轴各自缩放     result = mul(RotateXMatrix, result);     result = mul(RotateYMatrix, result);     result = mul(RotateZMatrix, result);    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%BD%95%E5%88%B6_2021_09_23_17_56_53_70.gif" alt="录制_2021_09_23_17_56_53_70" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%97%8B%E8%BD%AC.gif" alt="旋转" style="zoom:80%;"> <p>位移矩阵相关代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">float4 PositonBias(float4 orginPos, float4 biasValue){    float4x4 biasPosMatrix = float4x4(        float4(1, 0, 0, biasValue.x),        float4(0, 1, 0, biasValue.y),        float4(0, 0, 1, biasValue.z),        float4(0, 0, 0, 1)    );    float4 result = mul(biasPosMatrix, orginPos);    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E4%BD%8D%E7%A7%BB.gif" alt="位移" style="zoom:80%;"> <p>缩放矩阵相关代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">float4 ScaleBias(float4 orginPos, float4 scaleValue){    float4x4 biasScaleMatrix = float4x4(        float4(scaleValue.x, 0, 0, 0),        float4(0, scaleValue.y, 0, 0),        float4(0, 0, scaleValue.z, 0),        float4(0, 0, 0, 1)    );    float4 result = mul(biasScaleMatrix, orginPos);    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%BC%A9%E6%94%BE.gif" alt="缩放" style="zoom:80%;"> <h4 id="2-2-7-绕任意轴旋转的矩阵"><a href="#2-2-7-绕任意轴旋转的矩阵" class="headerlink" title="2.2.7 绕任意轴旋转的矩阵"></a>2.2.7 绕任意轴旋转的矩阵</h4><p>n 为单位向量</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924213205442.png" alt="image-20210924213205442" style="zoom:67%;"> <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public Matrix4x4 AxisRotate(float angle, Vector3 axis){    Matrix4x4 result = Matrix4x4.identity;    float angleRad = Mathf.Deg2Rad * angle;    float cosAngle = Mathf.Cos(angleRad);    float sinAngle = Mathf.Sin(angleRad);    axis = axis.normalized;    float x = axis.x;    float y = axis.y;    float z = axis.z;    float x2 = x * x;    float y2 = y * y;    float z2 = z * z;    float row01 = x2 * (1 - cosAngle) + cosAngle;    float row02 = x * y * (1 - cosAngle) - z * sinAngle;    float row03 = x * z * (1 - cosAngle) + y * sinAngle;    float row11 = x * y * (1 - cosAngle) + z * sinAngle;    float row12 = y2 * (1 - cosAngle) + cosAngle;    float row13 = y * z * (1 - cosAngle) - x * sinAngle;    float row21 = x * z * (1 - cosAngle) - y * sinAngle;    float row22 = y * z * (1 - cosAngle) + x * sinAngle;    float row23 = z2 * (1 - cosAngle) + cosAngle;    result.SetRow(0, new Vector4(row01, row02, row03, 0));    result.SetRow(1, new Vector4(row11, row12, row13, 0));    result.SetRow(2, new Vector4(row21, row22, row23, 0));    result.SetRow(3, new Vector4(0, 0, 0, 1));    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%BB%95%E4%BB%BB%E6%84%8F%E8%BD%B4%E6%97%8B%E8%BD%AC%E6%BC%94%E7%A4%BA.gif" alt="绕任意轴旋转演示" style="zoom:80%;"> <p><strong>Tip角度计算：</strong></p><p>角度转弧度 π/180×角度；弧度变角度 180/π×弧度。</p><p>2π弧度=360°。从而1°≈0.0174533弧度，1弧度≈57.29578°。</p><p>角度转换为弧度公式：弧度=角度×(π ÷180 )</p><p>弧度转换为角度公式： 角度=弧度×（180÷π）</p><h1 id="三、矩阵的数学意义"><a href="#三、矩阵的数学意义" class="headerlink" title="三、矩阵的数学意义"></a>三、矩阵的数学意义</h1><p>矩阵可以很方便的表示线性方程组，以及进行求解</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924100659444.png" alt="image-20210924100659444" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924100806606.png" alt="image-20210924100806606" style="zoom:80%;"> <h1 id="四、特殊矩阵"><a href="#四、特殊矩阵" class="headerlink" title="四、特殊矩阵"></a>四、特殊矩阵</h1><h4 id="4-1-零矩阵"><a href="#4-1-零矩阵" class="headerlink" title="4.1 零矩阵"></a>4.1 零矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924104825168.png" alt="image-20210924104825168" style="zoom:80%;">  <h4 id="4-2-转置矩阵"><a href="#4-2-转置矩阵" class="headerlink" title="4.2 转置矩阵"></a>4.2 转置矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924115936255.png" alt="image-20210924115936255" style="zoom:80%;">   <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924105047914.png" alt="image-20210924105047914" style="zoom:80%;"> <p><strong>4.2.1 Unity 中的方法</strong></p><p>Matrix4x4.Transpose</p><p><strong>4.2.2 在 Unity 中测试结果</strong></p><p>a、位置变换的转置矩阵会把所有位置变换都变成零，也就是说全部都归到坐标原点</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E4%BD%8D%E7%BD%AE%E5%8F%98%E6%8D%A2%E7%9A%84%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA1.gif" alt="位置变换的转置矩阵演示1" style="zoom:80%;"> <p>b、旋转变换的转置矩阵会翻转旋转变换，比如绕Y轴旋转90度，转置后变成绕Y轴旋转-90度</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2%E7%9A%84%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA.gif" alt="旋转变换的转置矩阵演示" style="zoom:80%;"> <p>c、缩放变换的转置矩阵不变，原来什么样，结果还是什么样</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%BC%A9%E6%94%BE%E5%8F%98%E6%8D%A2%E7%9A%84%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA.gif" alt="缩放变换的转置矩阵演示" style="zoom:80%;"> <p>d、可以简单理解为：一个物体乘以任何一个变换矩阵的转置矩阵，相当于把物体移动到坐标原点，然后继承变换矩阵的缩放值，然后按变换矩阵旋转量的反向进行旋转所得到的结果</p><p>e、事实上，转置矩阵等于正交矩阵的逆矩阵，上述三个变换中只有旋转变换的矩阵是正交变换，具体哪些变换是正交变换详见 4.8 正交矩阵</p><h4 id="4-3-对称矩阵"><a href="#4-3-对称矩阵" class="headerlink" title="4.3 对称矩阵"></a>4.3 对称矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924120056370.png" alt="image-20210924120056370" style="zoom:80%;">  <h4 id="4-4-上三角矩阵、下三角矩阵"><a href="#4-4-上三角矩阵、下三角矩阵" class="headerlink" title="4.4 上三角矩阵、下三角矩阵"></a>4.4 上三角矩阵、下三角矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924120118128.png" alt="image-20210924120118128" style="zoom:80%;">  <h4 id="4-5-对角矩阵"><a href="#4-5-对角矩阵" class="headerlink" title="4.5 对角矩阵"></a>4.5 对角矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924143215233.png" alt="image-20210924143215233" style="zoom:80%;"> <p>对角矩阵的运算：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924143425042.png" alt="image-20210924143425042" style="zoom:80%;"> <h4 id="4-6-单位矩阵"><a href="#4-6-单位矩阵" class="headerlink" title="4.6 单位矩阵"></a>4.6 单位矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924143557154.png" alt="image-20210924143557154" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924143628271.png" alt="image-20210924143628271" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924143735473.png" alt="image-20210924143735473" style="zoom:80%;"> <h4 id="4-7-逆矩阵"><a href="#4-7-逆矩阵" class="headerlink" title="4.7 逆矩阵"></a>4.7 逆矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924144007544.png" alt="image-20210924144007544" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924144031240.png" alt="image-20210924144031240" style="zoom:80%;"> <p><strong>特性：</strong></p><p>a、包含0行或者0列的矩阵不可逆</p><p>b、当且晋档矩阵 $M^T$ 可逆，矩阵 $M$ 可逆</p><p>c、如果 nXn矩阵 <strong>F</strong> 和 <strong>G</strong> 是可逆矩阵，则他们的积 <strong>FG</strong> 也可逆，且 $(FG)^{-1} = G^{-1}F^{-1}$</p><p>d、令矩阵 $M^,$ 是 nXn 矩阵 $M$ 经过初等行变换得到的 nXn 矩阵，则 $M^,$ = $EM$，其中 $E$ 是单位矩阵经过相等的初等行变换得到的 nXn 矩阵</p><p>e、当且仅当 nXn 矩阵 <strong>M</strong> 的行向量形成线性无关的向量几何时，矩阵 <strong>M</strong> 可逆</p><h5 id="4-7-1-逆矩阵的几何意义"><a href="#4-7-1-逆矩阵的几何意义" class="headerlink" title="4.7.1 逆矩阵的几何意义"></a>4.7.1 逆矩阵的几何意义</h5><p>逆矩阵可以用作撤销操作，比如将一个模型缩放了1.5倍，可以乘以缩放矩阵的逆矩阵来使模型回到原来的状态</p><p>Matrix4x4.inverse</p><h5 id="4-7-2-逆矩阵的求解方式"><a href="#4-7-2-逆矩阵的求解方式" class="headerlink" title="4.7.2  逆矩阵的求解方式"></a>4.7.2  逆矩阵的求解方式</h5><h6 id="4-7-2-0-行列式判断是否存在逆矩阵"><a href="#4-7-2-0-行列式判断是否存在逆矩阵" class="headerlink" title="4.7.2.0 行列式判断是否存在逆矩阵"></a>4.7.2.0 行列式判断是否存在逆矩阵</h6><p>行列式不等于零，该矩阵存在逆矩阵</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924155910913.png" alt="image-20210924155910913" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160117757.png" alt="image-20210924160117757" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160137007.png" alt="image-20210924160137007" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160204683.png" alt="image-20210924160204683" style="zoom: 67%;"> <p><strong>二阶行列式的几何意义</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160300938.png" alt="image-20210924160300938" style="zoom: 67%;"> <p><strong>三阶行列式，沙路法则</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160437708.png" alt="image-20210924160437708" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160527852.png" alt="image-20210924160527852" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160603162.png" alt="image-20210924160603162" style="zoom:67%;"> <p><strong>三阶行列式的几何意义</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160649299.png" alt="image-20210924160649299" style="zoom:67%;"> <p>四阶行列式 <strong>Unity 中的方法</strong></p><p>Matrix4x4.Determinant</p><p>详细计算模型，推导过程见漫画线性代数：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924161151817.png" alt="image-20210924161151817" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924161126692.png" alt="image-20210924161126692" style="zoom:67%;"> <h6 id="4-7-2-1-利用消元法求解逆矩阵"><a href="#4-7-2-1-利用消元法求解逆矩阵" class="headerlink" title="4.7.2.1 利用消元法求解逆矩阵"></a>4.7.2.1 利用消元法求解逆矩阵</h6><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162545187.png" alt="image-20210924162545187" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162906683.png" alt="image-20210924162906683" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162810925.png" alt="image-20210924162810925" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162840582.png" alt="image-20210924162840582" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924163031256.png" alt="image-20210924163031256" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924163107111.png" alt="image-20210924163107111" style="zoom:67%;"> <p><strong>二阶逆矩阵计算公式</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924163208301.png" alt="image-20210924163208301" style="zoom:67%;"> <h6 id="4-7-2-2-利用余子式、代数余子式、和伴随矩阵求解逆矩阵"><a href="#4-7-2-2-利用余子式、代数余子式、和伴随矩阵求解逆矩阵" class="headerlink" title="4.7.2.2 利用余子式、代数余子式、和伴随矩阵求解逆矩阵"></a>4.7.2.2 利用余子式、代数余子式、和伴随矩阵求解逆矩阵</h6><p><strong>余子式</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924161336898.png" alt="image-20210924161336898" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924161401260.png" alt="image-20210924161401260" style="zoom:67%;"> <p><strong>代数余子式</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924161455256.png" alt="image-20210924161455256" style="zoom:67%;"> <p><strong>伴随矩阵</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162005787.png" alt="image-20210924162005787" style="zoom:67%;"> <p><strong>求解思路</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162105956.png" alt="image-20210924162105956" style="zoom:67%;"> <p><strong>详细案例</strong></p><p>原文链接： <a href="https://www.shuxuele.com/algebra/matrix-inverse-minors-cofactors-adjugate.html">https://www.shuxuele.com/algebra/matrix-inverse-minors-cofactors-adjugate.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924154044319.png" alt="image-20210924154044319" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924154319556.png" alt="image-20210924154319556" style="zoom: 67%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924154407544.png" alt="image-20210924154407544" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924154623424.png" alt="image-20210924154623424" style="zoom:67%;"> <h6 id="4-7-2-3-利用-高斯－若尔当-方法（初等行运算）求解逆矩阵"><a href="#4-7-2-3-利用-高斯－若尔当-方法（初等行运算）求解逆矩阵" class="headerlink" title="4.7.2.3 利用 高斯－若尔当 方法（初等行运算）求解逆矩阵"></a>4.7.2.3 利用 高斯－若尔当 方法（初等行运算）求解逆矩阵</h6><p>原文链接：<a href="https://www.shuxuele.com/algebra/matrix-inverse-row-operations-gauss-jordan.html">https://www.shuxuele.com/algebra/matrix-inverse-row-operations-gauss-jordan.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924155304342.png" alt="image-20210924155304342" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924155332305.png" alt="image-20210924155332305" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924155538610.png" alt="image-20210924155538610" style="zoom:67%;">  <p><strong>在Unity中的测试</strong></p><p>相当于进行反向操作</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E4%BD%8D%E7%BD%AE%E5%8F%98%E6%8D%A2%E7%9A%84%E9%80%86%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA.gif" alt="位置变换的逆矩阵演示" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2%E7%9A%84%E9%80%86%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA.gif" alt="旋转变换的逆矩阵演示" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%BC%A9%E6%94%BE%E5%8F%98%E6%8D%A2%E7%9A%84%E9%80%86%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA.gif" alt="缩放变换的逆矩阵演示" style="zoom:80%;"> <h5 id="4-8-正交矩阵"><a href="#4-8-正交矩阵" class="headerlink" title="4.8 正交矩阵"></a>4.8 正交矩阵</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211001113503609.png" alt="image-20211001113503609" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211001113645651.png" alt="image-20211001113645651" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211001113746715.png" alt="image-20211001113746715" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211001114109107.png" alt="image-20211001114109107" style="zoom:80%;"> <p>参考：</p><p>百人计划相关文档</p><p>漫画线性代数</p><p>Unity Shader 入门精要</p><p>数学乐：<a href="https://www.shuxuele.com/algebra/matrix-inverse-minors-cofactors-adjugate.html">https://www.shuxuele.com/algebra/matrix-inverse-minors-cofactors-adjugate.html</a></p><p>Unity官网文档：<a href="https://docs.unity3d.com/ScriptReference/Matrix4x4.html">https://docs.unity3d.com/ScriptReference/Matrix4x4.html</a></p><p>转置矩阵意义： <a href="https://blog.csdn.net/qq_41581769/article/details/100986480">https://blog.csdn.net/qq_41581769/article/details/100986480</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GamePlay</title>
      <link href="/BloodSoul.github.io/2021/09/13/gameplay/gameplay/"/>
      <url>/BloodSoul.github.io/2021/09/13/gameplay/gameplay/</url>
      
        <content type="html"><![CDATA[<h1 id="一、回合战斗技能编辑器"><a href="#一、回合战斗技能编辑器" class="headerlink" title="一、回合战斗技能编辑器"></a>一、回合战斗技能编辑器</h1><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913181910009.png" alt="image-20210913181910009"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913181955293.png" alt="image-20210913181955293"> </p><p>持续维护版本</p><p><a href="https://github.com/yimengfan/PosePlus_1.0">https://github.com/yimengfan/PosePlus_1.0</a></p><p>原始版本</p><p><a href="https://github.com/yimengfan/PosePlus_TBS">https://github.com/yimengfan/PosePlus_TBS</a></p><h1 id="二、游戏框架"><a href="#二、游戏框架" class="headerlink" title="二、游戏框架"></a>二、游戏框架</h1><p>BDFramework.Core <a href="https://github.com/yimengfan/BDFramework.Core">https://github.com/yimengfan/BDFramework.Core</a></p><p>文档： <a href="https://www.yuque.com/naipaopao/eg6gik">https://www.yuque.com/naipaopao/eg6gik</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913182651500.png" alt="image-20210913182651500"> </p><p>三、TeamCity，15分钟搭建U3d CI环境，自动测试、版本发布、部署</p><p><a href="https://zhuanlan.zhihu.com/p/94638669">https://zhuanlan.zhihu.com/p/94638669</a> </p><p><strong>免费</strong> </p><p><a href="https://www.jetbrains.com/teamcity/">https://www.jetbrains.com/teamcity/</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913200850024.png" alt="image-20210913200850024"> </p>]]></content>
      
      
      <categories>
          
          <category> GamePlay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 技能编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shading教程网站</title>
      <link href="/BloodSoul.github.io/2021/09/13/ta/shading-jiao-cheng-wang-zhan/"/>
      <url>/BloodSoul.github.io/2021/09/13/ta/shading-jiao-cheng-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h4 id="Sand-shader"><a href="#Sand-shader" class="headerlink" title="Sand shader"></a>Sand shader</h4><p><strong><a href="https://www.alanzucconi.com/?p=10050">A Journey Into Journey’s Sand Shader</a></strong></p><p> Sand Rendering in Journey GDC <a href="https://www.gdcvault.com/play/1017742/Sand-Rendering-in">https://www.gdcvault.com/play/1017742/Sand-Rendering-in</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913145738350.png" alt="image-20210913145738350" style="zoom: 67%;"> <h4 id="K佬"><a href="#K佬" class="headerlink" title="K佬"></a>K佬</h4><p><a href="https://github.com/keijiro?tab=repositories">https://github.com/keijiro?tab=repositories</a></p><h4 id="Ronja"><a href="#Ronja" class="headerlink" title="Ronja"></a>Ronja</h4><p><a href="https://www.ronja-tutorials.com/">https://www.ronja-tutorials.com/</a></p><p><a href="https://github.com/ronja-tutorials/ShaderTutorials">https://github.com/ronja-tutorials/ShaderTutorials</a></p><h4 id="SDF-教程"><a href="#SDF-教程" class="headerlink" title="SDF 教程"></a>SDF 教程</h4><p><a href="https://iquilezles.org/www/index.htm">https://iquilezles.org/www/index.htm</a></p><h4 id="毛发教程"><a href="#毛发教程" class="headerlink" title="毛发教程"></a>毛发教程</h4><p><a href="https://xbdev.net/directx3dx/specialX/Fur/">https://xbdev.net/directx3dx/specialX/Fur/</a></p><h4 id="Shadertoy-基础教程"><a href="#Shadertoy-基础教程" class="headerlink" title="Shadertoy 基础教程"></a>Shadertoy 基础教程</h4><p><a href="https://blog.csdn.net/candycat1992/article/details/44244549">https://blog.csdn.net/candycat1992/article/details/44244549</a></p><h4 id="放牛的星星专栏"><a href="#放牛的星星专栏" class="headerlink" title="放牛的星星专栏"></a>放牛的星星专栏</h4><p><a href="https://zhuanlan.zhihu.com/p/151238164">https://zhuanlan.zhihu.com/p/151238164</a></p><h4 id="git-情景使用"><a href="#git-情景使用" class="headerlink" title="git 情景使用"></a>git 情景使用</h4><p><a href="https://github.com/klj35/git-flight-rules/blob/master/README_zh-CN.md">https://github.com/klj35/git-flight-rules/blob/master/README_zh-CN.md</a></p><h4 id="GDC-官网"><a href="#GDC-官网" class="headerlink" title="GDC 官网"></a>GDC 官网</h4><p><a href="https://www.gdcvault.com/">https://www.gdcvault.com/</a></p><h4 id="SIGGRAPH-官网"><a href="#SIGGRAPH-官网" class="headerlink" title="SIGGRAPH 官网"></a><strong>SIGGRAPH</strong> <strong>官网</strong></h4><p><a href="http://advances.realtimerendering.com/">http://advances.realtimerendering.com/</a></p><h4 id="Direct3D-官网"><a href="#Direct3D-官网" class="headerlink" title="Direct3D 官网"></a>Direct3D 官网</h4><p><a href="https://docs.microsoft.com/en-us/windows/win32/graphics-and-multimedia">https://docs.microsoft.com/en-us/windows/win32/graphics-and-multimedia</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104449385.png" alt="image-20211112104449385" style="zoom:50%;"> <h4 id="安卓图形API-官网文档"><a href="#安卓图形API-官网文档" class="headerlink" title="安卓图形API 官网文档"></a>安卓图形API 官网文档</h4><p><a href="https://www.khronos.org/">https://www.khronos.org/</a></p><p><a href="https://www.khronos.org/registry/">https://www.khronos.org/registry/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104548536.png" alt="image-20211112104548536" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104606358.png" alt="image-20211112104606358" style="zoom:67%;">  <h4 id="安卓图形管线"><a href="#安卓图形管线" class="headerlink" title="安卓图形管线"></a>安卓图形管线</h4><p><a href="https://www.khronos.org/registry/OpenGL/">https://www.khronos.org/registry/OpenGL/</a></p><p><a href="https://www.khronos.org/registry/OpenGL/index_es.php">https://www.khronos.org/registry/OpenGL/index_es.php</a></p><p><a href="https://www.khronos.org/developers/reference-cards">https://www.khronos.org/developers/reference-cards</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104626471.png" alt="image-20211112104626471" style="zoom: 33%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104641304.png" alt="image-20211112104641304" style="zoom:50%;"> <h4 id="安卓图形硬件书籍"><a href="#安卓图形硬件书籍" class="headerlink" title="安卓图形硬件书籍"></a>安卓图形硬件书籍</h4><p><a href="https://www.khronos.org/developers">https://www.khronos.org/developers</a></p><p><a href="https://www.khronos.org/developers/books/">https://www.khronos.org/developers/books/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104728769.png" alt="image-20211112104728769" style="zoom:50%;"> <h4 id="真实感水体渲染技术总结"><a href="#真实感水体渲染技术总结" class="headerlink" title="真实感水体渲染技术总结"></a>真实感水体渲染技术总结</h4><p><a href="https://zhuanlan.zhihu.com/p/95917609">https://zhuanlan.zhihu.com/p/95917609</a></p><h4 id="真实感皮肤渲染技术总结"><a href="#真实感皮肤渲染技术总结" class="headerlink" title="真实感皮肤渲染技术总结"></a>真实感皮肤渲染技术总结</h4><p><a href="https://zhuanlan.zhihu.com/p/42433792">https://zhuanlan.zhihu.com/p/42433792</a></p><h4 id="Matcap"><a href="#Matcap" class="headerlink" title="Matcap"></a>Matcap</h4><p>基于MatCap实现适于移动平台的“次时代”车漆Shader</p><p><a href="https://zhuanlan.zhihu.com/p/25314364">https://zhuanlan.zhihu.com/p/25314364</a></p><p><a href="https://blog.csdn.net/ndsc_dw/article/details/50700201">https://blog.csdn.net/ndsc_dw/article/details/50700201</a></p><p>[<a href="https://github.com/QianMo/Awesome-Unity-Shader/tree/master/Volume%2016%20%E5%9F%BA%E4%BA%8EMatCap%E5%AE%9E%E7%8E%B0%E9%AB%98%E7%9C%9F%E5%AE%9E%E6%84%9F%E8%BD%A6%E6%BC%86Shader]">https://github.com/QianMo/Awesome-Unity-Shader/tree/master/Volume%2016%20%E5%9F%BA%E4%BA%8EMatCap%E5%AE%9E%E7%8E%B0%E9%AB%98%E7%9C%9F%E5%AE%9E%E6%84%9F%E8%BD%A6%E6%BC%86Shader]</a>(<a href="https://github.com/QianMo/Awesome-Unity-Shader/tree/master/Volume">https://github.com/QianMo/Awesome-Unity-Shader/tree/master/Volume</a> 16 基于MatCap实现高真实感车漆Shader)</p><h4 id="GPU系列书籍书籍出版顺序"><a href="#GPU系列书籍书籍出版顺序" class="headerlink" title="GPU系列书籍书籍出版顺序"></a>GPU系列书籍书籍出版顺序</h4><p>GPU Gems1 ~ GPU Gems2</p><p><a href="https://developer.nvidia.com/gpugems/gpugems/contributors">https://developer.nvidia.com/gpugems/gpugems/contributors</a></p><p>&lt; GPU Pro &gt; 1~7 and &lt; GPU Zen &gt; 源码地址</p><p>来自 <a href="https://github.com/QianMo/GPU-Pro-Books-Source-Code">https://github.com/QianMo/GPU-Pro-Books-Source-Code</a></p><p>内容目录</p><p><a href="https://zhuanlan.zhihu.com/p/34917895">https://zhuanlan.zhihu.com/p/34917895</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-570c74c9f1a845f7042461dfa3000da5_720w.jpg" alt="v2-570c74c9f1a845f7042461dfa3000da5_720w" style="zoom:67%;"> <h4 id="GLSL基础语法"><a href="#GLSL基础语法" class="headerlink" title="GLSL基础语法"></a>GLSL基础语法</h4><p><a href="https://www.jianshu.com/p/66b10062bd67">https://www.jianshu.com/p/66b10062bd67</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费资源网站收集</title>
      <link href="/BloodSoul.github.io/2021/09/13/ta/mian-fei-zi-yuan-wang-zhan-shou-ji/"/>
      <url>/BloodSoul.github.io/2021/09/13/ta/mian-fei-zi-yuan-wang-zhan-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、HDRI"><a href="#一、HDRI" class="headerlink" title="一、HDRI"></a>一、HDRI</h1><p>Poly Haven 地址：<a href="https://polyhaven.com/">https://polyhaven.com/</a></p><p>免费 <strong>HDRI</strong> 、Textures、Models</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913105310060.png" alt="image-20210913105310060"> </p><h1 id="二、免费插件"><a href="#二、免费插件" class="headerlink" title="二、免费插件"></a>二、免费插件</h1><p>一个非常多免费插件的网站 <a href="https://www.macv.com/cjlist/">https://www.macv.com/cjlist/</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017211126780.png" alt="image-20211017211126780"></p><h1 id="三、免费-CDN"><a href="#三、免费-CDN" class="headerlink" title="三、免费 CDN"></a>三、免费 CDN</h1><p>国内 <a href="https://www.bootcdn.cn/">https://www.bootcdn.cn/</a></p><p>国外适用于 Github 的免费CDN <a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a></p><p>例如：<a href="https://cdn.jsdelivr.net/gh/klj35/BlockCDN@0.0.1/js/MathJax.js">https://cdn.jsdelivr.net/gh/klj35/BlockCDN@0.0.1/js/MathJax.js</a></p><h1 id="四、shader-快速验证工具网站"><a href="#四、shader-快速验证工具网站" class="headerlink" title="四、shader 快速验证工具网站"></a>四、shader 快速验证工具网站</h1><p><a href="https://www.shadertoy.com/">https://www.shadertoy.com/</a></p><p><a href="https://rice.moonedit.com/">https://rice.moonedit.com/</a></p><p><a href="https://glslsandbox.com/?page=2">https://glslsandbox.com/?page=2</a></p><h1 id="五、在线噪波图生成网站"><a href="#五、在线噪波图生成网站" class="headerlink" title="五、在线噪波图生成网站"></a>五、在线噪波图生成网站</h1><p><a href="http://cpetry.github.io/TextureGenerator-Online/">http://cpetry.github.io/TextureGenerator-Online/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211020143710431.png" alt="image-20211020143710431" style="zoom: 50%;"> <p>在线高度图或图片转法线工具</p><p><a href="https://cpetry.github.io/NormalMap-Online/">https://cpetry.github.io/NormalMap-Online/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211020143835202.png" alt="image-20211020143835202" style="zoom: 50%;"> <h1 id="六、Matcap-资源"><a href="#六、Matcap-资源" class="headerlink" title="六、Matcap 资源"></a>六、Matcap 资源</h1><p><a href="http://pixologic.com/zbrush/downloadcenter/library/#prettyPhoto">http://pixologic.com/zbrush/downloadcenter/library/#prettyPhoto</a></p><p><a href="https://www.pinterest.com/evayali/matcap/">https://www.pinterest.com/evayali/matcap/</a></p><p><a href="https://www.google.com.hk/search?q=MatCap&amp;newwindow=1&amp;safe=strict&amp;hl=zh-CN&amp;biw=1575&amp;bih=833&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;sa=X&amp;ved=0ahUKEwju8JDTpZnSAhUGn5QKHawODTIQsAQIIg">https://www.google.com.hk/search?q=MatCap&amp;newwindow=1&amp;safe=strict&amp;hl=zh-CN&amp;biw=1575&amp;bih=833&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;sa=X&amp;ved=0ahUKEwju8JDTpZnSAhUGn5QKHawODTIQsAQIIg</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112103502642.png" alt="image-20211112103502642" style="zoom:33%;"> <h1 id="七、实时渲染4参考文献"><a href="#七、实时渲染4参考文献" class="headerlink" title="七、实时渲染4参考文献"></a>七、实时渲染4参考文献</h1><p><a href="https://github.com/QianMo/Real-Time-Rendering-4th-Bibliography-Collection">https://github.com/QianMo/Real-Time-Rendering-4th-Bibliography-Collection</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112105532883.png" alt="image-20211112105532883" style="zoom: 50%;"> <h1 id="八、跨平台渲染框架-TheForge"><a href="#八、跨平台渲染框架-TheForge" class="headerlink" title="八、跨平台渲染框架 TheForge"></a>八、跨平台渲染框架 TheForge</h1><p>TheForge</p><p><a href="https://github.com/ConfettiFX/The-Forge">https://github.com/ConfettiFX/The-Forge</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112115400447.png" alt="image-20211112115400447" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112115418172.png" alt="image-20211112115418172" style="zoom:50%;"> ]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免费素材 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何内嵌bilibili网站链接</title>
      <link href="/BloodSoul.github.io/2021/09/12/block/ru-he-nei-qian-bilibili-wang-zhan-lian-jie/"/>
      <url>/BloodSoul.github.io/2021/09/12/block/ru-he-nei-qian-bilibili-wang-zhan-lian-jie/</url>
      
        <content type="html"><![CDATA[<p>直接打开我们需要嵌入的视频网页，点击视频下方的分享按钮，把嵌入代码复制，如下图：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912224707012.png" alt="image-20210912224707012"> </p><p>先说一下外链引用的一些 缺点 ：最重要的一点是清晰度默认只能显示最低的，这个是万万不能接受的，如何调清晰度后面会讲到，先学会引用先，一步一步来</p><p>先看看一个我视频的嵌入代码</p><iframe src="//player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>那么如何改变样式大小呢？</p><p>只需要加入代码</p><p> width=”100%” height=”600”</p><p>这里的宽度和高度可以根据自己的需求自行修改定制</p><p>最终代码是这样的（已经加粗显示了，方便查看）：</p><iframe src="//player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="600"> </iframe><p>视频清晰度的调节<br>先来看看我们的视频地址</p><p>//player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1</p><p>修改一下我们的地址</p><p>在 // 前面加上 https:</p><p>在视频地址最后面加上  &amp;high_quality=1</p><p>最终的成品是这样的，新增加的部分我已经加粗显示了</p><p><a href="https://player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1&amp;high_quality=1">https://player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1&amp;high_quality=1</a></p><p>移动端如何自适应<br>经过谷歌一下，找到了一些解决方法，这里直接给大家分享解密一下下</p><p>先直接看一下成品</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0" frameborder="no" scrolling="no"></iframe></div><p>稍微解释一下上面代码的含义：</p><p>page -&gt; 起始下标为 1 (默认值也是为1)</p><p>as_wide -&gt; 是否宽屏 【1: 宽屏, 0: 小屏】</p><p>high_quality -&gt; 是否高清 【1: 高清(最高1080p) / 0: 最低视频质量(默认)】</p><p>danmaku -&gt; 是否开启弹幕 【1: 开启(默认), 0: 关闭】</p><p>allowfullscreen -&gt; allowfullscreen= “ture” 允许全屏，使用该参数可以在浏览器中全屏播放</p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_align.asp">align</a></td><td align="left">leftrighttopmiddlebottom</td><td align="left">不赞成使用。请使用样式代替。规定如何根据周围的元素来对齐此框架。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_frameborder.asp">frameborder</a></td><td align="left">10</td><td align="left">规定是否显示框架周围的边框。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_height.asp">height</a></td><td align="left"><em>pixels</em> <em>%</em></td><td align="left">规定 iframe 的高度。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_longdesc.asp">longdesc</a></td><td align="left"><em>URL</em></td><td align="left">规定一个页面，该页面包含了有关 iframe 的较长描述。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_marginheight.asp">marginheight</a></td><td align="left"><em>pixels</em></td><td align="left">定义 iframe 的顶部和底部的边距。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_marginwidth.asp">marginwidth</a></td><td align="left"><em>pixels</em></td><td align="left">定义 iframe 的左侧和右侧的边距。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_name.asp">name</a></td><td align="left"><em>frame_name</em></td><td align="left">规定 iframe 的名称。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_sandbox.asp">sandbox</a></td><td align="left">“”allow-formsallow-same-originallow-scriptsallow-top-navigation</td><td align="left">启用一系列对 <iframe> 中内容的额外限制。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_scrolling.asp">scrolling</a></td><td align="left">yesnoauto</td><td align="left">规定是否在 iframe 中显示滚动条。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_seamless.asp">seamless</a></td><td align="left">seamless</td><td align="left">规定 <iframe> 看上去像是包含文档的一部分。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_src.asp">src</a></td><td align="left"><em>URL</em></td><td align="left">规定在 iframe 中显示的文档的 URL。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_srcdoc.asp">srcdoc</a></td><td align="left"><em>HTML_code</em></td><td align="left">规定在 <iframe> 中显示的页面的 HTML 内容。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_width.asp">width</a></td><td align="left"><em>pixels</em> <em>%</em></td><td align="left">定义 iframe 的宽度。</td></tr></tbody></table><p>文档转载改编自馨客栈研究院：<a href="https://www.bilibili.com/read/cv6775208">https://www.bilibili.com/read/cv6775208</a></p></iframe></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zero2One </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery添加live2d看板娘</title>
      <link href="/BloodSoul.github.io/2021/09/12/block/matery-tian-jia-live2d-kan-ban-niang/"/>
      <url>/BloodSoul.github.io/2021/09/12/block/matery-tian-jia-live2d-kan-ban-niang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、克隆资源"><a href="#一、克隆资源" class="headerlink" title="一、克隆资源"></a>一、克隆资源</h1><p>找到 live2d-widget fork 一份到自己的仓库。地址：  <a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912215146016.png" alt="image-20210912215146016"> </p><p>找到 live2d_api fork 一份到自己的仓库。地址： <a href="https://github.com/fghrsh/live2d_api">https://github.com/fghrsh/live2d_api</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912215321806.png" alt="image-20210912215321806"> </p><p>live2d-widget ：前端显示代码逻辑</p><p>live2d_api：live2d 动画核心 api，以及存放 live2d 模型资源</p><p>纸飞机彩蛋：<a href="http://www.websiteasteroids.com/%EF%BC%8C%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%EF%BC%9Ahttps://github.com/stevenjoezhang/asteroids">http://www.websiteasteroids.com/，仓库地址：https://github.com/stevenjoezhang/asteroids</a></p><h1 id="二、配置CDN"><a href="#二、配置CDN" class="headerlink" title="二、配置CDN"></a>二、配置CDN</h1><p><strong>JSDELIVR</strong> 一个免费快速的 CDN，官方地址：<a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912220514129.png" alt="image-20210912220514129" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912220608842.png" alt="image-20210912220608842" style="zoom: 67%;"> <p>下载 live2d-widget，在 autoload.js 脚本，修改 CDN 加载路径： live2d_path、cdnPath @后面为仓库的 Tag</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912220241022.png" alt="image-20210912220241022" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221000269.png" alt="image-20210912221000269" style="zoom: 80%;"> <p>在 waifu-tips.js 脚本修改 个人信息链接地址和纸飞机代码地址：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221234706.png" alt="image-20210912221234706" style="zoom: 50%;">  <p>目录结构：</p><ul><li><code>waifu-tips.js</code> 包含了按钮和对话框的逻辑</li><li><code>waifu-tips.json</code> 中定义了触发条件（<code>selector</code>，CSS 选择器）和触发时显示的文字（<code>text</code>）</li><li><code>waifu.css</code> 是看板娘的样式表</li></ul><p>修改完后，需要新建对应的 Tag</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221622555.png" alt="image-20210912221622555" style="zoom: 80%;">  <p>在对应的 GitHub 仓库 新建 Release 版本</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221747249.png" alt="image-20210912221747249" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221853137.png" alt="image-20210912221853137" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221919590.png" alt="image-20210912221919590" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912222117313.png" alt="image-20210912222117313" style="zoom:67%;"> <p>CDN 生效是需要一段时间的，根据测试大概需要 1分钟左右</p><p>可以通过直接在浏览器中访问对应地址，查看是否生效完成</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912222331252.png" alt="image-20210912222331252" style="zoom:67%;"> <h1 id="三、植入-Matery-主题"><a href="#三、植入-Matery-主题" class="headerlink" title="三、植入 Matery 主题"></a>三、植入 Matery 主题</h1><p>在 head.ejs 中，添加对应脚本引用</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912222534030.png" alt="image-20210912222534030"> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/klj35/live2d-widget@v0.9.1/autoload.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>live2d 需要 font-awesome 库，默认 matery 已经添加了，如过因为一些原因没有添加需要手动添加如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912223112918.png" alt="image-20210912223112918" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zero2One </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速熟悉 Matery 代码</title>
      <link href="/BloodSoul.github.io/2021/09/12/code/kuai-su-shou-xi-matery-dai-ma/"/>
      <url>/BloodSoul.github.io/2021/09/12/code/kuai-su-shou-xi-matery-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="一、语言"><a href="#一、语言" class="headerlink" title="一、语言"></a>一、语言</h1><h2 id="1-1-HTML"><a href="#1-1-HTML" class="headerlink" title="1.1 HTML"></a>1.1 HTML</h2><h3 id="1-1-1-简介"><a href="#1-1-1-简介" class="headerlink" title="1.1.1 简介"></a>1.1.1 简介</h3><p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。</p><p>您可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。</p><h3 id="1-1-2-总览"><a href="#1-1-2-总览" class="headerlink" title="1.1.2 总览"></a>1.1.2 总览</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912125724400.png" alt="image-20210912125724400" style="zoom: 67%;"> <h3 id="1-1-3-教程网站"><a href="#1-1-3-教程网站" class="headerlink" title="1.1.3 教程网站"></a>1.1.3 教程网站</h3><p>菜鸟教程 ：<a href="https://www.runoob.com/html/html-intro.html">https://www.runoob.com/html/html-intro.html</a></p><p>W3School： <a href="https://www.w3school.com.cn/tags/index.asp">https://www.w3school.com.cn/tags/index.asp</a></p><h2 id="1-2-JavaScript"><a href="#1-2-JavaScript" class="headerlink" title="1.2 JavaScript"></a>1.2 JavaScript</h2><h3 id="1-2-1-简介"><a href="#1-2-1-简介" class="headerlink" title="1.2.1 简介"></a>1.2.1 简介</h3><p>JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><p>JavaScript 是一种轻量级的编程语言。</p><p>JavaScript 是可插入 HTML 页面的编程代码。</p><p>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</p><h3 id="1-2-2-本博客常用内容"><a href="#1-2-2-本博客常用内容" class="headerlink" title="1.2.2 本博客常用内容"></a>1.2.2 本博客常用内容</h3><p>ES2015(ES6) 新增加了两个重要的 JavaScript 关键字: <strong>let</strong> 和 <strong>const</strong>。</p><p><strong>let</strong> 声明的变量只在 <strong>let</strong> 命令所在的代码块内有效。</p><p><strong>const</strong> 声明一个只读的常量，一旦声明，常量的值就不能改变。</p><p>在 ES6 之前，JavaScript 只有两种作用域： <strong>全局变量</strong> 与 <strong>函数内的局部变量</strong>。</p><h3 id="1-2-3-教程网站"><a href="#1-2-3-教程网站" class="headerlink" title="1.2.3 教程网站"></a>1.2.3 教程网站</h3><p>菜鸟教程 ：<a href="https://www.runoob.com/js/js-tutorial.html">https://www.runoob.com/js/js-tutorial.html</a></p><h2 id="1-3-CSS"><a href="#1-3-CSS" class="headerlink" title="1.3 CSS"></a>1.3 CSS</h2><h3 id="1-3-1-简介"><a href="#1-3-1-简介" class="headerlink" title="1.3.1 简介"></a>1.3.1 简介</h3><ul><li>CSS 指层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)</li><li>样式定义<strong>如何显示</strong> HTML 元素</li><li>样式通常存储在<strong>样式表</strong>中</li><li>把样式添加到 HTML 4.0 中，是为了<strong>解决内容与表现分离的问题</strong></li><li><strong>外部样式表</strong>可以极大提高工作效率</li><li>外部样式表通常存储在 <strong>CSS 文件</strong>中</li><li>多个样式定义可<strong>层叠</strong>为一个</li></ul><h3 id="1-3-2-本博客常用"><a href="#1-3-2-本博客常用" class="headerlink" title="1.3.2 本博客常用"></a>1.3.2 本博客常用</h3><h5 id="1-3-2-1-声明-id"><a href="#1-3-2-1-声明-id" class="headerlink" title="1.3.2.1 声明 id"></a>1.3.2.1 声明 id</h5><p>CSS 中使用 # + idName 来声明 id，例如：#cardId、#fogImage</p><p>1.3.2.2 声明类</p><p>CSS 中使用 “.” 来声明类，例如：.bookClass、.img-item</p><p>CSS 中使用 @ 来声明媒体</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912131156275.png" alt="image-20210912131156275" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912131234082.png" alt="image-20210912131234082" style="zoom:50%;"> <h3 id="1-3-3-教程网站"><a href="#1-3-3-教程网站" class="headerlink" title="1.3.3 教程网站"></a>1.3.3 教程网站</h3><p>菜鸟教程： <a href="https://www.runoob.com/css/css-intro.html">https://www.runoob.com/css/css-intro.html</a></p><h2 id="1-4-EJS"><a href="#1-4-EJS" class="headerlink" title="1.4 EJS"></a>1.4 EJS</h2><h3 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1 简介"></a>1.4.1 简介</h3><p>“E” 代表什么？可以表示 “可嵌入（Embedded）”，也可以是“高效（Effective）”、“优雅（Elegant）”或者是“简单（Easy）”。EJS 是一套简单的模板语言，<strong>帮你利用普通的 JavaScript 代码生成 HTML 页面</strong>。EJS 没有如何组织内容的教条；也没有再造一套迭代和控制流语法；有的只是普通的 JavaScript 代码而已。</p><h3 id="1-4-2-教程网站"><a href="#1-4-2-教程网站" class="headerlink" title="1.4.2 教程网站"></a>1.4.2 教程网站</h3><p>EJS 官网： <a href="https://ejs.bootcss.com/#docs">https://ejs.bootcss.com/#docs</a></p><h2 id="1-5-HTML-DOM"><a href="#1-5-HTML-DOM" class="headerlink" title="1.5 HTML DOM"></a>1.5 HTML DOM</h2><h3 id="1-5-1-简介"><a href="#1-5-1-简介" class="headerlink" title="1.5.1 简介"></a>1.5.1 简介</h3><p>HTML DOM 定义了访问和操作 HTML 文档的标准。</p><h5 id="1-5-1-1-什么是-DOM？"><a href="#1-5-1-1-什么是-DOM？" class="headerlink" title="1.5.1.1 什么是 DOM？"></a>1.5.1.1 什么是 DOM？</h5><p>DOM 是 W3C（万维网联盟）的标准。</p><p>DOM 定义了访问 HTML 和 XML 文档的标准：</p><blockquote><p>“W3C 文档对象模型 （DOM） 是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。”</p></blockquote><p>W3C DOM 标准被分为 3 个不同的部分：</p><ul><li>核心 DOM - 针对任何结构化文档的标准模型</li><li>XML DOM - 针对 XML 文档的标准模型</li><li>HTML DOM - 针对 HTML 文档的标准模型</li></ul><p><strong>编者注：</strong>DOM 是 Document Object Model（文档对象模型）的缩写。</p><h5 id="1-5-1-2-什么是-HTML-DOM？"><a href="#1-5-1-2-什么是-HTML-DOM？" class="headerlink" title="1.5.1.2 什么是 HTML DOM？"></a>1.5.1.2 什么是 HTML DOM？</h5><p>HTML DOM 是：</p><ul><li>HTML 的标准对象模型</li><li>HTML 的标准编程接口</li><li>W3C 标准</li></ul><p>HTML DOM 定义了所有 HTML 元素的<em>对象</em>和<em>属性</em>，以及访问它们的<em>方法</em>。</p><p><em>换言之，HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准。</em></p><h3 id="1-5-2-教程"><a href="#1-5-2-教程" class="headerlink" title="1.5.2 教程"></a>1.5.2 教程</h3><p>菜鸟教程：<a href="https://www.runoob.com/htmldom/htmldom-intro.html">https://www.runoob.com/htmldom/htmldom-intro.html</a></p><h1 id="二、类库"><a href="#二、类库" class="headerlink" title="二、类库"></a>二、类库</h1><h2 id="2-1-JQuery"><a href="#2-1-JQuery" class="headerlink" title="2.1 JQuery"></a>2.1 JQuery</h2><h3 id="2-1-1-简介"><a href="#2-1-1-简介" class="headerlink" title="2.1.1 简介"></a>2.1.1 简介</h3><p>jQuery 是一个 JavaScript 库。</p><p>jQuery 极大地简化了 JavaScript 编程。</p><p>jQuery 库可以通过一行简单的标记被添加到网页中。</p><p>jQuery 是一个 JavaScript 函数库。</p><p>jQuery 是一个轻量级的”写的少，做的多”的 JavaScript 库。</p><p>jQuery 库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities</li></ul><p><strong>提示：</strong> 除此之外，jQuery 还提供了大量的插件。</p><h3 id="2-1-2-教程网站"><a href="#2-1-2-教程网站" class="headerlink" title="2.1.2 教程网站"></a>2.1.2 教程网站</h3><p>菜鸟教程：<a href="https://www.runoob.com/jquery/jquery-tutorial.html">https://www.runoob.com/jquery/jquery-tutorial.html</a></p><h2 id="2-2-lightGallery"><a href="#2-2-lightGallery" class="headerlink" title="2.2 lightGallery"></a>2.2 lightGallery</h2><h3 id="2-2-1-简介"><a href="#2-2-1-简介" class="headerlink" title="2.2.1 简介"></a>2.2.1 简介</h3><p>A lightweight, modular, JavaScript image and video lightbox gallery plugin. Available for React.js, Vue.js, Angular, and TypeScript.</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912132143259.png" alt="image-20210912132143259" style="zoom:67%;"> <h3 id="2-2-1-教程网站"><a href="#2-2-1-教程网站" class="headerlink" title="2.2.1 教程网站"></a>2.2.1 教程网站</h3><p>lightGallery官网 <a href="https://www.lightgalleryjs.com/docs/getting-started/">https://www.lightgalleryjs.com/docs/getting-started/</a></p><h1 id="三、Matery-流程图"><a href="#三、Matery-流程图" class="headerlink" title="三、Matery 流程图"></a>三、Matery 流程图</h1><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/block%E6%B5%81%E7%A8%8B%E5%9B%BE.drawio.png" alt="block流程图.drawio"> </p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站视频下载</title>
      <link href="/BloodSoul.github.io/2021/09/11/movieclip/b-zhan-shi-pin-xia-zai/"/>
      <url>/BloodSoul.github.io/2021/09/11/movieclip/b-zhan-shi-pin-xia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="一、准备环境"><a href="#一、准备环境" class="headerlink" title="一、准备环境"></a>一、准备环境</h1><p>Step1：下载贝贝本地解析工具并安装</p><p>地址 <a href="https://xbeibeix.com/file/?get=610e8b4af1a6e">https://xbeibeix.com/file/?get=610e8b4af1a6e</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911003752673.png" alt="image-20210911003752673" style="zoom:50%;"> <p>Step2：下载 ffmpeg 视频解析工具</p><p>官网地址： <a href="https://www.ffmpeg.org/">https://www.ffmpeg.org/</a></p><p>下载地址：<a href="https://www.ffmpeg.org/download.html#build-windows">https://www.ffmpeg.org/download.html#build-windows</a></p><p> 选择对应平台，然后点击下面的链接</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911011221456.png" alt="image-20210911011221456" style="zoom:50%;"> <p>向下滚动到 release，建议下载 full 版本</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911011350452.png" alt="image-20210911011350452" style="zoom:50%;"> <h1 id="二、准备视频"><a href="#二、准备视频" class="headerlink" title="二、准备视频"></a>二、准备视频</h1><p>step1: 启动下载的贝贝本地解析软件，点击主程序</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911004806307.png" alt="image-20210911004806307" style="zoom:50%;"> <p>step2：去贝贝本地解析视频网站，输入视频地址，并点击解析。网站地址： <a href="https://xbeibeix.com/api/bilibili/service">https://xbeibeix.com/api/bilibili/service</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911004920949.png" alt="image-20210911004920949" style="zoom:50%;"> <p>step3：滚动到网页最下端，选择视频尺寸点击下载，选择音频尺寸点击下载</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911005515190.png" alt="image-20210911005515190" style="zoom:50%;"> <p>step4：回到贝贝本地工具，点击下载器，在打开的网页中可以查看下载进度</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911005431379.png" alt="image-20210911005431379" style="zoom:50%;"> <p>step5: 点击蓝色文字，可以查看文件下载到的具体位置</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911010504524.png" alt="image-20210911010504524"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911010532233.png" alt="image-20210911010532233"></p><p>step6：去到对应路径，早到两个 .m4s 文件代表视频准备完成</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911010638181.png" alt="image-20210911010638181"> </p><h1 id="三、视频合并"><a href="#三、视频合并" class="headerlink" title="三、视频合并"></a>三、视频合并</h1><p>Step1：解压下载好的 ffmpeg</p><p>Step2：将准备好的两个视频从新命名为 video 和 audio，并复制到 ffmpeg 的 bin 目录下</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911011929545.png" alt="image-20210911011929545" style="zoom:80%;"> <p>Step3：通过 shift + 鼠标右键，点击在此处打开 PowerShell 窗口，输入如下指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.<span class="token punctuation">\</span>ffmpeg.exe -i video.m4s -i audio.m4s -codec copy Output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示如下则表示成功，会有一个 Output.mp4 文件，这个就是我们最终的结果</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911012307117.png" alt="image-20210911012307117" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911012707247.png" alt="image-20210911012707247" style="zoom:80%;"> <h1 id="四、视频合并的其他方式"><a href="#四、视频合并的其他方式" class="headerlink" title="四、视频合并的其他方式"></a>四、视频合并的其他方式</h1><h2 id="4-1-基于-ffmpeg-开发的一些可视化工具"><a href="#4-1-基于-ffmpeg-开发的一些可视化工具" class="headerlink" title="4.1 基于 ffmpeg 开发的一些可视化工具"></a>4.1 基于 ffmpeg 开发的一些可视化工具</h2><h3 id="4-1-1-贝贝工具箱"><a href="#4-1-1-贝贝工具箱" class="headerlink" title="4.1.1 贝贝工具箱"></a>4.1.1 贝贝工具箱</h3><h4 id="4-1-1-1-下载工具"><a href="#4-1-1-1-下载工具" class="headerlink" title="4.1.1.1 下载工具"></a>4.1.1.1 下载工具</h4><p>在贝贝网站上点击下载贝贝工具箱，解压密码 123</p><p>网站地址 <a href="https://xbeibeix.com/api/bilibili/">https://xbeibeix.com/api/bilibili/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911093916564.png" alt="image-20210911093916564" style="zoom: 67%;"> <h4 id="4-1-1-2-工具使用方式"><a href="#4-1-1-2-工具使用方式" class="headerlink" title="4.1.1.2 工具使用方式"></a>4.1.1.2 工具使用方式</h4><p>打开工具一次点击 视频功能-&gt;视频音频合并-&gt;选择视频，选择音频-&gt;运行</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911094402614.png" alt="image-20210911094402614" style="zoom:67%;"> <h3 id="4-1-2-贝贝在线音频视频合并"><a href="#4-1-2-贝贝在线音频视频合并" class="headerlink" title="4.1.2 贝贝在线音频视频合并"></a>4.1.2 贝贝在线音频视频合并</h3><p>网站地址：<a href="https://xbeibeix.com/videotool/">https://xbeibeix.com/videotool/</a></p><p>依次点击合并-&gt;选择视频、音频-&gt;合并视频与音频-&gt;下载</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911094836049.png" alt="image-20210911094836049" style="zoom: 67%;"> <h3 id="4-1-3-有损去水印"><a href="#4-1-3-有损去水印" class="headerlink" title="4.1.3 有损去水印"></a>4.1.3 有损去水印</h3><p>利用格式工程进行去水印地址 <a href="http://www.pcgeshi.com/">http://www.pcgeshi.com/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911131437452.png" alt="image-20210911131437452" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911131538354.png" alt="image-20210911131538354" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911131607496.png" alt="image-20210911131607496" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911131645810.png" alt="image-20210911131645810" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911131717300.png" alt="image-20210911131717300" style="zoom:50%;"> ]]></content>
      
      
      <categories>
          
          <category> 视频编辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> B站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式学习</title>
      <link href="/BloodSoul.github.io/2021/09/10/code/zheng-ze-biao-da-shi-xue-xi/"/>
      <url>/BloodSoul.github.io/2021/09/10/code/zheng-ze-biao-da-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在使用 Picgo 上传图片的时，会默认添加一个 ![] 图片名称标记，导致最终的文档会附带一些无意义的图片名称（主要是我懒，没给图片起名，大部分都是截图或者复制的图片），想动态筛选替换，抹去无意义的干扰，废话不多说，直接开始。</p><p>以下内容从菜鸟教程正则表达式复制，原文链接 <a href="https://www.runoob.com/regexp/regexp-syntax.html">https://www.runoob.com/regexp/regexp-syntax.html</a></p><p>常用公式写到最前面：</p><ul><li><p>用于匹配 alt=”xxx”： <strong>alt=”.+?\b”</strong></p></li><li><p>用于匹配 ![xxx]： <strong>![.+]</strong></p></li></ul><h1 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h1><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[ABC]</td><td align="left">匹配 <strong>[…]</strong> 中的所有字符，例如 <strong>[aeiou]</strong> 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910160148979.png"></td></tr><tr><td align="left">[^ABC]</td><td align="left">匹配除了 <strong>[…]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910160226835.png"></td></tr><tr><td align="left">[A-Z]</td><td align="left">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/C5E357BD-65E3-4EB3-9D80-10D096F19287.jpg"></td></tr><tr><td align="left">.</td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/0FD7E77D-38A7-43BC-B51A-7DBA23A77756.jpg"></td></tr><tr><td align="left">[\s\S]</td><td align="left">匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/47CA6C59-64CF-433A-909E-1E342349A4E0.jpg"></td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/F35A5971-3519-4CAE-8BEC-9DE8F4A55257.jpg"></td></tr></tbody></table><hr><h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\cx</td><td align="left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><hr><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <strong>runoo*b</strong> 中的 *****，简单的说就是表示任何字符串的意思。如果要查找字符串中的 ***** 符号，则需要对 ***** 进行转义，即在其前加一个 <em>***，**runo*ob</em>* 匹配字符串 <strong>runo*ob</strong>。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符*<em>*</em> 放在它们前面。下表列出了正则表达式中的特殊字符：</p><table><thead><tr><th align="left">特别字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$</td><td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td align="left">( )</td><td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td align="left">[</td><td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td align="left">\</td><td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “"，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td align="left">{</td><td align="left">标记限定符表达式的开始。要匹配 {，请使用 {。</td></tr><tr><td align="left">|</td><td align="left">指明两项之间的一个选择。要匹配 |，请使用 |。</td></tr></tbody></table><hr><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><p>以下正则表达式匹配一个正整数，**[1-9]<strong>设置第一个数字不是 0，</strong>[0-9]*** 表示任意多个数字：</p><pre class="line-numbers language-none"><code class="language-none">/[1-9][0-9]*/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/F249891D-F3D9-48D5-A3CB-6FD8FD029117.jpg"></p><p>请注意，限定符出现在范围表达式之后。因此，它应用于整个范围表达式，在本例中，只指定从 0 到 9 的数字（包括 0 和 9）。</p><p>这里不使用 + 限定符，因为在第二个位置或后面的位置不一定需要有一个数字。也不使用 ? 字符，因为使用 ? 会将整数限制到只有两位数。</p><p>如果你想设置 0~99 的两位数，可以使用下面的表达式来至少指定一位但至多两位数字。</p><pre class="line-numbers language-none"><code class="language-none">/[0-9]{1,2}/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的表达式的缺点是，只能匹配两位数字，而且可以匹配 0、00、01、10 99 的章节编号仍只匹配开头两位数字。</p><p>改进下，匹配 1~99 的正整数表达式如下：</p><pre class="line-numbers language-none"><code class="language-none">/[1-9][0-9]?/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">/[1-9][0-9]{0,1}/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>*</strong> 和 <strong>+</strong> 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。</p><p>例如，您可能搜索 HTML 文档，以查找在 <strong>h1</strong> 标签内的内容。HTML 代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;h1&gt;RUNOOB-菜鸟教程&lt;/h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>贪婪：</strong>下面的表达式匹配从开始小于符号 (&lt;) 到关闭 h1 标记的大于符号 (&gt;) 之间的所有内容。</p><pre class="line-numbers language-none"><code class="language-none">/&lt;.*&gt;/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/AD8F3320-2F2E-4513-9BB5-84450D62783D.jpg"></p><p><strong>非贪婪：</strong>如果您只需要匹配开始和结束 h1 标签，下面的非贪婪表达式只匹配 &lt;h1&gt;。</p><pre class="line-numbers language-none"><code class="language-none">/&lt;.*?&gt;/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/A6E72665-CE61-46F4-A72B-A34BC13F5820.jpg"></p><p>也可以使用以下正则表达式来匹配 h1 标签，表达式则是：</p><pre class="line-numbers language-none"><code class="language-none">/&lt;\w+?&gt;/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/C6E89F76-D059-4600-A507-74C42306A790.jpg"></p><p>通过在 *<strong><strong>、</strong>+</strong> 或 <strong>?</strong> 限定符之后放置 <strong>?</strong> ，该表达式从”贪婪”表达式转换为”非贪婪”表达式或者最小匹配。</p><hr><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td align="left">\B</td><td align="left">非单词边界匹配。</td></tr></tbody></table><p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 <strong>^*</strong> 之类的表达式。</p><p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <strong>^</strong> 字符。不要将 <strong>^</strong> 的这种用法与中括号表达式内的用法混淆。</p><p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <strong>$</strong> 字符。</p><p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p><pre class="line-numbers language-none"><code class="language-none">/^Chapter [1-9][0-9]{0,1}/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它既出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。</p><pre class="line-numbers language-none"><code class="language-none">/^Chapter [1-9][0-9]{0,1}$/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>匹配单词边界稍有不同，但向正则表达式添加了很重要的能力。单词边界是单词和空格之间的位置。非单词边界是任何其他位置。下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现在单词边界后面：</p><pre class="line-numbers language-none"><code class="language-none">/\bCha/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>\b</strong> 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 Chapter 中的字符串 ter，因为它出现在单词边界的前面：</p><pre class="line-numbers language-none"><code class="language-none">/ter\b/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：</p><pre class="line-numbers language-none"><code class="language-none">/\Bapt/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>字符串 apt 出现在单词 Chapter 中的非单词边界处，但出现在单词 aptitude 中的单词边界处。对于 <strong>\B</strong> 非单词边界运算符，位置并不重要，因为匹配不关心究竟是单词的开头还是结尾。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。</p><p><strong>()</strong> 表示捕获分组， <strong>()</strong> 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/82A7298A-2A94-49E3-AA27-A7778EE89711.jpg"></p><p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong>?:</strong> 放在第一个选项前来消除这种副作用。</p><p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?=</strong> 和 <strong>?!</strong> ，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><h3 id="以下列出-、-lt-、-、-lt-的使用区别"><a href="#以下列出-、-lt-、-、-lt-的使用区别" class="headerlink" title="以下列出 ?=、?<=、?!、?<! 的使用区别"></a>以下列出 ?=、?&lt;=、?!、?&lt;! 的使用区别</h3><p> <strong>exp1(?=exp2)</strong> ：查找 exp2 前面的 exp1。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/reg-111.jpg"></p><p><strong>(?&lt;=exp2)exp1</strong>：查找 exp2 后面的 exp1。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/reg-222.jpg"></p><p><strong>exp1(?!exp2)</strong> ：查找后面不是 exp2 的 exp1。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/reg-333.jpg"></p><p><strong>(?&lt;!exp2)exp1</strong>：查找前面不是 exp2 的 exp1。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/reg-444.jpg"></p><blockquote><p>更多内容可以参考：<a href="https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html">正则表达式的先行断言(lookahead)和后行断言(lookbehind)</a></p></blockquote><hr><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <strong>\n</strong> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p><p>可以使用非捕获元字符 <strong>?:<strong>、</strong>?=</strong> 或 <strong>?!</strong> 来重写捕获，忽略对相关匹配的保存。</p><p>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。以下面的句子为例：</p><pre class="line-numbers language-none"><code class="language-none">Is is the cost of of gasoline going up up?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的句子很显然有多个重复的单词。如果能设计一种方法定位该句子，而不必查找每个单词的重复出现，那该有多好。下面的正则表达式使用单个子表达式来实现这一点 ：链接 <a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp3">https://www.runoob.com/try/try.php?filename=tryjsref_regexp3</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910170028508.png" alt="" style="zoom: 67%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910170259432.png"> </p><p>捕获的表达式，正如 <strong>[a-z]+</strong> 指定的，包括一个或多个字母。正则表达式的第二部分是对以前捕获的子匹配项的引用，即，单词的第二个匹配项正好由括号表达式匹配。<strong>\1</strong> 指定第一个子匹配项。</p><p>单词边界元字符确保只检测整个单词。否则，诸如 “is issued” 或 “this is” 之类的词组将不能正确地被此表达式识别。</p><p>正则表达式后面的全局标记 <strong>g</strong> 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。</p><p>表达式的结尾处的不区分大小写 <strong>i</strong> 标记指定不区分大小写。</p><p>多行标记指定换行符的两边可能出现潜在的匹配。</p><p>反向引用还可以将通用资源指示符 (URI) 分解为其组件。假定您想将下面的 URI 分解为协议（ftp、http 等等）、域地址和页/路径：</p><pre class="line-numbers language-none"><code class="language-none">http://www.runoob.com:80/html/html-tutorial.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面的正则表达式提供该功能：链接 <a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp4">https://www.runoob.com/try/try.php?filename=tryjsref_regexp4</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910170455200.png"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910170542288.png"> </p><p>第三行代码 <strong>str.match(patt1)</strong> 返回一个数组，实例中的数组包含 5 个元素，索引 0 对应的是整个字符串，索引 1 对应第一个匹配符（括号内），以此类推。</p><p>第一个括号子表达式捕获 Web 地址的协议部分。该子表达式匹配在冒号和两个正斜杠前面的任何单词。</p><p>第二个括号子表达式捕获地址的域地址部分。子表达式匹配非 <strong>:</strong> 和 <strong>/</strong> 之后的一个或多个字符。</p><p>第三个括号子表达式捕获端口号（如果指定了的话）。该子表达式匹配冒号后面的零个或多个数字。只能重复一次该子表达式。</p><p>最后，第四个括号子表达式捕获 Web 地址指定的路径和 / 或页信息。该子表达式能匹配不包括 # 或空格字符的任何字符序列。</p><p>将正则表达式应用到上面的 URI，各子匹配项包含下面的内容：</p><ul><li>第一个括号子表达式包含 <strong>http</strong></li><li>第二个括号子表达式包含 <strong><a href="http://www.runoob.com/">www.runoob.com</a></strong></li><li>第三个括号子表达式包含 <strong>:80</strong></li><li>第四个括号子表达式包含 <strong>/html/html-tutorial.html</strong></li></ul><h1 id="三、修饰符（标记）"><a href="#三、修饰符（标记）" class="headerlink" title="三、修饰符（标记）"></a>三、修饰符（标记）</h1><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p><p>标记不写在正则表达式里，标记位于表达式之外，格式如下：</p><pre class="line-numbers language-none"><code class="language-none">/pattern/flags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了正则表达式常用的修饰符：</p><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">ignore - 不区分大小写</td><td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td align="left">g</td><td align="left">global - 全局匹配</td><td align="left">查找所有的匹配项。</td></tr><tr><td align="left">m</td><td align="left">multi line - 多行匹配</td><td align="left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td align="left">s</td><td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td align="left">默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><h3 id="g-修饰符"><a href="#g-修饰符" class="headerlink" title="g 修饰符"></a>g 修饰符</h3><p>g 修饰符可以查找字符串中所有的匹配项：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/D1A5F1E7-E25E-448E-9BE3-68508E058E99.jpg"></p><p>实例<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171220928.png"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171243134.png"><br><a href="https://www.runoob.com/try/try.php?filename=tryjsref_match_regexp4">尝试一下 »</a></p><h3 id="i-修饰符"><a href="#i-修饰符" class="headerlink" title="i 修饰符"></a>i 修饰符</h3><p>i 修饰符为不区分大小写匹配，实例如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/FF2D211D-0B88-492C-BAA4-04183278383E.jpg"></p><p>实例<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171433999.png"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171452455.png"><br><a href="https://www.runoob.com/try/try.php?filename=tryjsref_match_regexp3">尝试一下 »</a></p><h3 id="m-修饰符"><a href="#m-修饰符" class="headerlink" title="m 修饰符"></a>m 修饰符</h3><p>m 修饰符可以使 <strong>^</strong> 和 <strong>$</strong> 匹配一段文本中每行的开始和结束位置。</p><p>g 只匹配第一行，添加 m 之后实现多行。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/BC3E6D8A-21D2-44F8-A1AE-D90C4939D37A.jpg"></p><p>以下实例字符串中使用 <strong>\n</strong> 来换行：</p><p>实例<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171625576.png"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171644247.png"> </p><p><a href="https://www.runoob.com/try/try.php?filename=tryjsref_match_regexp6">尝试一下 »</a></p><h3 id="s-修饰符"><a href="#s-修饰符" class="headerlink" title="s 修饰符"></a>s 修饰符</h3><p>默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 s 之后, <strong>.</strong> 中包含换行符 <strong>\n</strong>。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/5CDFC964-F0C4-4ADE-80F3-17FB4748DE14.jpg"> </p><p>s 修饰符实例如下：</p><p>实例<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171723138.png"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171738473.png"><br><a href="https://www.runoob.com/try/try.php?filename=tryjsref_match_regexp5">尝试一下 »</a></p><h1 id="四、元字符"><a href="#四、元字符" class="headerlink" title="四、元字符"></a>四、元字符</h1><p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “" 而 “(“ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td align="left">(?=pattern)</td><td align="left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?=95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?&lt;=pattern)</td><td align="left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”`(?&lt;=95</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类似，只是方向相反。例如”`(?&lt;!95</td></tr><tr><td align="left">x|y</td><td align="left">匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^xyz]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td align="left">[^a-z]</td><td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td align="left">\cx</td><td align="left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="left">\W</td><td align="left">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td align="left">\xn</td><td align="left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="left">\num</td><td align="left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td align="left">\nml</td><td align="left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910172328949.png"> </p><p><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp-metachar">尝试一下 »</a> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910172351115.png"> </p><h1 id="五、运算优先级"><a href="#五、运算优先级" class="headerlink" title="五、运算优先级"></a>五、运算优先级</h1><p>正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。</p><p>相同优先级的从左到右进行运算，不同优先级的运算先高后低。下表从最高到最低说明了各种正则表达式运算符的优先级顺序：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">转义符</td></tr><tr><td align="left">(), (?:), (?=), []</td><td align="left">圆括号和方括号</td></tr><tr><td align="left">*, +, ?, {n}, {n,}, {n,m}</td><td align="left">限定符</td></tr><tr><td align="left">^, $, \任何元字符、任何字符</td><td align="left">定位点和序列（即：位置和顺序）</td></tr><tr><td align="left">|</td><td align="left">替换，”或”操作 字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</td></tr></tbody></table><h1 id="六、匹配规则"><a href="#六、匹配规则" class="headerlink" title="六、匹配规则"></a>六、匹配规则</h1><h2 id="基本模式匹配"><a href="#基本模式匹配" class="headerlink" title="基本模式匹配"></a>基本模式匹配</h2><p>一切从最基本的开始。模式，是正则表达式最基本的元素，它们是一组描述字符串特征的字符。模式可以很简单，由普通的字符串组成，也可以非常复杂，往往用特殊的字符表示一个范围内的字符、重复出现，或表示上下文。例如：</p><pre class="line-numbers language-none"><code class="language-none">^once<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个模式包含一个特殊的字符 <strong>^</strong>，表示该模式只匹配那些以 <strong>once</strong> 开头的字符串。例如该模式与字符串 <strong>“once upon a time”</strong> 匹配，与 <strong>“There once was a man from NewYork”</strong> 不匹配。正如如 <strong>^</strong> 符号表示开头一样， <strong>$</strong>   符号用来匹配那些以给定模式结尾的字符串。</p><pre class="line-numbers language-none"><code class="language-none">bucket$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个模式与 <strong>“Who kept all of this cash in a bucket”</strong> 匹配，与 <strong>“buckets”</strong> 不匹配。字符 <strong>^</strong> 和 <strong>$</strong> 同时使用时，表示精确匹配（字符串与模式一样）。例如：</p><pre class="line-numbers language-none"><code class="language-none">^bucket$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只匹配字符串 <strong>“bucket”</strong> 。如果一个模式不包括 <strong>^</strong> 和 <strong>$</strong> ，那么它与任何包含该模式的字符串匹配。例如模式：</p><pre class="line-numbers language-none"><code class="language-none">once<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与字符串</p><pre class="line-numbers language-none"><code class="language-none">There once was a man from NewYorkWho kept all of his cash in a bucket.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是匹配的。</p><p>在该模式中的字母 <strong>(o-n-c-e)</strong> 是字面的字符，也就是说，他们表示该字母本身，数字也是一样的。其他一些稍微复杂的字符，如标点符号和白字符（空格、制表符等），要用到转义序列。所有的转义序列都用反斜杠   \  打头。制表符的转义序列是 <strong>\t</strong> 。所以如果我们要检测一个字符串是否以制表符开头，可以用这个模式：</p><pre class="line-numbers language-none"><code class="language-none">^\t <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似的，用 <strong>\n</strong> 表示 <strong>“新行”</strong> ， <strong>\r</strong> 表示回车。其他的特殊符号，可以用在前面加上反斜杠，如反斜杠本身用 \ 表示，句号 <strong>.</strong> 用 <strong>.</strong> 表示，以此类推。</p><h2 id="字符簇"><a href="#字符簇" class="headerlink" title="字符簇"></a>字符簇</h2><p>在 INTERNET 的程序中，正则表达式通常用来验证用户的输入。当用户提交一个 FORM 以后，要判断输入的电话号码、地址、EMAIL 地址、信用卡号码等是否有效，用普通的基于字面的字符是不够的。</p><p>所以要用一种更自由的描述我们要的模式的办法，它就是字符簇。要建立一个表示所有元音字符的字符簇，就把所有的元音字符放在一个方括号里：</p><pre class="line-numbers language-none"><code class="language-none">[AaEeIiOoUu]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个模式与任何元音字符匹配，但只能表示一个字符。用连字号可以表示一个字符的范围，如：</p><pre class="line-numbers language-none"><code class="language-none">[a-z] // 匹配所有的小写字母 [A-Z] // 匹配所有的大写字母 [a-zA-Z] // 匹配所有的字母 [0-9] // 匹配所有的数字 [0-9\.\-] // 匹配所有的数字，句号和减号 [ \f\r\t\n] // 匹配所有的白字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的，这些也只表示一个字符，这是一个非常重要的。如果要匹配一个由一个小写字母和一位数字组成的字符串，比如 “z2”、”t6” 或 “g7”，但不是 “ab2”、”r2d3” 或 “b52” 的话，用这个模式：</p><pre class="line-numbers language-none"><code class="language-none">^[a-z][0-9]$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尽管 <strong>[a-z]</strong> 代表 26 个字母的范围，但在这里它只能与第一个字符是小写字母的字符串匹配。</p><p>前面曾经提到^表示字符串的开头，但它还有另外一个含义。当在一组方括号里使用 <strong>^</strong> 时，它表示”<strong>非</strong>“或”<strong>排除</strong>“的意思，常常用来剔除某个字符。还用前面的例子，我们要求第一个字符不能是数字：</p><pre class="line-numbers language-none"><code class="language-none">^[^0-9][0-9]$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个模式与 “&amp;5”、”g7”及”-2” 是匹配的，但与 “12”、”66” 是不匹配的。下面是几个排除特定字符的例子：</p><pre class="line-numbers language-none"><code class="language-none">[^a-z] //除了小写字母以外的所有字符 [^\\\/\^] //除了(\)(/)(^)之外的所有字符 [^\"\'] //除了双引号(")和单引号(')之外的所有字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>特殊字符 <strong>.</strong>(点，句号)在正则表达式中用来表示除了”新行”之外的所有字符。所以模式 <strong>^.5$</strong> 与任何两个字符的、以数字5结尾和以其他非”新行”字符开头的字符串匹配。模式 <strong>.</strong> 可以匹配任何字符串，<strong>换行符（\n、\r）除外</strong>。</p><p>PHP的正则表达式有一些内置的通用字符簇，列表如下：</p><table><thead><tr><th align="left">字符簇</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[[:alpha:]]</td><td align="left">任何字母</td></tr><tr><td align="left">[[:digit:]]</td><td align="left">任何数字</td></tr><tr><td align="left">[[:alnum:]]</td><td align="left">任何字母和数字</td></tr><tr><td align="left">[[:space:]]</td><td align="left">任何空白字符</td></tr><tr><td align="left">[[:upper:]]</td><td align="left">任何大写字母</td></tr><tr><td align="left">[[:lower:]]</td><td align="left">任何小写字母</td></tr><tr><td align="left">[[:punct:]]</td><td align="left">任何标点符号</td></tr><tr><td align="left">[[:xdigit:]]</td><td align="left">任何16进制的数字，相当于[0-9a-fA-F]</td></tr></tbody></table><h2 id="确定重复出现"><a href="#确定重复出现" class="headerlink" title="确定重复出现"></a>确定重复出现</h2><p>到现在为止，你已经知道如何去匹配一个字母或数字，但更多的情况下，可能要匹配一个单词或一组数字。一个单词有若干个字母组成，一组数字有若干个单数组成。跟在字符或字符簇后面的花括号({})用来确定前面的内容的重复出现的次数。</p><table><thead><tr><th align="left">字符簇</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^[a-zA-Z_]$</td><td align="left">所有的字母和下划线</td></tr><tr><td align="left">^[[:alpha:]]{3}$</td><td align="left">所有的3个字母的单词</td></tr><tr><td align="left">^a$</td><td align="left">字母a</td></tr><tr><td align="left">^a{4}$</td><td align="left">aaaa</td></tr><tr><td align="left">^a{2,4}$</td><td align="left">aa,aaa或aaaa</td></tr><tr><td align="left">^a{1,3}$</td><td align="left">a,aa或aaa</td></tr><tr><td align="left">^a{2,}$</td><td align="left">包含多于两个a的字符串</td></tr><tr><td align="left">^a{2,}</td><td align="left">如：aardvark和aaab，但apple不行</td></tr><tr><td align="left">a{2,}</td><td align="left">如：baad和aaa，但Nantucket不行</td></tr><tr><td align="left">\t{2}</td><td align="left">两个制表符</td></tr><tr><td align="left">.{2}</td><td align="left">所有的两个字符</td></tr></tbody></table><p>这些例子描述了花括号的三种不同的用法。一个数字 <strong>{x}</strong> 的意思是<strong>前面的字符或字符簇只出现x次</strong> ；一个数字加逗号 <strong>{x,}</strong> 的意思是<strong>前面的内容出现x或更多的次数</strong> ；两个数字用逗号分隔的数字 <strong>{x,y}</strong> 表示 <strong>前面的内容至少出现x次，但不超过y次</strong>。我们可以把模式扩展到更多的单词或数字：</p><pre class="line-numbers language-none"><code class="language-none">^[a-zA-Z0-9_]{1,}$      // 所有包含一个以上的字母、数字或下划线的字符串 ^[1-9][0-9]{0,}$        // 所有的正整数 ^\-{0,1}[0-9]{1,}$      // 所有的整数 ^[-]?[0-9]+\.?[0-9]+$   // 所有的浮点数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后一个例子不太好理解，是吗？这么看吧：以一个可选的负号 (<strong>[-]?</strong>) 开头 (<strong>^</strong>)、跟着1个或更多的数字( <strong>[0-9]+</strong> )、和一个小数点(<strong>.</strong>)再跟上1个或多个数字( <strong>[0-9]+</strong> )，并且后面没有其他任何东西( <strong>$</strong> )。下面你将知道能够使用的更为简单的方法。</p><p>特殊字符 <strong>?</strong> 与 <strong>{0,1}</strong> 是相等的，它们都代表着： <strong>0个或1个前面的内容</strong> 或 <strong>前面的内容是可选的</strong> 。所以刚才的例子可以简化为：</p><pre class="line-numbers language-none"><code class="language-none">^\-?[0-9]{1,}\.?[0-9]{1,}$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>特殊字符 <strong>*</strong> 与 <strong>{0,}</strong> 是相等的，它们都代表着 <strong>0 个或多个前面的内容</strong> 。最后，字符 <strong>+</strong> 与 <strong>{1,}</strong> 是相等的，表示 <strong>1 个或多个前面的内容</strong> ，所以上面的4个例子可以写成：</p><pre class="line-numbers language-none"><code class="language-none">^[a-zA-Z0-9_]+$      // 所有包含一个以上的字母、数字或下划线的字符串 ^[1-9][0-9]*$        // 所有的正整数 ^\-?[0-9]+$          // 所有的整数 ^[-]?[0-9]+(\.[0-9]+)?$ // 所有的浮点数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然这并不能从技术上降低正则表达式的复杂性，但可以使它们更容易阅读。</p><h1 id="六、示例"><a href="#六、示例" class="headerlink" title="六、示例"></a>六、示例</h1><h2 id="a、校验数字的表达式"><a href="#a、校验数字的表达式" class="headerlink" title="a、校验数字的表达式"></a>a、校验数字的表达式</h2><ul><li>数字：<strong>^[0-9]*$</strong></li><li>n位的数字：<strong>^\d{n}$</strong></li><li>至少n位的数字<strong>：^\d{n,}$</strong></li><li>m-n位的数字：<strong>^\d{m,n}$</strong></li><li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li><li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li><li>带1-2位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li><li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li><li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>有1~3位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li><li>非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li><li>非零的负整数：<strong>^-[1-9][]0-9”*$ 或 ^-[1-9]\d*$</strong></li><li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li><li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li><li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</strong></li><li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</strong></li><li>正浮点数：<strong>^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</strong></li><li>负浮点数：<strong>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</strong></li><li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</strong></li></ul><hr><h2 id="b、校验字符的表达式"><a href="#b、校验字符的表达式" class="headerlink" title="b、校验字符的表达式"></a>b、校验字符的表达式</h2><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li><li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号： <strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有^%&amp;’,;=?$"等字符： <strong>[^%&amp;’,;=?$\x22]+</strong></li><li>禁止输入含有~的字符： <strong>[^~\x22]+</strong></li></ul><hr><h2 id="c、特殊需求表达式"><a href="#c、特殊需求表达式" class="headerlink" title="c、特殊需求表达式"></a>c、特殊需求表达式</h2><ul><li>Email地址： <strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</strong></li><li>域名： <strong>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?</strong></li><li>InternetURL： <strong>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</strong></li><li>手机号码：<strong>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：**(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)**</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9]|1[0-2])$</strong></li><li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件： <strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</strong></li><li>中文字符的正则表达式： <strong>[\u4e00-\u9fa5]</strong></li><li>双字节字符： <strong>[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</strong></li><li>空白行的正则表达式： <strong>\n\s*\r (可以用来删除空白行)</strong></li><li>HTML标记的正则表达式： <strong>&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</strong></li><li>腾讯QQ号： <strong>[1-9][0-9]{4,} (腾讯QQ号从10000开始)</strong> </li><li>中国邮政编码： <strong>[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</strong></li><li>IPv4地址： <strong>((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}</strong></li></ul><h2 id="d-匹配-PicGo-图片的表达式"><a href="#d-匹配-PicGo-图片的表达式" class="headerlink" title="d. 匹配 PicGo 图片的表达式"></a>d. 匹配 PicGo 图片的表达式</h2><ul><li><p>用于匹配 alt=”xxx”： <strong>alt=”.+?\b”</strong></p></li><li><p>用于匹配 ![xxx]： <strong>![.+]</strong></p></li></ul><h1 id="七、实践心得"><a href="#七、实践心得" class="headerlink" title="七、实践心得"></a>七、实践心得</h1><p>在做 Shader评估工具时，需要匹配所使用的 Sin 方法</p><p>匹配 sin(xx); 的思路</p><p>1、先使用 \b 来匹配单词的开始或结尾</p><p>2、使用 sin 来匹配主题内容</p><p>4、使用 ( 来匹配 “(”,来排除后面跟其他字母的情况</p><p>3、因为sin 和（）中间可以有任意多个空格，所以使用 \s 来匹配一个空格，后面跟上 * 来匹配没有空格或者有任意个空格</p><p>4、最终如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">\bsin\s*\(<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112112930034.png" alt="image-20211112112930034" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
            <tag> 精确搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纹理</title>
      <link href="/BloodSoul.github.io/2021/09/10/ta/xin-ji-yuan/xuan-ran-ji-chu-zhi-shi/wen-li/"/>
      <url>/BloodSoul.github.io/2021/09/10/ta/xin-ji-yuan/xuan-ran-ji-chu-zhi-shi/wen-li/</url>
      
        <content type="html"><![CDATA[<h1 id="一、纹理"><a href="#一、纹理" class="headerlink" title="一、纹理"></a>一、纹理</h1><p>在计算机图形学中，纹理贴图是使用图像、函数或其他数据源来改变物体表面外观的技术</p><p>图像纹理中的像素通常被称为纹素（Texels），区别于屏幕上的像素</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/tex_PY1_WuJian_zj.png"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/NSZ_YuYi_Clothes.png" style="zoom: 80%;"> </p><h1 id="二、纹理映射或（贴图）"><a href="#二、纹理映射或（贴图）" class="headerlink" title="二、纹理映射或（贴图）"></a>二、纹理映射或（贴图）</h1><p>根据Kershaw的术语，通过将投影方程（projector function）运用于空间中的点 ，从而得到一组称为参数空间值（parameter-spacevalues）的关于纹理的数值。这个过程就称为贴图（Mapping，也称映射 ）,也就是纹理贴图（Texture Mapping，也称纹理映射 ）这个词的由来。</p><h1 id="三、纹理管线"><a href="#三、纹理管线" class="headerlink" title="三、纹理管线"></a>三、纹理管线</h1><p>纹理贴图可以用一个通用的纹理管线来进行描述</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/1.jpg"> </p><p>下面是对上图中描述的纹理管线的分步概述：</p><ul><li>第一步。通过将投影方程（projector function）运用于空间中的点 ，从而得到一组称为参数空间值（parameter-space values）的关于纹理的数值。</li><li>第二步。在使用这些新值访问纹理之前，可以使用一个或者多个映射函数（corresponder function）将参数空间值（parameter-space values ）转换到纹理空间。</li><li>第三步。使用这些纹理空间值（texture-space locations）从纹理中获取相应的值（obtain value）。例如，可以使用图像纹理的数组索引来检索像素值。</li><li>第四步。再使用值变换函数（value transform function）对检索结果进行值变换，最后使用得到的新值来改变表面属性，如材质或者着色法线等等。</li></ul><p>一个砖块的纹理映射流程：</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-ad23ce4ad86fc84a79a0a57e7ae8c5ba_r.jpg" alt="" style="zoom: 33%;"></h1><p>在具体的参考帧画面中找到物体空间中的位置(x,y,z)，如图中点（-2.3,7.1,88.2），然后对该位置运用投影函数。这个投影函数通常将向量(x,y,z)转换为一个二元向量(u,v)。在此示例中使用的投影函数是一个正交投影，类似一个投影仪，将具有光泽的砖墙图像投影到多边形表面上。再考虑砖墙这边，其实这个投影过程就是将砖墙平面上的点变换为值域为0到1之间的一对(u,v)值，如图，(0.32,0.29)就是这个我们通过投影函数得到的uv值。而我们图像的分辨率是256 x 256，所以，将256分别乘以(0.32,0.29)，去掉小数点，得到纹理坐标(81, 74)。通过这个纹理坐标，可以在纹理贴图上查找到坐标对应的颜色值，所以，我们接着找到砖块图像上像素位置为(81,74)处的点，得到颜色(0.9,0.8,0.7)。而由于原始砖墙的颜色太暗，因此可以使用一个值变换函数，给每个向量乘以1.1，就可以得到我们纹理管线过程的结果——颜色值(0.99,0.88,0.77)。</p><p>更多示例如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-48-16.png" alt="" style="zoom:50%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-49-6.png" alt="" style="zoom:33%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-49-30.png" alt="" style="zoom: 25%;"> </p><h2 id="3-1-投影函数-The-Projector-Function"><a href="#3-1-投影函数-The-Projector-Function" class="headerlink" title="3.1 投影函数 The Projector Function"></a>3.1 投影函数 The Projector Function</h2><p>作为纹理管线的第一步，投影函数的功能就是将空间中的三维点转化为纹理坐标，也就是获取表面的位置并将其投影到参数空间中。</p><p>在常规情况下，投影函数通常在美术建模阶段使用，并将投影结果存储于顶点数据中。也就是说，在软件开发过程中，我们一般不会去用投影函数去计算得到投影结果，而是直接使用在美术建模过程中，已经存储在模型顶点数据中的投影结果。</p><p>下图中上面一行从左到右分别为球形、圆柱、平面，以及自然uv投影：下面一行所示为把不同的投影运用于同一个物体的情形。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-38-22.png" alt="" style="zoom:33%;"> <p>下图为 Maya 中的平面投影 <a href="https://help.autodesk.com/view/MAYAUL/2022/CHS/?guid=GUID-B6519472-C0ED-4C07-99C6-12107A3509D9">https://help.autodesk.com/view/MAYAUL/2022/CHS/?guid=GUID-B6519472-C0ED-4C07-99C6-12107A3509D9</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-39-43.png"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_15-5-5.png" alt="" style="zoom: 67%;"> </p><h2 id="3-2-映射函数-The-Corresponder-Function"><a href="#3-2-映射函数-The-Corresponder-Function" class="headerlink" title="3.2 映射函数 The Corresponder Function"></a>3.2 映射函数 The Corresponder Function</h2><p>映射函数（The Corresponder Function）的作用是将参数空间坐标（parameter-space coordinates）转换为纹理空间位置（texture space locations）。</p><p>我们知道图像会出现在物体表面的(u,v)位置上，且uv值的正常范围在[0,1)范围内。超出这个值域的纹理，其显示方式便可以由映射函数（The Corresponder Function）来决定。</p><p>在OpenGL中，这类映射函数称为“封装模式（Warapping Mode）”，在Direct3D中，这类函数叫做“寻址模式（Texture Addressing Mode）”。最常见的映射函数有以下几种：</p><ul><li>重复寻址模式，wrap (DirectX), repeat (OpenGL)。图像在表面上重复出现。</li><li>镜像寻址模式，mirror。图像在物体表面上不断重复，但每次重复时对图像进行镜像或者反转。</li><li>夹取寻址模式，clamp (DirectX) ,clamp to edge (OpenGL)。夹取纹理寻址模式将纹理坐标夹取在[0.0，1.0]之间，也就是说，在[0.0，1.0]之间就是把纹理复制一遍，然后对于[0.0，1.0]之外的内容，将边缘的内容沿着u轴和v轴进行延伸。</li><li>边框颜色寻址模式，border (DirectX) ,clamp to border (OpenGL)。边框颜色寻址模式就是在[0.0，1.0]之间绘制纹理，然后[0.0，1.0]之外的内容就用边框颜色填充。</li></ul><p>下图寻址模式，从左到右分别是重复寻址、镜像寻址、夹取寻址、边框颜色寻址</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-44-52.png"> </p><p>下图为Unity中的可用设置</p><p>![](C:\Users\Administrator\Desktop\纹理\纹理 - 乌拉拉 - 真有趣 docs_files\image2021-9-9_14-43-50.png) </p><h3 id="3-2-1-映射纹理过小引发的问题"><a href="#3-2-1-映射纹理过小引发的问题" class="headerlink" title="3.2.1 映射纹理过小引发的问题"></a>3.2.1 映射<strong>纹理过小引发的问题</strong></h3><p>纹理过小的问题相对容易理解，想想我们把一张100x100的纹理贴图应用在一500x500的屏幕之上必然会导致走样失真，因为屏幕空间中的许多个像素都映射到纹理上的同一个纹素上。</p><h4 id="3-2-1-1-纹理过滤（Texture-Filtering）"><a href="#3-2-1-1-纹理过滤（Texture-Filtering）" class="headerlink" title="3.2.1.1 纹理过滤（Texture Filtering）"></a>3.2.1.1 纹理过滤（Texture Filtering）</h4><p>纹理过滤的作用是将浮点型纹理坐标转换为整数的像素坐标，并对采样结果进行处理。</p><p>简单地说，由于我们用于显示纹理的图形与纹理图像存在大小、形状的区别，我们需要在采样过程中进行一定的处理来进行滤波，否则会显示为伪像，包括重叠、错位等。</p><h4 id="3-2-1-2-邻近过滤（Nearest-Neighbor-Filtering）"><a href="#3-2-1-2-邻近过滤（Nearest-Neighbor-Filtering）" class="headerlink" title="3.2.1.2 邻近过滤（Nearest Neighbor Filtering）"></a>3.2.1.2 邻近过滤（Nearest Neighbor Filtering）</h4><p>选择中心点最接近纹理坐标的那个像素，也是最简单的纹理过滤方式，只需要一次采样，效率最高，如图1所示，邻近过滤的计算方法为：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_15-42-1.png"> </p><h4 id="3-2-1-3-线性过滤，也称为双线性过滤（-Bi-linear-Filtering）"><a href="#3-2-1-3-线性过滤，也称为双线性过滤（-Bi-linear-Filtering）" class="headerlink" title="3.2.1.3 线性过滤，也称为双线性过滤（(Bi)linear Filtering）"></a>3.2.1.3 线性过滤，也称为双线性过滤（(Bi)linear Filtering）</h4><p>选择中心点周围的4个纹素加权计算出来，需要4次采样，如图2所示，线性过滤的计算方法如等式2，先从水平方向上根据距离 s 加权计算，再根据垂直方向 t 加权计算。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_15-46-33.png"> </p><p>两种滤波效果如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-3215f8d8526abfb1e5ccb813fe801e1d_r.jpg"> </p><h3 id="3-2-2-映射纹理过大引发的问题"><a href="#3-2-2-映射纹理过大引发的问题" class="headerlink" title="3.2.2 映射纹理过大引发的问题"></a>3.2.2 映射<strong>纹理过大引发的问题</strong></h3><p>若映射纹理远远大于屏幕像素，屏幕上的单个像素将被映射到许多纹素（texels）</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-6f82f715d0198b2415b5dc0d3265cd69_r.jpg" alt="" style="zoom:50%;">  <p>映射纹理过大，直接使用 <strong>Point sampled</strong> 采样表现如下图，近处锯齿！远处摩尔纹！非常严重的走样现象</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-2a6b2b72a8b13bdc9e978d2da218634d_r.jpg" alt="" style="zoom:50%;"> <h4 id="3-2-2-1-Mipmap"><a href="#3-2-2-1-Mipmap" class="headerlink" title="3.2.2.1 Mipmap"></a>3.2.2.1 Mipmap</h4><p>我们已经知道了在采样纹理时，纹理大小跟图形大小接近才会有好的显示效果，因此便有了Mipmap技术。Mipmap的原理是预先生成一系列以2为倍数缩小的纹理序列，在采样纹理时根据图形的大小自动选择相近等级的Mipmap进行采样。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_15-57-33.png" alt="" style="zoom:50%;"> <p>那么如何去确定使用哪个level的texture呢？利用屏幕像素的相邻像素点估算footprint大小再确定level D</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_15-59-48.png" alt="" style="zoom:67%;"> <p>在屏幕空间中取当前像素点的右方和上方的两个相邻像素点(4个全取也可以)，分别查询得到这3个点对应在Texture space的坐标，计算出当前像素点与右方像素点和上方像素点在Texture space的距离，二者取最大值，计算公式如图中所示，那么level D就是这个距离的log2值 (D = log2L) ! 这不难理解，读者可以具体取几个例子比如L = 1，L = 2，L = 4，看看是否符合这样的计算即可。</p><p>但是这里D值算出来是一个连续值，并不是一个整数，有两种对应的方法：</p><p>\1. 四舍五入取得最近的那个level D</p><p>\2. 利用D值在 向下和向上取整的两个不同level进行<strong>三线性过滤（Trilinear filtering）</strong> </p><h4 id="3-2-2-2-三线性过滤（Trilinear-filtering）"><a href="#3-2-2-2-三线性过滤（Trilinear-filtering）" class="headerlink" title="3.2.2.2 三线性过滤（Trilinear filtering）"></a>3.2.2.2 <strong>三线性过滤（Trilinear filtering）</strong></h4><p>所谓3线性插值，就是在向下取整的D level上进行一次双线性插值(前文提过)，再在D+1 level之上进行一次双线性插值，这二者数据再根据实际的连续D值在向下和向上取整的两个不同level之间的比例，再来一次线性插值，而这整体就是一个三线性插值了。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-5-19.png" alt="" style="zoom:67%;"> <p>应用三线性过滤效果如下，虽然和一开始的 <strong>point sample</strong> 有了很大的进步，但是有一个严重的问题是，远处的地板产生一种过曝的现象，完全糊在了一起。该如何解决这个最后的问题呢？</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-7-20.png" style="zoom:50%;"> <h4 id="3-2-2-3-各向异性过滤（-Anisotropic-Filtering）"><a href="#3-2-2-3-各向异性过滤（-Anisotropic-Filtering）" class="headerlink" title="3.2.2.3 各向异性过滤（ Anisotropic Filtering）"></a>3.2.2.3 各向异性过滤（ Anisotropic Filtering）</h4><p>各向异性过滤就是纹理过滤的终极形态，它比三线性滤波效果更好，也更复杂。各向异性过滤，分别考虑uv两个方向的缩放，然后在多层纹理之间加权计算出最后结果。</p><p>三线性过滤将uv等价的考虑，最多只加权两层纹理，如下图：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1003f344d0ffc9d683b66167e45c0359_720w.jpg"> </p><p>各向异性过滤方式，需要估计纹理梯度，区分u方向和v方向：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-19-8.png"> </p><p>计算需要采样的层数：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-19-45.png"> </p><p>即最小的纹理层开始采样，采样N层，最后再取加权算出结果，它消耗的上限受maxAniso控制。</p><p>应用各向异性过滤后效果如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-21-1.png" alt=" " style="zoom: 33%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-15acc5a127110daeb710eea4f0ad4036_r.jpg" alt="" style="zoom: 50%;">  <p>对应Unity中的设置</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-23-59.png"> </p><h1 id="四、常见贴图类型"><a href="#四、常见贴图类型" class="headerlink" title="四、常见贴图类型"></a>四、常见贴图类型</h1><h3 id="4-1-凹凸贴图与其改进"><a href="#4-1-凹凸贴图与其改进" class="headerlink" title="4. 1 凹凸贴图与其改进"></a>4. 1 凹凸贴图与其改进</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-5272853f8c2d3bd9a2f220f914ede96a_r.jpg"></p><h4 id="4-1-1-Bump-Mapping"><a href="#4-1-1-Bump-Mapping" class="headerlink" title="4.1.1 Bump Mapping"></a>4.1.1 Bump Mapping</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-abd63e5b5c7fd88fa04501f0e0a07aaa_r.jpg"></p><h4 id="4-1-2-Displacement-Map"><a href="#4-1-2-Displacement-Map" class="headerlink" title="4.1.2 Displacement Map"></a>4.1.2 Displacement Map</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-96b885b9a91bb426edaaeb22118546cd_r.jpg"></p><h4 id="4-1-3-Normal-Mapping"><a href="#4-1-3-Normal-Mapping" class="headerlink" title="4.1.3 Normal Mapping"></a>4.1.3 Normal Mapping</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-2c28cc15e8ec5a370eea13ae984f032d_r.jpg"></p><h4 id="4-1-4-视差贴图-Parallax-Mapping"><a href="#4-1-4-视差贴图-Parallax-Mapping" class="headerlink" title="4.1.4 视差贴图 Parallax Mapping"></a>4.1.4 视差贴图 Parallax Mapping</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1cd32708218ce6f9d13ee5b63057ae16_r.jpg"></p><h4 id="4-1-5-浮雕贴图-Relief-Mapping"><a href="#4-1-5-浮雕贴图-Relief-Mapping" class="headerlink" title="4.1.5 浮雕贴图 Relief Mapping"></a>4.1.5 浮雕贴图 Relief Mapping</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-5d3578dbe0249a5dfc5a3fe85c772b43_r.jpg"> </p><h3 id="4-2-颜色贴图"><a href="#4-2-颜色贴图" class="headerlink" title="4.2 颜色贴图"></a>4.2 <strong>颜色贴图</strong></h3><h4 id="4-2-1-Diffuse-Map"><a href="#4-2-1-Diffuse-Map" class="headerlink" title="4.2.1 Diffuse Map"></a>4.2.1 Diffuse Map</h4><p><em><strong>*<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-789fa5062b6a566576d2e3d6d04797f3_r.jpg">*</strong></em></p><h4 id="4-2-2-Albedo"><a href="#4-2-2-Albedo" class="headerlink" title="4.2.2 Albedo"></a>4.2.2 Albedo</h4><p>Unity的Shader（着色器）中，把颜色贴图叫做Albedo</p><h4 id="4-2-3-Base-Color"><a href="#4-2-3-Base-Color" class="headerlink" title="4.2.3 Base Color"></a>4.2.3 Base Color</h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-d3f464f2b1763a132cfd8101140167c6_720w.jpg"></strong></p><h5 id="4-2-4-Gradient-amp-Ramp、ColorLUT"><a href="#4-2-4-Gradient-amp-Ramp、ColorLUT" class="headerlink" title="4.2.4 Gradient&amp;Ramp、ColorLUT"></a>4.2.4 Gradient&amp;Ramp、ColorLUT</h5><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-e34af351c4c27444922f1be024ae9266_r.jpg" alt="" style="zoom:50%;"> <img src="https://pic2.zhimg.com/v2-4ec86be8d77d30ee2af57b09291dbd89_r.jpg" alt="" style="zoom: 35%;"></strong></p><h3 id="4-3-反射贴图"><a href="#4-3-反射贴图" class="headerlink" title="4.3 反射贴图"></a><strong>4.3</strong> <strong>反射贴图</strong></h3><h4 id="4-3-1-Metallic"><a href="#4-3-1-Metallic" class="headerlink" title="4.3.1 Metallic"></a><strong>4.3.1</strong> <strong>Metallic</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-9589bc81206bada3f7c7f6e64ef60d8f_720w.jpg"></strong></p><h4 id="4-3-2-Roughness"><a href="#4-3-2-Roughness" class="headerlink" title="4.3.2 Roughness"></a><strong>4.3.2</strong> <strong>Roughness</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1737b102ad88f07453b3dd1428aff31b_r.jpg"></strong></p><h4 id="4-3-3-Specular"><a href="#4-3-3-Specular" class="headerlink" title="4.3.3 Specular"></a><strong>4.3.3</strong> <strong>Specular</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-27bae95238b7c6341379df3bd9361aa7_720w.jpg"></strong></p><h4 id="4-3-4-Glossiness"><a href="#4-3-4-Glossiness" class="headerlink" title="4.3.4 Glossiness"></a><strong>4.3.4</strong> <strong>Glossiness</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1b1884be30e98b06e630968a639bfb54_r.jpg"></strong></p><h4 id="4-3-5-Anisotropic-Map"><a href="#4-3-5-Anisotropic-Map" class="headerlink" title="4.3.5 Anisotropic Map"></a><strong>4.3.5</strong> <strong>Anisotropic Map</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-b566da8a0290fbc4d0cbacde1cc924ae_r.jpg"></strong></p><h3 id="4-4-结构贴图"><a href="#4-4-结构贴图" class="headerlink" title="4.4 结构贴图"></a><strong>4.4 结构贴图</strong></h3><h4 id="4-4-1-Ambient-Occlusion（AO，环境光遮蔽贴图）"><a href="#4-4-1-Ambient-Occlusion（AO，环境光遮蔽贴图）" class="headerlink" title="4.4.1 Ambient Occlusion（AO，环境光遮蔽贴图）"></a><strong>4.4.1</strong> <strong>Ambient Occlusion（AO，环境光遮蔽贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-35237b0d005143b90ef2a3d377d9da5b_720w.jpg"></strong></p><h4 id="4-4-2-Cavity-Map（缝隙图）"><a href="#4-4-2-Cavity-Map（缝隙图）" class="headerlink" title="4.4.2 Cavity Map（缝隙图）"></a><strong>4.4.2 Cavity Map（缝隙图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-6cc52a339811855d597903ecffc6acfa_r.jpg"></strong></p><h4 id="4-4-3-Bent-Normal（环境法线贴图）"><a href="#4-4-3-Bent-Normal（环境法线贴图）" class="headerlink" title="4.4.3 Bent Normal（环境法线贴图）"></a>4.4.3 Bent Normal（环境法线贴图）</h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-3028543a883308309492717d43747057_720w.jpg"></strong></p><h4 id="4-4-4-Curvature（曲率贴图）"><a href="#4-4-4-Curvature（曲率贴图）" class="headerlink" title="4.4.4 Curvature（曲率贴图）"></a><strong>4.4.4</strong> <strong>Curvature（曲率贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-2f5a1cc1fbfd3bb977992c86e429f09e_r.jpg"></strong></p><h4 id="4-4-5-Thickness（厚度贴图）"><a href="#4-4-5-Thickness（厚度贴图）" class="headerlink" title="4.4.5 Thickness（厚度贴图）"></a><strong>4.4.5</strong> <strong>Thickness（厚度贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-3f404f5ef701c1cde8e689391d2b7850_r.jpg"></strong></p><h3 id="4-5-光照与环境贴图"><a href="#4-5-光照与环境贴图" class="headerlink" title="4.5 光照与环境贴图"></a><strong>4.5</strong> <strong>光照与环境贴图</strong></h3><h4 id="4-5-1-Light-Map"><a href="#4-5-1-Light-Map" class="headerlink" title="4.5.1 Light Map"></a><strong>4.5.1</strong> <strong>Light Map</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1156a778d011d8513fd2c7fea255888f_r.jpg"></strong></p><h4 id="4-5-2-Spherical-Environment-Map（球面环境贴图）"><a href="#4-5-2-Spherical-Environment-Map（球面环境贴图）" class="headerlink" title="4.5.2 Spherical Environment Map（球面环境贴图）"></a><strong>4.5.2 Spherical Environment Map（球面环境贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-36f45e31e0362b01c442578e645f7699_720w.jpg"></strong></p><h4 id="4-5-3-Cube-Map（立方体贴图）"><a href="#4-5-3-Cube-Map（立方体贴图）" class="headerlink" title="4.5.3 Cube Map（立方体贴图）"></a><strong>4.5.3 Cube Map（立方体贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-b5c6f96230a4a88a4a9fc04b9215d7a7_720w.jpg"></strong></p><h4 id="4-5-4-Radiosity-Normal-Map（辐射度法线贴图）"><a href="#4-5-4-Radiosity-Normal-Map（辐射度法线贴图）" class="headerlink" title="4.5.4 Radiosity Normal Map（辐射度法线贴图）"></a><strong>4.5.4 Radiosity Normal Map（辐射度法线贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1af7a46eab78f4234336fab3667bae0c_720w.jpg"></strong></p><h3 id="4-6-特殊用途贴图"><a href="#4-6-特殊用途贴图" class="headerlink" title="4.6 特殊用途贴图"></a><strong>4.6 特殊用途贴图</strong></h3><h4 id="4-6-1-ID-Mask-Map（ID、遮罩贴图）"><a href="#4-6-1-ID-Mask-Map（ID、遮罩贴图）" class="headerlink" title="4.6.1 ID Mask Map（ID、遮罩贴图）"></a><strong>4.6.1 ID Mask Map（ID、遮罩贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1748a9305b8d7f2368cbfc22c751b0fe_720w.jpg"></strong></p><h4 id="4-6-2-Emissive-Map（自发光贴图）"><a href="#4-6-2-Emissive-Map（自发光贴图）" class="headerlink" title="4.6.2 Emissive Map（自发光贴图）"></a><strong>4.6.2 Emissive Map（自发光贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-0d545c1a8a9b89e050183feddf4272fb_720w.jpg"></strong></p><h4 id="4-6-3-Opacity（透明贴图）"><a href="#4-6-3-Opacity（透明贴图）" class="headerlink" title="4.6.3 Opacity（透明贴图）"></a><strong>4.6.3 Opacity（透明贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-dba031695b48e6a0a768eea7f4c28f2c_720w.jpg"></strong></p><h4 id="4-6-4-Position-Map（位置贴图）"><a href="#4-6-4-Position-Map（位置贴图）" class="headerlink" title="4.6.4 Position Map（位置贴图）"></a><strong>4.6.4 Position Map（位置贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-6999a8e6d314a9b6748e79affa77f75b_720w.jpg"></strong></p><h4 id="4-6-5-Detail（细节贴图）"><a href="#4-6-5-Detail（细节贴图）" class="headerlink" title="4.6.5 Detail（细节贴图）"></a><strong>4.6.5 Detail（细节贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-c123846f1ea40c3087d8d412e6dfe004_720w.jpg" alt="" style="zoom:50%;"><img src="https://pic4.zhimg.com/80/v2-17e48fd7a6e33521bf1b8b06f47df9b7_720w.jpg" alt="" style="zoom: 67%;"></strong></p><h4 id="4-6-6-Flow-Map（流动贴图）"><a href="#4-6-6-Flow-Map（流动贴图）" class="headerlink" title="4.6.6 Flow Map（流动贴图）"></a><strong>4.6.6 Flow Map（流动贴图）</strong></h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-59-59.png" alt="" style="zoom:67%;"> <h4 id="4-6-7-DuDv-Map-（扭曲贴图）"><a href="#4-6-7-DuDv-Map-（扭曲贴图）" class="headerlink" title="4.6.7 DuDv Map （扭曲贴图）"></a><strong>4.6.7</strong> <strong>DuDv Map （扭曲贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-22f9f4fbecc9ea008dadfdf749f26e46_720w.jpg" alt="" style="zoom: 67%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-b05650700471bce622b142b0dfd2b5a9_720w.jpg" alt="" style="zoom: 67%;"></strong></p><h1 id="五、纹理压缩"><a href="#五、纹理压缩" class="headerlink" title="五、纹理压缩"></a>五、纹理压缩</h1><h3 id="为什么我们需要纹理压缩格式？"><a href="#为什么我们需要纹理压缩格式？" class="headerlink" title="为什么我们需要纹理压缩格式？"></a>为什么我们需要纹理压缩格式？</h3><p>例如R5G6B5，A4R4G4B4，A1R5G5B5，R8G8B8，A8R8G8B8等未经压缩的图片格式，是能够被GPU直接读取的原生纹理格式。但在低端硬件设备或者说移动平台下，有两个问题需要解决。</p><ul><li><strong>内存：</strong>例如 A8R8G8B8 格式一个像素占 4 字节，如果是 512x512 分辨率内存就占用 512x512x4 b=1048576 b=1 M，一般手游占用内存大概 300M，峰值也不该超过 600M，这种内存消耗在低端设备上根本无法接受。</li><li><strong>数据传输的带宽：</strong>带宽是发热的元凶，在渲染3D场景时，会有大量的贴图被传输到GPU，不经限制的话总线带宽很快就会成为瓶颈，手机秒变暖手宝，严重的还会影响渲染性能。</li></ul><p>因此我们需要一种内存占用既小又能被 GPU 读取的格式——压缩纹理格式。纹理压缩对应的算法是以某种形式的固定速率有损向量量化 (lossy vector quantization ) 将固定大小的像素块编码进固定大小的字节块中。</p><ul><li><strong>固定速率</strong>：因为GPU需要能够高效的随机访问一个像素，这意味着对任意像素，解码速度不该有太大的变化。因此，我们常见的贴图压缩算法都是有损压缩。相反的例如 zip 则是一种可变速率压缩。</li><li>**向量量化(Vector quantization, VQ)**：一种量化技术，将一组大量的点(向量)分成具有近似相同数量的最接近它们的点的组。每个组用它的质心点表示，因此存在数据误差，适用于有损压缩。放到纹理压缩中来理解，就是例如将4x4块像素的颜色以2个基色来表示。</li><li><strong>压缩比</strong>：通常以比特率或每像素的平均比特数 (bits per pixel, bpp) 表示，常见的为 2~8bpp。一般 RGB 原生纹理的像素指 24 位，4bpp 表示每像素占4位，所以也可以认为 4bpp 表示压缩比为6:1。</li></ul><h3 id="为什么我们不使用-png、jpg-这类常见的压缩格式？"><a href="#为什么我们不使用-png、jpg-这类常见的压缩格式？" class="headerlink" title="为什么我们不使用 png、jpg 这类常见的压缩格式？"></a>为什么我们不使用 png、jpg 这类常见的压缩格式？</h3><p>尽管像 jpg、png 的压缩率很高，但并不适合纹理，主要问题是<strong>不支持像素的随机访问</strong>，这对 GPU 相当不友好，GPU 渲染时只使用需要的纹理部分，我们总不可能为了访问某个像素去解码整张纹理吧？不知道顺序，也不确定相邻的三角形是否在纹理上采样也相邻，很难有优化。这类格式更适合下载传输以及减少磁盘空间而使用。</p><p><strong>Unity支持的所有压缩格式及推荐</strong></p><p><a href="https://docs.unity3d.com/cn/2018.4/Manual/class-TextureImporterOverride.html">https://docs.unity3d.com/cn/2018.4/Manual/class-TextureImporterOverride.html</a></p><h3 id="常见纹理压缩格式"><a href="#常见纹理压缩格式" class="headerlink" title="常见纹理压缩格式"></a>常见纹理压缩格式</h3><h3 id="ETC"><a href="#ETC" class="headerlink" title="ETC"></a>ETC</h3><p>ETC（Ericsson Texture Compression）<strong>最初为移动设备开发，如今它是安卓的标准压缩方案</strong>，ETC1在OpenGL和OpenGL ES中都有支持。</p><p>其原理简单来说，是将4x4 的像素块编码为2x4或4x2像素的两个块的方法，每个块指定一个基色，每个像素的颜色通过一个编码为相对于这些基色偏移的灰度值确定。</p><p>具体来说，ETC1每4x4像素块编码为64位的字节数据，每一个像素块又分为两个2x4子块（由一个“flip”位控制水平或竖直划分），每个子块包含一个3位的修饰表索引（modifier table index）和一个基本颜色值，这两个颜色值要么是2*R4G4B4要么是R5G5B5+R3G3B3（由一个“ diff”位控制是哪一种）。</p><p>3位的修饰表索引对应于8种修饰值：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-38-28.png"> </p><p>这样一个子块由1个基本颜色值和4个修饰值可以确定出4种新的颜色值：<br><code>color0 = base_color + RGB(modifier0, modifier0, modifier0)</code></p><pre class="line-numbers language-none"><code class="language-none">color1 = base_color + RGB(modifier1, modifier1, modifier1)color2 = base_color + RGB(modifier2, modifier2, modifier2)color3 = base_color + RGB(modifier3, modifier3, modifier3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最终的颜色就是从这4个颜色值中选出。其原理就是另外32位数据中包含16个2位选择器数据，每个像素的颜色都根据2位选择器的值从这4种中选出。</p><p>ETC1编码方式直观图如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-38-55.png"> </p><p>Unity几种ETC纹理压缩格式：</p><p>RGB ETC1 4 bit ：4 bits/pixel，对RGB压缩比6:1，不支持Alpha，绝大部分安卓设备都支持。</p><p>RGB ETC2 4 bit ：4 bits/pixel，对RGB压缩比6:1。不支持Alpha，ETC2兼容ETC1，压缩质量可能更高，但对于色度变化大的块误差也更大，需要在OpenGL ES 3.0和OpenGL 4.3以上版本。</p><p>RGBA ETC2 8bit ：8 bits/pixel，对RGBA压缩比4:1。支持完全的透明通道，版本要求同上。</p><p>RGB +1bit Alpha ETC2 4bit ：4 bits/pixel。支持1bit的Alpha通道，也就是只支持镂空图，图片只有透明和不透明部分，没有中间的透明度。</p><p>EAC：核心原理与ETC相同，但它只用于单通道或双通道数据，OpenGL ES 3.0和OpenGL 4.3后的设备大部分支持，但由于安卓平台五花八门的兼容性，一般不建议用单双通道贴图。</p><h3 id="DXT"><a href="#DXT" class="headerlink" title="DXT"></a>DXT</h3><p>原名S3TC（S3 Texture Compression ），由S3 Graphics开发的一种与组块有关的有损压缩算法，也叫DXTn或DXTC（DirectX Texture），是块截断编码（Block Truncation Coding）的一种改进。<strong>由于版权专利一般用于Window平台。</strong></p><p>其原理简单来说，是由一对低精度的“基色”来描述一个4x4的RGB像素块，并允许每个像素在这些基色之间指定一个插值。S3TC有多种变体，每种都是为特定类型的图像数据设计，但它们都是将4x4的像素块转换为64位或128位的数据。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-40-30.png"> </p><p>BC1（Block Compression）是最小的一种变体，也是转换比最高的一种，在不需要高精度也不需要a值时可以使用。它将4x4个像素作为一个块（block）存储64位数据，其中包括两个16位RGB值（R5G6B5，人眼对绿色更敏感）$color_0$和$color_1$，和16个2位选择器值，一个像素最终的颜色值由$color_0$、$color_1$和对应的2位选择器值决定。混合公式如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-41-5.png"> </p><p>它的工作方式直观图如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-41-31.png"> </p><p>BC2在BC1的基础上支持了a值。它将4x4共16个像素存储为128位数据，其中包括64位a通道（每像素4位）和64位颜色通道，颜色和DXT1一致，即两个16位RGB值和16个2位索引表x。它的透明度只有4位共16种数值，相比DXT5有些辣鸡基本没人用。DXT2和DXT3的差别在于是否是预乘过的颜色。</p><p>BC3在BC2的基础上改进了a值算法。BC3将4x4共16个像素存储为128位数据，其中包括64位a通道（两个8位a值和一个4x4的3位索引表）和64位颜色通道，颜色和DXT1一样，即两个16位RGB值和16个2位索引表x。由于a值采用了和颜色一样类似的块压缩算法，所以数值范围更广，BC是比较常见的。</p><p>BC4和BC5在D3D10中可用，只能存储一个/两个颜色通道。</p><p>BC6H和BC7在D3D11中可用。BC6H是一个不带a值的HDR格式，它将4x4共16个像素存储为128位数据，其中包括两个48位的RGB值（16:16:16），每个颜色分量都是带符号浮点值（1 个符号位 + 5 个指数位 + 10 个尾数位），以及16个2位索引表。</p><p>BC7相比其它有点特殊，虽然它也是将4x4共16个像素存储为128位数据，但它的最低有效位为mode位，（最低有效位即最低的非0位）根据不同模式，颜色值的存储格式不同，是否有a值或a值的存储格式也不尽相同，是一种比较灵活的存储格式，但这也意味着解码所带来更多的消耗。</p><h3 id="PVRTC"><a href="#PVRTC" class="headerlink" title="PVRTC"></a>PVRTC</h3><p>PVRTC (PowerVR Texture Compression)由Imagination公司专为PowerVR显卡核心设计，<strong>由于专利原因一般它只被用于苹果的设备，仅Iphone、Ipad和部分PowerVR的安卓机支持</strong>。这可能是这几种压缩格式中最不公开的技术。</p><p>PVRTC不同于DXT和ETC这类基于块的算法，而将整张纹理分为了高频信号和低频信号，低频信号由两张低分辨率的图像A和B表示，这两张图在两个维度上都缩小了4倍，高频信号则是全分辨率但低精度的调制图像M，M记录了每个像素混合的权重。要解码时，A和B图像经过双线性插值（bilinearly）宽高放大4倍，然后与M图上的权重进行混合。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-44-3.png"> </p><p>PVRTC 4-bpp模式下，每4x4像素占一个64位数据块，2-bpp模式下每8x4像素会有一个64位数据块。两者大同小异，我们仅说4-bpp模式。</p><p>4-bpp模式下，A和B图缩小后都只保存一个颜色值，如下图所示，A图比B图少1位，但两张图都可以选择以RGB或ARGB的方式存储（最高位决定为哪种），A色可以用RGB554或ARGB3443格式编码，B色可以用RGB555或ARGB3444格式编码。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-44-26.png"> </p><p>在解码时，为了解码任意像素，必须读取4个相邻的PVRTC块，使用这4个块来解码一个5x5块。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-44-41.png"> </p><p>使用双线性过滤来对A和B图进行扩大，然后A和B图根据M图与“Mode”位进行混合，这里的”Mode”位为1时，M图中10值像素被看作是开启了”punch-through alpha”，alpha通道会被强制清零，这种神奇的操作是为了兼容旧应用程序，具体就不说了。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-45-1.png"> </p><p>单从4bpp模式来看，PVRTC和BC、ETC非常相似，都有两个颜色值，但基本思想却是不同的。</p><p>Unity几种PVRTC的纹理压缩格式：</p><p><strong>苹果的所有移动设备都支持PVRTC。</strong></p><p><strong>PVRTC2质量比PVRTC更高，而且支持NPOT（非2次幂纹理），是PVRTC的升级版。</strong></p><p>PVRTC和PVRTC2都支持4-bpp和2-bpp的ARGB格式。</p><p>RGB PVRTC 4 bit ：4 bits/pixel，对RGB压缩比6:1，安卓设备需要PowerVR Series 5以上。</p><p>RGBA PVRTC 4 bit ：4 bits/pixel，对RGBA压缩比8:1，3位Alpha值，设备同上。</p><p>RGB PVRTC 2 bit ：2 bits/pixel，对RGB压缩比6:1，安卓和IOS设备需要PowerVR Series 5X以上。</p><p>RGBA PVRTC 2 bit ：2 bits/pixel，对RGBA压缩比8:1，3位Alpha值，设备同上。</p><h3 id="ASTC"><a href="#ASTC" class="headerlink" title="ASTC"></a>ASTC</h3><p>ASTC（Adaptive Scalable Texture Compression），由ARM和AMD联合开发，2012年发布，是较新的一种压缩格式，唯一一个不受专利权影响的压缩格式。ASTC在压缩率、图像质量、种类上都挺不错的，也正在逐步代替前三种，最大的缺点可能就是兼容性还不够完善和解码时间较长，但以现在移动端的发展趋势来看，GPU计算能力越来越难成为瓶颈，因此非常有希望在以后能成为统一的压缩格式。</p><p>ASTC也是一种基于块的有损压缩算法，它很像BC7，不同的是块中像素数量可变，它的特点有很多：<br>- 较高的灵活性：支持1-4分量的贴图；</p><p>- 压缩率/质量灵活可变：根据不同图片会选择不同压缩率级别的算法；</p><p>- 支持2d/3d贴图；</p><p>- 跨平台：IOS、安卓、PC都；</p><p>- 同时支持LDR和HDR：BC6H虽然支持HDR但不支持Alpha通道；</p><p>ASTC格式的块为固定大小的128位。2D纹理编码中，他从4x4到12x12像素都有，对应的压缩比从3:1到27:1。所有支持的块和比特率如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-46-33.png"> </p><p>Increment列表示压缩比的增量，这也表示ASTC的比特率可以在小数级变化，这种技术称为BISE(Bounded Integer Sequence Encoding)。</p><p>但要注意的是尽管纹理可以被编码为1-4通道图像，但是解码后的值总是以RGBA格式输出。在LDR sRGB模式下，颜色值以8位整数的形式返回，而如果是HDR则将以16位浮点数的形式返回。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以2020年市场上的移动设备支持来看</p><ul><li>安卓：用ETC2没有什么问题；至于ASTC在Android 5.0/OpenGL ES 3.1后支持，市场大部分机型都支持（98.5%），可以考虑选择，但毕竟是安卓，要做好处理兼容性的心里准备。</li><li>IOS：在iPhone6以上（包含）都支持ASTC，6以下可以选择PVRTC2。</li></ul><p>最后，所有压缩格式的简要描述如下，灰色框表示已经过时了或基本不用了。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-48-33.png"> </p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><p>游戏资源常见贴图类型 <a href="https://zhuanlan.zhihu.com/p/260973533">https://zhuanlan.zhihu.com/p/260973533</a></p><p>计算机图形学七：纹理映射(Texture Mapping)及Mipmap技术 <a href="https://zhuanlan.zhihu.com/p/144332091">https://zhuanlan.zhihu.com/p/144332091</a></p><p>【《Real-Time Rendering 3rd》 提炼总结】(五) 第六章 · 纹理贴图及相关技术 <a href="https://zhuanlan.zhihu.com/p/27551369">https://zhuanlan.zhihu.com/p/27551369</a></p><p>纹理过滤漫谈 <a href="https://zhuanlan.zhihu.com/p/137242786">https://zhuanlan.zhihu.com/p/137242786</a></p><p>图形学底层探秘 - 纹理采样、环绕、过滤与Mipmap的那些事 <a href="https://zhuanlan.zhihu.com/p/143377682">https://zhuanlan.zhihu.com/p/143377682</a></p><p>Texture Import Settings <a href="https://docs.unity3d.com/Manual/class-TextureImporter.html"> https://docs.unity3d.com/Manual/class-TextureImporter.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 新纪元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> 渲染基础知识 </tag>
            
            <tag> Texture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ET 环境配置</title>
      <link href="/BloodSoul.github.io/2021/09/08/gameplay/et-huan-jing-pei-zhi/"/>
      <url>/BloodSoul.github.io/2021/09/08/gameplay/et-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、克隆-ET-工程"><a href="#一、克隆-ET-工程" class="headerlink" title="一、克隆 ET 工程"></a>一、克隆 ET 工程</h1><p>目前ET6暂时还没有支持 ILRuntime 热更</p><p>网站链接：<a href="https://github.com/egametang/ET">https://github.com/egametang/ET</a></p><p>克隆地址：<a href="https://github.com/egametang/ET.git">https://github.com/egametang/ET.git</a></p><p>网友添加的 ILRuntime 热更地址：</p><p>最大限度的保持了原有结构： <a href="https://github.com/mister91jiao/ET_ILRuntime/">https://github.com/mister91jiao/ET_ILRuntime/</a></p><p>同时添加了 FGUI，xAsset 流程：<a href="https://github.com/wqaetly/ET">https://github.com/wqaetly/ET</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908225504785.png" alt="image-20210908225504785"></p><h1 id="二、安装-Unity"><a href="#二、安装-Unity" class="headerlink" title="二、安装 Unity"></a>二、安装 Unity</h1><p>需要至少安装 Unity2020版本，推荐 Unity2020 的 LTS 版本</p><p>链接：<a href="https://unity.cn/releases">https://unity.cn/releases</a></p><p>安装时添加 IL2CPP 模块</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908225725496.png" alt="image-20210908225725496"> </p><h1 id="三、安装-MongoDB"><a href="#三、安装-MongoDB" class="headerlink" title="三、安装 MongoDB"></a>三、安装 MongoDB</h1><p>MongoDB 下载地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p>可视化GUI MongoDB Compass 下载地址：<a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a></p><h3 id="MongoDB-环境配置"><a href="#MongoDB-环境配置" class="headerlink" title="MongoDB 环境配置"></a>MongoDB 环境配置</h3><p>安装时一定要选择Custom，否则不会生成后续初始化需要的 bin 目录</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908230450099.png" alt="image-20210908230450099" style="zoom:67%;"> <p>在安装目录的 bin 目录下，shift + 右键 在此处打开 Powershell，输入如下指令，其中 -dbpath 后面的路径是你的 mongoDB 安装下的data路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mongod -dbpath D:<span class="token punctuation">\</span>MongoDB<span class="token punctuation">\</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果结果显示如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908231131039.png" alt="image-20210908231131039" style="zoom: 67%;"> <p>在浏览器中输入  <a href="http://localhost:27017/">http://localhost:27017/</a> 显示如下表示成功</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908231237238.png" alt="image-20210908231237238"> </p><p>运行 MongoDB Compass 如下</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908231404085.png" alt="image-20210908231404085" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908231441781.png" alt="image-20210908231441781" style="zoom:67%;"> <p>点击 Connect，显示如下表示连接成功</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908231539087.png" alt="image-20210908231539087" style="zoom: 50%;">  <h1 id="四、配置服务端"><a href="#四、配置服务端" class="headerlink" title="四、配置服务端"></a>四、配置服务端</h1><p>在 .net 官网下载并安装 .NET 5.0 SDK 和 .NET Core 3.1 SDK  地址链接：<a href="https://dotnet.microsoft.com/download">https://dotnet.microsoft.com/download</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912225618591.png" alt="image-20210912225618591" style="zoom:67%;"> <p>.NET Core3.1 要求 VS 版本在 2019 16.11.2 及以上 </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912225815516.png" alt="image-20210912225815516" style="zoom: 80%;"> <p>建议如下库全部安装</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230044375.png" alt="image-20210912230044375" style="zoom:67%;"> <p>安装完成后一定要重启电脑，重启电脑是为了让 .NET Core3.1 和  .NET 5.0 生效</p><p>在 Unity 中右键 Open in C# project 打开客户端，然后生成解决方案</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230426700.png" alt="image-20210912230426700" style="zoom:67%;"> <p>在 ET 工程中 打开 Server 端工程，然后执行同样的方式进行编译</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230602442.png" alt="image-20210912230602442" style="zoom:67%;"> <p>确保全部生成成功</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230706019.png" alt="image-20210912230706019" style="zoom:67%;"> <h1 id="五、启动测试"><a href="#五、启动测试" class="headerlink" title="五、启动测试"></a>五、启动测试</h1><p>运行 Server.App</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912225345493.png" alt="image-20210912225345493"> </p><p>运行 init 场景</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912225146556.png" alt="image-20210912225146556" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230815664.png" alt="image-20210912230815664" style="zoom: 80%;"> <p>小人自动行走，日志有输出即表示成功</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230846891.png" alt="image-20210912230846891" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230943197.png" alt="image-20210912230943197" style="zoom:67%;"> <h1 id="六-网友添加的-ILRuntime-版本启动流程"><a href="#六-网友添加的-ILRuntime-版本启动流程" class="headerlink" title="六 网友添加的 ILRuntime 版本启动流程"></a>六 网友添加的 ILRuntime 版本启动流程</h1><p>仓库地址：<a href="https://github.com/wqaetly/ET">https://github.com/wqaetly/ET</a></p><p>按造第四项配置服务端的流程，先编译客户端代码，在编译服务端代码</p><h5 id="6-1-生成-AB-资源"><a href="#6-1-生成-AB-资源" class="headerlink" title="6.1 生成 AB 资源"></a>6.1 生成 AB 资源</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912232458762.png" alt="image-20210912232458762" style="zoom:67%;"> <h5 id="6-2-生成-CLR"><a href="#6-2-生成-CLR" class="headerlink" title="6.2 生成 CLR"></a>6.2 生成 CLR</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912232633695.png" alt="image-20210912232633695" style="zoom:67%;"> <h5 id="6-3-启动资源服务器"><a href="#6-3-启动资源服务器" class="headerlink" title="6.3 启动资源服务器"></a>6.3 启动资源服务器</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912232741501.png" alt="image-20210912232741501" style="zoom:67%;"> <p>显示如下代表启动成功</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912232812885.png" alt="image-20210912232812885"> </p><h5 id="6-4-启动服务器"><a href="#6-4-启动服务器" class="headerlink" title="6.4 启动服务器"></a>6.4 启动服务器</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233024927.png" alt="image-20210912233024927" style="zoom:67%;"> <p>也可以在 Tools -&gt; 打开服务器选项-&gt;启动服务器</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233123773.png" alt="image-20210912233123773" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233151531.png" alt="image-20210912233151531" style="zoom:67%;"> <p>6.5 启动客户端</p><p>运行 Init 场景，显示账号登录界面，且控制台没有报错表示成功链接资源服务器成功</p><p>点击登录-&gt;匹配模式，进入到小人界面，且没有报错，表示服务器连接成功</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233316034.png" alt="image-20210912233316034" style="zoom:67%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233420983.png" alt="image-20210912233420983" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233731118.png" alt="image-20210912233731118" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> GamePlay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青青草原——草的俯视矫正、大小渐变</title>
      <link href="/BloodSoul.github.io/2021/08/28/ta/grass/qing-qing-cao-yuan-cao-de-fu-shi-jiao-zheng-da-xiao-jian-bian/"/>
      <url>/BloodSoul.github.io/2021/08/28/ta/grass/qing-qing-cao-yuan-cao-de-fu-shi-jiao-zheng-da-xiao-jian-bian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、草的俯视大小矫正"><a href="#一、草的俯视大小矫正" class="headerlink" title="一、草的俯视大小矫正"></a>一、草的俯视大小矫正</h1><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>step1：通过观察方向和竖直向上方向的叉乘（叉乘顺序不能变，Unity是右手坐标系，叉乘需要用左手），可以计算出上下左右各个区域的草，具体如下：</p><ol><li>叉乘结果的X，代表从前向后，也就是从Z轴负方向到Z轴正方向,中间为零</li><li>叉乘结果的Z，代表从右到左，也就是从X轴正方向到X轴负方向。一般使用是取反，以便与X轴对齐，即从X轴负方向到X轴正方向</li><li>通过结合计算的结果X,Z，便得出的从垂直向上的点到四周渐变的Mask值</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%8F%89%E4%B9%98%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA.png" style="zoom:50%;"> </li></ol><p>step2：通过观察方向和竖直向上的点乘值，来作为俯视矫正的角度偏移值</p><p>step3：将计算的过的俯视矫正大小值，加入到顶点位置中</p><p>伪代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half3 perspectiveMask = cross(ViewDir,(0,1,0));half3 perspectiveAngleMask = dot(viewDir,(0,1,0));half3 finalMask = half3(-perspectiveMask.z,0,perspectiveMask.x) * perspectiveAngleMask;half3 positionOS = positionOS + finalMask * perspectiveInstensity;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、大小渐变"><a href="#二、大小渐变" class="headerlink" title="二、大小渐变"></a>二、大小渐变</h4>]]></content>
      
      
      <categories>
          
          <category> TA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 草地渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青青草原——草的颜色渐变、AO模拟、简易透光</title>
      <link href="/BloodSoul.github.io/2021/08/09/ta/grass/qing-qing-cao-yuan-cao-de-yan-se-jian-bian-ao-mo-ni-jian-yi-tou-guang/"/>
      <url>/BloodSoul.github.io/2021/08/09/ta/grass/qing-qing-cao-yuan-cao-de-yan-se-jian-bian-ao-mo-ni-jian-yi-tou-guang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、草的颜色渐变"><a href="#一、草的颜色渐变" class="headerlink" title="一、草的颜色渐变"></a>一、草的颜色渐变</h1><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>step1：定义两个渐变色</p><p>step2：定义渐变因子</p><p>step3：将渐变后的颜色与主颜色进行混合</p><p>伪代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half4 gradientColor1;half4 gradientColor2;half gradientTerm;half4 finalGradientColor = lerp(gradientColor1,gradientColor2,gradientTerm);half3 finalColor = finalGradientColor.rgb * albedoColor.rgb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="扩展方式"><a href="#扩展方式" class="headerlink" title="扩展方式"></a>扩展方式</h4><p>可以使用 noise 贴图或者程序 noise 计算，并把这个值加入的渐变色的混合因子中，来实现颜色的随机变换</p><h1 id="二、AO模拟"><a href="#二、AO模拟" class="headerlink" title="二、AO模拟"></a>二、AO模拟</h1><h4 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h4><p>step1：定义一个AO的颜色</p><p>step2：AO的Mask计算可以用如下方式：</p><ul><li>方式一：使用UV的V</li><li>方式二：使用法线和竖直向上及（0,1,0）的点乘值</li><li>方式三：使用第四套UV，并通过绘制贴图的 R 通道进行控制，也是本案例中采用方式</li></ul><p>step3：将AO的颜色与主颜色进行混合</p><p>伪代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half4 AOColor;half AOMask = tex2D(_AOMaskTex,uv4);half4 finalAoColor = lerp(AOColor,half4(1,1,1,1),AOMask);half3 finalColor = finalAoColor.rgb * albedoColor.rgb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、透光实现"><a href="#三、透光实现" class="headerlink" title="三、透光实现"></a>三、透光实现</h3><h4 id="实现方式-2"><a href="#实现方式-2" class="headerlink" title="实现方式"></a>实现方式</h4><p>step1：定义一个透光颜色</p><p>step2：观察方向的Mask计算：观察方向和主光源相反的方向越一致，透光的效果就越强烈，通过点乘计算，并将值重新映射到0,1</p><p>step3：贴图mask：使用第四套UV，并通过绘制贴图的 G 通道进行控制</p><p>step4：将透光的颜色与主贴图颜色进行 <strong>叠加</strong></p><p>伪代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half4 subsurfaceColor;half viewMask = dot(viewDir,-lightDir);viewMask = viewMask * 0.5 + 0.5;half texMask = tex2D(_AOMaskTex,uv4);half4 finalSubsurfaceColor = subsurfaceColor * viewMask * texMask;half3 finalColor = finalSubsurfaceColor.rgb + albedoColor.rgb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 草地渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青青草原——弯曲、震动、旋转</title>
      <link href="/BloodSoul.github.io/2021/08/08/ta/grass/qing-qing-cao-yuan-wan-qu-zhen-dong-xuan-zhuan/"/>
      <url>/BloodSoul.github.io/2021/08/08/ta/grass/qing-qing-cao-yuan-wan-qu-zhen-dong-xuan-zhuan/</url>
      
        <content type="html"><![CDATA[<h1 id="一、模型预处理处理"><a href="#一、模型预处理处理" class="headerlink" title="一、模型预处理处理"></a>一、模型预处理处理</h1><h4 id="为什么需要对模型进行预处理？"><a href="#为什么需要对模型进行预处理？" class="headerlink" title="为什么需要对模型进行预处理？"></a>为什么需要对模型进行预处理？</h4><p>草地渲染的主要困难点在于数量庞大，经常以万为单位，因为本人知识有限，暂时只能想到如下几点优化方式：</p><ol><li>对草进行场景划分管理，例如四叉树或八叉树，然后进行视锥体裁剪剔除，还可以利用 Compute Shader，Jobs 等进行加速处理</li><li>将部分草进行模型合并，大约在一万面左右，做成不同形状的预制体，然后进行摆放（<strong>本次学习使用该方案</strong>）</li><li>针对合并的草模型，可以使用LOD技术，优化性能</li></ol><h4 id="合并草模型"><a href="#合并草模型" class="headerlink" title="合并草模型"></a>合并草模型</h4><p>在 3ds Max 中对草进行模型合并，也可以使用 Unity 的其他插件（如：Mesh Baker）直接在Unity中合并</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E8%8D%89%E5%90%88%E5%B9%B6.png" alt="草合并" style="zoom:50%;"> <h4 id="烘焙模型锚点"><a href="#烘焙模型锚点" class="headerlink" title="烘焙模型锚点"></a>烘焙模型锚点</h4><ul><li>为了能够更精细的控制每颗草的弯曲，我们可以将原本草的锚点位置坐标烘焙在模型的第四套UV通道中。</li><li>思路为：因为模型是合并的，每个草之间并不是连续的，都是独立的个体，所以模型面数之间必定存在断层，不连续的地方，由此入手，进行查找区分。</li><li>实现方式为从任意个面开始，向外扩散，直到出现不连续停止，被选中的面作为一个Element，然后进行该Element的顶点坐标相加去平均值。</li></ul><h6 id="伪代码如下"><a href="#伪代码如下" class="headerlink" title="伪代码如下"></a>伪代码如下</h6><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">// 计算元素var grassElements = new List&lt;int&gt;(vertexCount);for (int i = 0; i &lt; trianglesCount; i += 3){    var index1 = triangles[i + 0];    var index2 = triangles[i + 1];    var index3 = triangles[i + 2];    int element = 0;    if (grassElements[index1] != -1)    {        element = grassElements[index1];    }    else if (grassElements[index2] != -1)    {        element = grassElements[index2];    }    else if (grassElements[index3] != -1)    {        element = grassElements[index3];    }    else    {        element = elementCount;        elementCount++;    }    grassElements[index1] = element;    grassElements[index2] = element;    grassElements[index3] = element;}// 设置锚点for (int e = 0; e &lt; elementCount; e++){    var positions = new List&lt;Vector3&gt;();    for (int i = 0; i &lt; grassElements.Count; i++)    {        if (grassElements[i] == e)        {            positions.Add(vertices[i]);        }    }    float x = 0;    float z = 0;    for (int p = 0; p &lt; positions.Count; p++)    {        x = x + positions[p].x;        z = z + positions[p].z;    }    for (int i = 0; i &lt; grassElements.Count; i++)    {        if (grassElements[i] == e)        {            anchors[i] = new Vector4(x / positions.Count,0, z / positions.Count,0);        }    }    mesh.SetUVs(3, anchors);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用顶点色"><a href="#使用顶点色" class="headerlink" title="使用顶点色"></a>使用顶点色</h4><ul><li>R通道：使用顶点色R通道控制运动的 Offset，这样可以使用顶点刷工具，来打破运动的规律性</li><li>G通道：使用G通道来控制弯曲程度</li><li>B通道：使用B通道来控制旋转程度</li><li>A通道：使用A通道来控制震动程度</li></ul><h1 id="二、XZ轴弯曲、Y轴旋转"><a href="#二、XZ轴弯曲、Y轴旋转" class="headerlink" title="二、XZ轴弯曲、Y轴旋转"></a>二、XZ轴弯曲、Y轴旋转</h1><h4 id="计算绕轴旋转"><a href="#计算绕轴旋转" class="headerlink" title="计算绕轴旋转"></a>计算绕轴旋转</h4><p>假设给定草的顶点坐标为Pos，旋转的角度为Angle，旋转后的坐标为ResultPos</p><p>绕着X轴计算方式为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half3 rotationAxis = half3(Pos.x,0,0);half3 otherAxis = half3(0,Pos.yz);ResultPos = rotationAxis + otherAxis * Cos(Angle) + Cross(half3(1,0,0),otherAxis) * Sin(Angle);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>绕着Y轴计算方式为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half3 rotationAxis = half3(0,Pos.y,0);half3 otherAxis = half3(Pos.x,0,Pos.z);ResultPos = rotationAxis + otherAxis * Cos(Angle) + Cross(half3(0,1,0),otherAxis) * Sin(Angle);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>绕着Z轴计算方式为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half3 rotationAxis = half3(0,0,Pos.z);half3 otherAxis = half3(Pos.xy,0);ResultPos = rotationAxis + otherAxis * Cos(Angle) + Cross(half3(0,0,1),otherAxis) * Sin(Angle);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="计算旋转的角度-AngleXZ"><a href="#计算旋转的角度-AngleXZ" class="headerlink" title="计算旋转的角度 AngleXZ"></a>计算旋转的角度 AngleXZ</h4><p>读取UV3的锚点信息并转换到世界空间下为AnchorsPosWS</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half variationValue = Fract(AnchorsPosWS.x + AnchorsPosWS.z + VertexColor.r);half2 angleXZ = Sin(PositionWS.xz * _Scale + variationValue + _Speed * _Time );half2 finalAngleXZ = angleXZ * _Amplitude * _MaxBendValue * VertexColor.g;//finalAngleXZ.x 为绕着Z轴旋转的角度//finalAngleXZ.Z 为绕着X轴旋转的角度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算旋转的角度 AngleY</p><pre class="line-numbers language-none"><code class="language-none">half variationValue = Fract(AnchorsPosWS.x + AnchorsPosWS.z + VertexColor.r);half2 angleY = Sin(PositionWS.x * _Scale + variationValue + _Speed * _Time );half2 finalAngleY = angleY * _Amplitude * _MaxRollingValue * VertexColor.b;//finalAngleY 为绕着Y轴旋转的角度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、震动"><a href="#三、震动" class="headerlink" title="三、震动"></a>三、震动</h1><h4 id="震动的计算方式"><a href="#震动的计算方式" class="headerlink" title="震动的计算方式"></a>震动的计算方式</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half variationValue = Fract(AnchorsPosWS.x + AnchorsPosWS.z + VertexColor.r) * _FlutterValue;half positionSum = PositionWS.x + PositionWS.y + PositionWS.z;half FlutterWave = Sin(positionSum * _Scale * 10 + variationValue + _Speed * _Time );half3 FinalFlutter = half3(FlutterWave,0,FlutterWave);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、最终结果"><a href="#四、最终结果" class="headerlink" title="四、最终结果"></a>四、最终结果</h1><p>为了较好的效果，将上述结算的结果作为模型空间中的变化。 使用模型空间坐标减去模型空间的锚点Anchor（因为旋转的计算，没有加上锚点，默认是在原点进行计算的），使得还原到原点，然后应用变化量，最后加加上锚点坐标记得最终模型空间顶点坐标。</p>]]></content>
      
      
      <categories>
          
          <category> TA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 草地渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青青草原——概述及目录</title>
      <link href="/BloodSoul.github.io/2021/08/07/ta/grass/qing-qing-cao-yuan-gai-shu-ji-mu-lu/"/>
      <url>/BloodSoul.github.io/2021/08/07/ta/grass/qing-qing-cao-yuan-gai-shu-ji-mu-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、产生的原因"><a href="#一、产生的原因" class="headerlink" title="一、产生的原因"></a>一、产生的原因</h1><p>公司最近在做新的项目，项目内草效果感觉不是很好，自己对此也比较感兴趣，就趁着下班时间，对草地渲染进行研究学习，将学习的内容进行总结记录，方便自己查阅。如果恰巧能帮助到别人，那就更好了。</p><h1 id="二、最终效果"><a href="#二、最终效果" class="headerlink" title="二、最终效果"></a>二、最终效果</h1><iframe class="bilibili" src="//player.bilibili.com/player.html?aid=419673697&amp;bvid=BV123411r7oF&amp;cid=384526909&amp;page=1&amp;high_quality=1&amp;high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E9%9D%92%E9%9D%92%E8%8D%89%E5%8E%9F%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="青青草原效果图"></p><h1 id="三、系列目录"><a href="#三、系列目录" class="headerlink" title="三、系列目录"></a>三、系列目录</h1><ol><li>草自身的弯曲、震动、旋转</li><li>草的颜色渐变、AO模拟、简易透光</li><li>草的俯视矫正、大小渐变</li><li>打破统一的随机颜色效果</li><li>草的全局风力效果</li><li>草的全局多目标交互效果</li></ol>]]></content>
      
      
      <categories>
          
          <category> TA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 草地渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建 Markdown 文档编写环境</title>
      <link href="/BloodSoul.github.io/2021/07/11/block/cong-ling-da-jian-markdown-wen-dang-bian-xie-huan-jing/"/>
      <url>/BloodSoul.github.io/2021/07/11/block/cong-ling-da-jian-markdown-wen-dang-bian-xie-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Markdown-编辑器-Typora-环境配置"><a href="#一、Markdown-编辑器-Typora-环境配置" class="headerlink" title="一、Markdown 编辑器 Typora 环境配置"></a>一、Markdown 编辑器 Typora 环境配置</h1><blockquote><ol><li>下载并安装 Typora <a href="https://www.typora.io/">链接</a></li><li>下载 OneDark 主题皮肤 <a href="https://theme.typora.io/theme/OneDark/">链接</a></li><li>配置 OneDark 主题<ol><li>在Typora左上角 <code>文件-&gt;偏好设置-&gt;外观-&gt;打开主题文件夹</code><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210711113853219.png" style="zoom: 50%;"> </li></ol></li><li>将解压后的 onedark.css 文件拷贝到其中</li><li>重启 Typora，在顶部选择<code>主题-&gt;Onedark</code></li></ol></li></ol></blockquote><h1 id="二、配置图床"><a href="#二、配置图床" class="headerlink" title="二、配置图床"></a>二、配置图床</h1><blockquote><ol><li>下载 PicGo <a href="https://molunerfinn.com/PicGo/">链接</a></li><li>按照 PicGo 配置手册，配置通信Token <a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">链接</a></li><li>在 Typora 中配置 PiGo<ol><li>在Typora左上角 文件-&gt;偏好设置-&gt;图像按照下图配置</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210711113225363.png" style="zoom: 50%;"> </li></ol></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
            <tag> Zero2One </tag>
            
            <tag> Config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建个人 Hexo 博客</title>
      <link href="/BloodSoul.github.io/2021/07/10/block/cong-ling-da-jian-ge-ren-hexo-bo-ke/"/>
      <url>/BloodSoul.github.io/2021/07/10/block/cong-ling-da-jian-ge-ren-hexo-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h4 id="a-下载并安装-Node-js"><a href="#a-下载并安装-Node-js" class="headerlink" title="a. 下载并安装 Node.js"></a>a. 下载并安装 <a href="https://nodejs.org/zh-cn/download/"><strong>Node.js</strong></a></h4><p>打开 cmd 验证安装是否成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示出对应版本号，表示安装成功</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710194608900.png"> </p><p>查看 NPM 是否安装成功，输入如下指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710200815627.png"> </p><h4 id="b-下载并安装-Git-客户端"><a href="#b-下载并安装-Git-客户端" class="headerlink" title="b. 下载并安装 Git 客户端"></a>b. 下载并安装 <a href="https://git-scm.com/downloads"><strong>Git 客户端</strong></a></h4><p>打开 cmd 验证安装是否成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示出对应版本号，表示安装成功</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710195514143.png"> </p><p>新建博客工程要存放的文件夹，我这边使用 Hexo_Matery，在Hexo_Matery文件夹内，鼠标右键-&gt;Git Bash Here，输入如下指令，设置淘宝源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二、搭建-Hexo"><a href="#二、搭建-Hexo" class="headerlink" title="二、搭建 Hexo"></a>二、搭建 Hexo</h1><h4 id="a-初始-Hexo-指令集"><a href="#a-初始-Hexo-指令集" class="headerlink" title="a. 初始 Hexo 指令集"></a>a. 初始 Hexo 指令集</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="b-初始化-Hexo-博客"><a href="#b-初始化-Hexo-博客" class="headerlink" title="b. 初始化 Hexo 博客"></a>b. 初始化 Hexo 博客</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="c-进行本地预览博客"><a href="#c-进行本地预览博客" class="headerlink" title="c. 进行本地预览博客"></a>c. 进行本地预览博客</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开浏览器输入：<a href="http://localhost:4000/">http://localhost:4000</a>，能够正常预览，表示搭建成功！</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710211816860.png"> </p><h1 id="三、将-Hexo-部署到-GitHub"><a href="#三、将-Hexo-部署到-GitHub" class="headerlink" title="三、将 Hexo 部署到 GitHub"></a>三、将 Hexo 部署到 GitHub</h1><h4 id="a-配置-GitHub-环境"><a href="#a-配置-GitHub-环境" class="headerlink" title="a. 配置 GitHub 环境"></a>a. 配置 GitHub 环境</h4><blockquote><ul><li>注册 GitHub 账号：<a href="https://github.com/">https://github.com/</a></li><li>设置本地 Git 与 远端 GitHub 的密钥<ul><li>在你的博客文件夹内（我的示例为<code>Hexo_Matery文件夹</code>）鼠标右键-&gt;Git Bash Here</li><li>配置你的 git 全局账号，命令输入如下：<ul><li>git config –global user.name “你的Github用户名”</li><li>git config –global user.email “你的Github邮箱” </li></ul></li><li>配置 ssh key，命令输入如下：<ul><li>ssh-keygen -t rsa -C “你的Github邮箱”    (生成新的公钥)</li><li>less ~/.ssh/id_rsa.pub    （查看公钥，并将其复制）</li></ul></li><li>在 <a href="https://github.com/settings/keys">GitHub 设置界面</a>填入密钥</li><li>验证密钥是否通过，命令输入如下：<ul><li>ssh -T <a href="mailto:git@github.com">git@github.com</a></li></ul></li></ul></li><li>新建一个仓库资源 <a href="https://github.com/new">https://github.com/new</a>，该资源的 SSH Clone 地址后面要用到</li></ul></blockquote><h4 id="b-编写-Hexo-博客的部署项"><a href="#b-编写-Hexo-博客的部署项" class="headerlink" title="b. 编写 Hexo 博客的部署项"></a>b. 编写 Hexo 博客的部署项</h4><blockquote><ul><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，打开 <code>_config.yml</code> 文件</li><li>在 deploy 项，按如下输入：<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710220753733.png" style="zoom: 80%;"> </li><li><code>url</code> 就是项目的 SSH Clone 地址，<code>branch</code> 为需要部署到的分支名称</li></ul></li></ul></blockquote><h4 id="c-部署并推送到-GitHub"><a href="#c-部署并推送到-GitHub" class="headerlink" title="c. 部署并推送到 GitHub"></a>c. 部署并推送到 GitHub</h4><blockquote><ul><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，鼠标右键-&gt;Git Bash Here</li><li>安装 GitHub 部署插件，输入：npm install hexo-deployer-git –save</li><li>进行 GitHub 部署，输入：hexo clean &amp;&amp; hexo g&amp;&amp; hexo d</li><li>在你刚才创建的 GitHub 资源项目中，选择 <code>Settings</code></li><li>在 <code>Settings</code> 界面中选择左下角的 <code>Pages</code>，选择对应分支（示例为 <code>master</code>），然后点击 <code>Save</code></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710222300137.png" style="zoom: 50%;"> </li><li>中间生成的链接即是你的博客地址</li></ul></blockquote><h4 id="d-处理部署到-GitHub-上排版丢失问题"><a href="#d-处理部署到-GitHub-上排版丢失问题" class="headerlink" title="d. 处理部署到 GitHub 上排版丢失问题"></a>d. 处理部署到 GitHub 上排版丢失问题</h4><blockquote><ul><li>复制 c 步骤最后生成的地址</li><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，打开 <code>_config.yml</code> 文件</li><li>将地址填入 <code>url</code> 项</li><li>并将 <code>root</code> （没有这手动写一个）项改成 “/you_project_name/“</li><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，鼠标右键-&gt;Git Bash Here，输入：hexo clean &amp;&amp; hexo g&amp;&amp; hexo d</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710223221224.png" style="zoom:80%;"> </li></ul></blockquote><h1 id="四、使用-Matery-主题美化"><a href="#四、使用-Matery-主题美化" class="headerlink" title="四、使用 Matery 主题美化"></a>四、使用 Matery 主题美化</h1><p>详细使用方式请参见我的 <a href="https://klj35.github.io/BloodSoul.github.io/2021/07/02/block/matery-zhu-ti-shi-yong-shuo-ming/">Matery 主题使用说明</a></p><h1 id="五、进行备份"><a href="#五、进行备份" class="headerlink" title="五、进行备份"></a>五、进行备份</h1><blockquote><ul><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，鼠标右键-&gt;Git Bash Here</li><li>安装备份插件，输入指令：npm install hexo-git-backup –save</li><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，打开 <code>_config.yml</code> 文件，添加如下配置</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710225730474.png" style="zoom:80%;"> </li><li>仓库逗号后面的是备份成的分支名称</li><li>在 Git Bash 内输入命令：hexo b</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
            <tag> Zero2One </tag>
            
            <tag> Config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 常用命令说明</title>
      <link href="/BloodSoul.github.io/2021/07/10/block/hexo-chang-yong-ming-ling-shuo-ming/"/>
      <url>/BloodSoul.github.io/2021/07/10/block/hexo-chang-yong-ming-ling-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h1><h4 id="新建一个-Markdown-文档"><a href="#新建一个-Markdown-文档" class="headerlink" title="新建一个 Markdown 文档"></a>新建一个 Markdown 文档</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"markdown_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建一个页面"><a href="#新建一个页面" class="headerlink" title="新建一个页面"></a>新建一个页面</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"page_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建一个草稿"><a href="#新建一个草稿" class="headerlink" title="新建一个草稿"></a>新建一个草稿</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft <span class="token string">"draft_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo publish <span class="token string">"draft_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="清除缓存文件-db-json-和已生成的静态文件-public"><a href="#清除缓存文件-db-json-和已生成的静态文件-public" class="headerlink" title="清除缓存文件 (db.json) 和已生成的静态文件 (public)"></a>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="本地运行静态文件"><a href="#本地运行静态文件" class="headerlink" title="本地运行静态文件"></a>本地运行静态文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="备份到远端"><a href="#备份到远端" class="headerlink" title="备份到远端"></a>备份到远端</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo <span class="token builtin class-name">help</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Windows-常用组合命令"><a href="#Windows-常用组合命令" class="headerlink" title="Windows 常用组合命令"></a>Windows 常用组合命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d <span class="token operator">&amp;&amp;</span> hexo b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="官方使用说明（https-hexo-io-zh-cn-docs-commands）"><a href="#官方使用说明（https-hexo-io-zh-cn-docs-commands）" class="headerlink" title="官方使用说明（https://hexo.io/zh-cn/docs/commands）"></a><strong>官方使用说明</strong>（<a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a>）</h6>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery 主题使用说明</title>
      <link href="/BloodSoul.github.io/2021/07/02/block/matery-zhu-ti-shi-yong-shuo-ming/"/>
      <url>/BloodSoul.github.io/2021/07/02/block/matery-zhu-ti-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-matery"><a href="#hexo-theme-matery" class="headerlink" title="hexo-theme-matery"></a><a href="https://github.com/blinkfox/hexo-theme-matery/network">hexo-theme-matery</a></h1><p><a href="README.md">🇺🇸English Document</a> | <a href="http://blinkfox.com/">国内访问示例 (http://blinkfox.com)</a> | <a href="https://blinkfox.github.io/">Github 部署演示示例 (https://blinkfox.github.io)</a> | QQ 交流群1（已满）: <a href="https://jq.qq.com/?_wv=1027&amp;k=5zMDYHT"><code>926552981</code></a> | QQ 交流群2（推荐）: <a href="https://jq.qq.com/?_wv=1027&amp;k=53q2Ayp"><code>971887688</code></a></p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>             <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README.md">CHANGELOG.md</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
            <tag> Theme </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
