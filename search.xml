<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SRP_17_FXAA</title>
      <link href="/BloodSoul.github.io/2022/12/22/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-17-fxaa/"/>
      <url>/BloodSoul.github.io/2022/12/22/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-17-fxaa/</url>
      
        <content type="html"><![CDATA[<p>FXAA 是对 Gamma 空间下的 Luma 进行处理的</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185312972.png" alt="image-20221222185312972"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185317786.png" alt="image-20221222185317786"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185324424.png" alt="image-20221222185324424"></p><p>因为我们对绿色比较敏感，我们可以直接用绿色通道的值来代替 luma</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185335290.png" alt="image-20221222185335290"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185339931.png" alt="image-20221222185339931"></p><p>FXAA 原理</p><ul><li><p>Step1：通过查找纹理本身及周边4个纹素</p></li><li><p>Step2：找到亮度最高和最低的纹素和一个范围</p></li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185409459.png" alt="image-20221222185409459"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185414684.png" alt="image-20221222185414684"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185420791.png" alt="image-20221222185420791"></p><p>Step3：计算BlendFactor</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185456919.png" alt="image-20221222185456919"></p><p>加入斜对角的权重计算</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185506130.png" alt="image-20221222185506130"></p><p>斜对角的权重低于临边权重，是临边权重的一半</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185516995.png" alt="image-20221222185516995"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185526837.png" alt="image-20221222185526837"></p><p>Step4：确定 BlendDirection</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185548444.png" alt="image-20221222185548444"></p><ul><li>水平方向上：左右相加减去两次中间值，并取绝对值，作为水平方向判断依据</li><li>垂直方向上：与上面相同</li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185600846.png" alt="image-20221222185600846"></p><p>加上斜向方向的计算，可以提高精度</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185617636.png" alt="image-20221222185617636"></p><p>红色为计算出的水平边，绿色为垂直边</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185630051.png" alt="image-20221222185630051"></p><ul><li>如果是水平的边，我们应该按照垂直方向进行Blend；如果是垂直的边，我们应该按照水平方向Blend</li><li>详细来说：我们应该按照水平的正方向还是水平的负方向进行Blend呢？通过水平的正负梯度大小来决定</li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222185641649.png" alt="image-20221222185641649"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_16_RenderScale</title>
      <link href="/BloodSoul.github.io/2022/12/22/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-16-renderscale/"/>
      <url>/BloodSoul.github.io/2022/12/22/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-16-renderscale/</url>
      
        <content type="html"><![CDATA[<ul><li>_ScreenParams 参数</li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184749368.png" alt="image-20221222184749368"></p><ul><li><p>Bloom 效果依赖于 RT 大小，修改 RenderScale     会使效果发生变化</p></li><li><ul><li>分辨率越小，bloom的范围就越大；分辨率越大，bloom的范围就越小</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184816229.png" alt="image-20221222184816229"> </p><p>HDR 升采样或者降采样都会造成问题。因此 RenderScale 会导致结果有细微的错误</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184842651.png" alt="image-20221222184842651"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184848381.png" alt="image-20221222184848381"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184855158.png" alt="image-20221222184855158"></p><p>解决办法是在处理完后，通过 tonemapping 将结果从 HDR 转换到 LDR 然后进行最后到升采样或者降采样</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP-15-Particles</title>
      <link href="/BloodSoul.github.io/2022/12/22/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-15-particles/"/>
      <url>/BloodSoul.github.io/2022/12/22/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-15-particles/</url>
      
        <content type="html"><![CDATA[<h4 id="SV-POSITION"><a href="#SV-POSITION" class="headerlink" title="SV_POSITION"></a>SV_POSITION</h4><ul><li><p>在 Vertex 阶段是裁剪空间的坐标</p></li><li><p>在 Fragment 阶段是进行变换后的坐标。</p></li><li><ul><li><p>其xy是屏幕的坐标纹素，如果屏幕大小是 1920 * 1080。那么X的范围就是【0，1920】、Y就是【0，1080】</p><ul><li><p>其w是观察空间（view-space）的深度值，这个深度值用于透视除法，这个深度是到相机XY平面的距离，不是到 near plane 的距离</p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183556675.png" alt="image-20221222183556675"></p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183603720.png" alt="image-20221222183603720"></p></li><li><p>在正交相机中，这个值永远等于1</p><ul><li><p>由于没有透视除法 w 的值永远等于1</p></li><li><p>SV_POSITION     的 z 值就是真正写入到深度图中的值，范围是【0，1】，而且在正交相机中是线性的</p></li><li><p>获取观察空间中的深度值（深度是到XY平面的距离）得方法：</p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183801011.png" alt="image-20221222183801011"></p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183808173.png" alt="image-20221222183808173"></p></li></ul></li></ul></li></ul></li></ul><h4 id="观察空间线性深度重建"><a href="#观察空间线性深度重建" class="headerlink" title="观察空间线性深度重建"></a>观察空间线性深度重建</h4><p>positionSS 是正常</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183919017.png" alt="image-20221222183919017"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183929114.png" alt="image-20221222183929114"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183944542.png" alt="image-20221222183944542"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183956044.png" alt="image-20221222183956044"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184003566.png" alt="image-20221222184003566"></p><h4 id="Particle"><a href="#Particle" class="headerlink" title="Particle"></a>Particle</h4><p>Hard Particle</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184039416.png" alt="image-20221222184039416"></p><p>Soft Particle</p><p>根据和场景物体的深度进行对比，越贴近时，alpha 越小</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184113155.png" alt="image-20221222184113155"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184121674.png" alt="image-20221222184121674"></p><h4 id="通过全屏三角形-Copy-Depth-贴图的方法"><a href="#通过全屏三角形-Copy-Depth-贴图的方法" class="headerlink" title="通过全屏三角形 Copy Depth 贴图的方法"></a>通过全屏三角形 Copy Depth 贴图的方法</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184145129.png" alt="image-20221222184145129"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184154910.png" alt="image-20221222184154910"></p><h4 id="扭曲方法"><a href="#扭曲方法" class="headerlink" title="扭曲方法"></a>扭曲方法</h4><p>Step1：在不透明物体渲染完成后，生成一张颜色贴图</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184315051.png" alt="image-20221222184315051"></p><p>Step2：通过计算屏幕空间 UV，并结合扰动UV值，采样颜色贴图</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184331868.png" alt="image-20221222184331868"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222184345258.png" alt="image-20221222184345258"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPR_14_MultipleCameras</title>
      <link href="/BloodSoul.github.io/2022/12/16/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-14-multiplecameras/"/>
      <url>/BloodSoul.github.io/2022/12/16/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-14-multiplecameras/</url>
      
        <content type="html"><![CDATA[<ul><li>相机叠加时，第一个主相机混合模式应该是 One Zero，其他的应该是 One     OneMinusSrcAlpha</li><li>渲染时，会先渲染有 TargetTexture     的相机，在渲染其他相机</li><li>如果有 TargetTexture     相机默认输出就会到这个张RT上，不会显示到屏幕上。</li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222182548948.png" alt="image-20221222182548948"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222182614427.png" alt="image-20221222182614427"> </p><p>在C#中默认情况下，int 转换成 float 位的结构会发生变化，在按位操作中(比如RenderLayerMask)就无法进行。不改变位的转换方式如下。按照这种方式就可以安全的将int位操作传输到GPU端的shader 中</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222182652752.png" alt="image-20221222182652752"> </p><p>在Shader 中进行位操作使用 uint数据类型。安全的将float转换成 uint 类型，且不进行位结构破坏的方法是用 asuint 方法</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222182731522.png" alt="image-20221222182731522"></p><p>Shader 中的按位操作在 OpenGL ES 2.0 版本以上才可以使用</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222182757541.png" alt="image-20221222182757541"></p><ul><li><p>Unity 自定义 Attribute 及其 GUI 绘制</p></li><li><ul><li><p>Step1: 继承 UnityEngine 的 PropertyAttribute</p><pre><code>![image-20221222183011682](https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183011682.png) </code></pre></li></ul></li><li><ul><li><p>Step2：创建一个绘制类，继承 PropertyDrawer，并使用CustomPropertyDrawer指定我们的Attribute类，并重写 OnGUI 方法</p><pre><code>![image-20221222183125593](https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183125593.png)</code></pre><ul><li><p>Step3：使用这个属性</p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183156684.png" alt="image-20221222183156684"></p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221222183203996.png" alt="image-20221222183203996"></p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_13_ColorGrading</title>
      <link href="/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-13-colorgrading/"/>
      <url>/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-13-colorgrading/</url>
      
        <content type="html"><![CDATA[<h4 id="Post-Exposure，曝光"><a href="#Post-Exposure，曝光" class="headerlink" title="Post Exposure，曝光"></a>Post Exposure，曝光</h4><ul><li><ul><li>顺序：在所有效果应用后，所有后处理应用前<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223909813.png" alt="image-20221215223909813"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223916392.png" alt="image-20221215223916392"> </li></ul></li></ul></li></ul><h4 id="Contrast-对比度"><a href="#Contrast-对比度" class="headerlink" title="Contrast 对比度"></a>Contrast 对比度</h4><ul><li><ul><li>通过先减去中灰值，然后在乘以缩放值，最后在加上中灰值<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223949054.png" alt="image-20221215223949054"> </li><li>在 LogC 空间中进行比在 linear 空间中进行效果更好<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224029954.png" alt="image-20221215224029954"> </li></ul></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224042189.png" alt="image-20221215224042189"> </li><li>在 LogC 空间下计算的结果可能为负，需要进行处理<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224059639.png" alt="image-20221215224059639"> </li></ul></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224118815.png" alt="image-20221215224118815"></li></ul></li></ul></li></ul><h4 id="Color-Filter"><a href="#Color-Filter" class="headerlink" title="Color Filter"></a>Color Filter</h4><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224141714.png" alt="image-20221215224141714"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224147817.png" alt="image-20221215224147817"> </li></ul><h4 id="Hue-Shift-色相转变"><a href="#Hue-Shift-色相转变" class="headerlink" title="Hue Shift 色相转变"></a>Hue Shift 色相转变</h4><ul><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224215334.png" alt="image-20221215224215334"> </p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224232870.png" alt="image-20221215224232870"> </p></li></ul><h4 id="Saturation-饱和度"><a href="#Saturation-饱和度" class="headerlink" title="Saturation 饱和度"></a>Saturation 饱和度</h4><ul><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224252601.png" alt="image-20221215224252601"> </p></li><li><p>总结</p><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224330882.png" alt="image-20221215224330882"></li></ul></li></ul><h4 id="WhiteBalance-白平衡"><a href="#WhiteBalance-白平衡" class="headerlink" title="WhiteBalance 白平衡"></a>WhiteBalance 白平衡</h4><ul><li>白平衡是在 LMS 色彩空间作用的</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224414804.png" alt="image-20221215224414804"></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224425323.png" alt="image-20221215224425323"> </li><li><a href="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224425323.png">https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224425323.png</a></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224507106.png" alt="image-20221215224507106"></li></ul><h4 id="Split-toning"><a href="#Split-toning" class="headerlink" title="Split toning"></a>Split toning</h4><ul><li><ul><li>按亮度进行区分明暗区域，分别应用不同映射，需要在 Gamma 空间中计算<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224525576.png" alt="image-20221215224525576"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224615386.png" alt="image-20221215224615386"></li></ul></li></ul></li></ul><h4 id="Channel-Mixer"><a href="#Channel-Mixer" class="headerlink" title="Channel Mixer"></a>Channel Mixer</h4><ul><li><p>实际是是一个3x3矩阵，行是输出颜色，列是输入颜色</p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224744878.png" alt="image-20221215224744878"> </p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224754343.png" alt="image-20221215224754343"></p></li></ul><h4 id="Shadows-Midtones-Highlights"><a href="#Shadows-Midtones-Highlights" class="headerlink" title="Shadows Midtones Highlights"></a>Shadows Midtones Highlights</h4><p>线性空间处理</p><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224813717.png" alt="image-20221215224813717"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224818549.png" alt="image-20221215224818549"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224838702.png" alt="image-20221215224838702"> </li></ul><h4 id="ACES-Color-Space"><a href="#ACES-Color-Space" class="headerlink" title="ACES Color Space"></a>ACES Color Space</h4><p>应用ACES时，颜色调整需要在 ACES 颜色空间下计算</p><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224923812.png" alt="image-20221215224923812"> </li><li>从线性到ACES转换 unity_to_ACES</li><li>从ACES 到 LogC转换 ACES_to_ACEScc</li><li>ACES_to_ACEScg</li><li>AcesLuminance ：ACES颜色空间下的亮度计算<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224937099.png" alt="image-20221215224937099"></li></ul></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215224943157.png" alt="image-20221215224943157"></li></ul><h4 id="LUT"><a href="#LUT" class="headerlink" title="LUT"></a>LUT</h4><ul><li><p>产生原因：因为对每个像素都进行 ColorGrading     会比较费，替代方案是记录变化到 LUT 贴图中，再通过查找 LUT 应用     ColorGrading 效果。</p></li><li><p>实现方法：</p></li><li><ul><li>Step1: 将屏幕UV 通过 GetLutStripValue 获取默认 LUT 数据<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215225008326.png" alt="image-20221215225008326"> </li><li>Step2：记录颜色变化</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215225018613.png" alt="image-20221215225018613"> </li><li>Step3：通过 ApplyLut2D 方法应用 LUT 记录的信息</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215225041713.png" alt="image-20221215225041713"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215225049248.png" alt="image-20221215225049248"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215225056919.png" alt="image-20221215225056919"> </li></ul></li></ul></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215225132711.png" alt="image-20221215225132711"></p></li></ul><p><strong>LUT Banding</strong></p><p>当LUT分辨率不足或者应用了 Point 采样时，会出现带状条纹</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215230135131.png" alt="image-20221215230135131"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_12_HDR</title>
      <link href="/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-12-hdr/"/>
      <url>/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-12-hdr/</url>
      
        <content type="html"><![CDATA[<ul><li>默认LDR 贴图格式<ul><li>R8G8B8A8_SRGB<ul><li>单通道 8 bit，RGB 值存储在 sRGB 空间</li></ul></li></ul></li><li>默认HDR贴图格式<ul><li>R16G16B16A16_SFloat<ul><li>单通道 16 bit 有符号的 float 类型，值在 linear space</li></ul></li></ul></li></ul><ul><li><p>使用HDR格式贴图时，在帧调试器上显示会偏黑，因为他存储的线性数据，被错误的按sRGB显示了</p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222713532.png" alt="image-20221215222713532"></p></li><li><p>HDR 缺点：Fighting Fireflies</p><ul><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222751151.png" alt="image-20221215222751151"></p></li><li><p>解决办法</p><ul><li>在 downsample 时采样 6x6 box filter</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222819204.png" alt="image-20221215222819204"></li><li>使用 Luminance（亮度）权重，将亮度有效的分散到其他像素上</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222837926.png" alt="image-20221215222837926"></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222844003.png" alt="image-20221215222844003"></li><li>因为在采样后紧接着进行了高斯模糊，我们可以去掉相邻的（上下左右）四个采样点，有9个减少到5个</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222856479.png" alt="image-20221215222856479"></li><li>减弱后的效果（并没有完全消除，只是使他们看起来不那么明显）</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222921538.png" alt="image-20221215222921538"></li></ul></li></ul></li><li><p>Tone Mapping</p></li><li><ul><li><p>产生原因：</p><ul><li><ul><li>使用HDR后会使最后输出的颜色值超过1，但是最终呈现在屏幕上的又会被强制clip到 0..1，导致无法表达强度超过1的颜色。<ul><li>为了能够正确表达，需要对颜色重新映射，使其回到 0..1 的范围。但有不能直接线性映射，不然整体就太黑了，效果不好。</li><li>不同映射效果会呈现不同的视觉效果，这个映射就叫 Tone Mapping</li></ul></li></ul></li><li><p>Reinhard 方式</p><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223014730.png" alt="image-20221215223014730"></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223019394.png" alt="image-20221215223019394"></li><li>当值非常大时，可能会引发潜在的问题，我们强制限制在 60以内</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223035569.png" alt="image-20221215223035569"></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223058346.png" alt="image-20221215223058346"></li><li>Neutral 方式</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223122037.png" alt="image-20221215223122037"></li><li>John Hable <a href="http://filmicworlds.com/blog/filmic-tonemapping-operators/">http://filmicworlds.com/blog/filmic-tonemapping-operators/</a></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223136523.png" alt="image-20221215223136523"></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223142575.png" alt="image-20221215223142575"></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223200170.png" alt="image-20221215223200170"></li><li>ACES 全球标准方式 <a href="https://acescentral.com/">https://acescentral.com/</a></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223217172.png" alt="image-20221215223217172"></li><li>ACES 方式与其他方式相比，他进行了色调偏移，把颜色往白色进行移动，这与现实相符，可以很容易的找出最亮的部分，达到与电影相同的效果</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215223234561.png" alt="image-20221215223234561"></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_11_PostFX</title>
      <link href="/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-11-postfx/"/>
      <url>/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-11-postfx/</url>
      
        <content type="html"><![CDATA[<p><a href="https://catlikecoding.com/unity/tutorials/custom-srp/post-processing/">https://catlikecoding.com/unity/tutorials/custom-srp/post-processing/</a></p><ul><li><p>用一个全屏三角形和使用一个面（四个点，两个三角形）的好处</p></li><li><ul><li><p>增加本地缓存命中</p></li><li><p>避免对角线的像素绘制两次问题（因为两个三角公用，每个三角形渲染一次，渲染两次）</p></li><li><p>顶点从6个减少到3个</p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221259142.png" alt="image-20221215221259142"></p></li></ul></li><li><p>全屏三角形原理</p></li><li><ul><li><p><a href="https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-semantics">https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-semantics</a></p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221416581.png" alt="image-20221215221416581"></p></li><li><p>Unity裁剪空间坐标系为左手坐标系，三角形构造顺序为顺时针</p></li><li><p>红线处为原始三角形，顶点顺序为（0，1，2），UV为（0..1）<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221443430.png" alt="image-20221215221443430"></p></li><li><p>现将三角形放大两倍，顶点顺序为（-1，3，3），UV也相应放大两倍（0..2）。黄色区域刚好就是UV为0..1的矩形区域</p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221524872.png" alt="image-20221215221524872"></p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221539456.png" alt="image-20221215221539456"></p><p>  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221618274.png" alt="image-20221215221618274"></p></li></ul></li><li><p>Bloom</p><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221659812.png" alt="image-20221215221659812"></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221708097.png" alt="image-20221215221708097"></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221713500.png" alt="image-20221215221713500"></li></ul></li><li><p>分离的滤波原理</p><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221748949.png" alt="image-20221215221748949"></li></ul></li><li><p>Blur Filter 的权重值由来</p><ul><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221806563.png" alt="image-20221215221806563"></p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221817444.png" alt="image-20221215221817444"></p></li></ul></li><li><p>Bilinear Filtering upsampling 问题：在高收缩率或者运动的图像升采样时，会产生块状斑纹</p></li><li><ul><li><p>Although the Gaussian filter produces smooth results we still performing bilinear filtering when upsampling, which can give the glow a blocky appearance. This is most obvious where contract in the original image is high, especially when in motion.</p><ul><li><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221859155.png" alt="image-20221215221859155"></li></ul></li></ul></li></ul></li><li><p>Bicubic Upsampling 可以解决这个问题</p><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221959145.png" alt="image-20221215221959145"></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215221945117.png" alt="image-20221215221945117"></li></ul></li><li><p>Bloom Threshold</p><ul><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222018544.png" alt="image-20221215222018544"></p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222027598.png" alt="image-20221215222027598"></p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222039306.png" alt="image-20221215222039306"></p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215222054811.png" alt="image-20221215222054811"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_10_PointAndSpotShadows</title>
      <link href="/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-10-pointandspotshadows/"/>
      <url>/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-10-pointandspotshadows/</url>
      
        <content type="html"><![CDATA[<p><a href="https://catlikecoding.com/unity/tutorials/custom-srp/point-and-spot-shadows/">https://catlikecoding.com/unity/tutorials/custom-srp/point-and-spot-shadows/</a></p><p>Spot Shadow texelSize 计算，以及 normalBias 的使用</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215215327569.png" alt="image-20221215215327569"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215215357181.png" alt="image-20221215215357181"></p><p>添加偏移值，避免采样到边界</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215215448446.png" alt="image-20221215215448446"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215215505726.png" alt="image-20221215215505726"></p><p>Point 如果需要实时阴影，他所投射的是一个Cubemap，需要六个面，计算量是 SpotLight的六倍</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215215609921.png" alt="image-20221215215609921"></p><p>优化的写法如下。原因是 Cubemap的fov总是90度。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215215714372.png" alt="image-20221215215714372"></p><p>结合下面这个图片解释</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215215727877.png" alt="image-20221215215727877"></p><p>因为我们没有渲染到标准的Cubemap中，而是使用 tile 作为cubemap，我们采样的时候不能使用采样cubemap的标准模式。</p><p>​    使用CubeMapFaceID 计算面 ID</p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215215757691.png" alt="image-20221215215757691"></p><p>​    面 ID 对应 C# 层的索引。+X，-X，+Y，-Y，+Z，-Z</p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215215815723.png" alt="image-20221215215815723"></p><p>​    The plane normals have to point in the opposite direction as the faces, like the spot direction points toward the light。</p><p>​    灯光方向是从物体表面指向灯光，和 Cubmap Face 是相反的方向</p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215215931328.png" alt="image-20221215215931328"></p><p>通过在渲染阴影时，增大FOV角度，避免采样 tile 的 cubemap 时，采样到边界的问题</p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215220001016.png" alt="image-20221215220001016"></p><p>point light 和 spot light 在mixed选项下，才会烘焙阴影到 shadowmask</p><p><strong>不理解的地方：</strong></p><ul><li>SpotLight<ul><li>不同角度所应用的法线偏移量不相同？为什么需要计算纹素？<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215220141631.png" alt="image-20221215220141631"></li></ul></li><li>反转矩阵</li></ul><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215220216622.png" alt="image-20221215220216622"></p><p>​    反转前效果</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215220353886.png" alt="image-20221215220353886"></p><p>​    反转后效果</p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215220438014.png" alt="image-20221215220438014"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_09_PointAndSpotLight</title>
      <link href="/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-09-pointandspotlight/"/>
      <url>/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-09-pointandspotlight/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Point"><a href="#一、Point" class="headerlink" title="一、Point"></a>一、Point</h1><p>原文链接：<a href="https://catlikecoding.com/unity/tutorials/custom-srp/point-and-spot-lights/">https://catlikecoding.com/unity/tutorials/custom-srp/point-and-spot-lights/</a></p><ul><li>Point Light 距离衰减计算公式</li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215212554013.png" alt="image-20221215212554013"> </p><ul><li>灯光强度的范围衰减计算公式</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215212756218.png" alt="image-20221215212756218"> </li></ul><h1 id="二、SpotLight"><a href="#二、SpotLight" class="headerlink" title="二、SpotLight"></a>二、SpotLight</h1><ul><li>Spot Angle 计算公式</li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215213146478.png" alt="image-20221215213146478"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215213640089.png" alt="image-20221215213640089"></p><h3 id="三、修改烘焙衰减算法"><a href="#三、修改烘焙衰减算法" class="headerlink" title="三、修改烘焙衰减算法"></a>三、修改烘焙衰减算法</h3><p>unity 默认的烘焙距离衰减并不是平方反比的方式，需要按造下面的方式进行修改</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using Unity.Collections;using UnityEngine;using UnityEngine.Experimental.GlobalIllumination;using LightType = UnityEngine.LightType;namespace CustomRP{    public partial class CustomRenderPipeline    {        partial void InitializeForEditor();        partial void DisposeForEditor();#if UNITY_EDITOR        private static Lightmapping.RequestLightsDelegate _lightsDelegate =            (Light[] lights, NativeArray&lt;LightDataGI&gt; output) =&gt;            {                LightDataGI lightData = new LightDataGI();                for (int i = 0; i &lt; lights.Length; i++)                {                    Light light = lights[i];                    switch (light.type)                    {                        case LightType.Directional:                            DirectionalLight directionalLight = new DirectionalLight();                            LightmapperUtils.Extract(light, ref directionalLight);                            lightData.Init(ref directionalLight);                            break;                        case LightType.Point:                            PointLight pointLight = new PointLight();                            LightmapperUtils.Extract(light, ref pointLight);                            lightData.Init(ref pointLight);                            break;                        case LightType.Spot:                            SpotLight spotLight = new SpotLight();                            LightmapperUtils.Extract(light, ref spotLight);                            spotLight.innerConeAngle = light.innerSpotAngle * Mathf.Deg2Rad;                            spotLight.angularFalloff = AngularFalloffType.AnalyticAndInnerAngle;                            lightData.Init(ref spotLight);                            break;                        case LightType.Area:                            RectangleLight rectangleLight = new RectangleLight();                            LightmapperUtils.Extract(light, ref rectangleLight);                            rectangleLight.mode = LightMode.Baked;                            lightData.Init(ref rectangleLight);                            break;                        default:                            lightData.InitNoBake(light.GetInstanceID());                            break;                    }                    lightData.falloff = FalloffType.InverseSquared; // 设置灯光衰减为距离平反反比                    output[i] = lightData;                }            };        partial void InitializeForEditor()        {            Lightmapping.SetDelegate(_lightsDelegate);        }        partial void DisposeForEditor()        {            Lightmapping.ResetDelegate();        }        protected override void Dispose(bool disposing)        {            base.Dispose(disposing);                        DisposeForEditor();            _cameraRenderer.Dispose();        }#endif    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>烘焙衰减修改前</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/aa.png" alt="aa"></p><p>烘焙衰减修改后</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%871.png" alt="未命名图片1"></p><h1 id="四、注意事项："><a href="#四、注意事项：" class="headerlink" title="四、注意事项："></a>四、注意事项：</h1><ul><li><p>分离的 for 循环，最好使用不同的索引变量，否在在一些情况下 shader 编译会出问题<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215212350878.png" alt="image-20221215212350878"> </p></li><li><p>SpotLight的 inneAngle 需要使用 Light.innerSpotAngle 访问，他不包含在 VisibleLight里面</p></li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215214724402.png" alt="image-20221215214724402"> </p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_08_ComplexMaps</title>
      <link href="/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-08-complexmaps/"/>
      <url>/BloodSoul.github.io/2022/12/15/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-08-complexmaps/</url>
      
        <content type="html"><![CDATA[<p>aa</p><p><a href="https://catlikecoding.com/unity/tutorials/custom-srp/complex-maps/">https://catlikecoding.com/unity/tutorials/custom-srp/complex-maps/</a></p><ul><li>DetailMap 其范围是【-1，1】</li><li>DXT5nm</li></ul><p><strong>What does</strong> <strong>DXT5nm</strong> <strong>mean?</strong></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215211514456.png" alt="image-20221215211514456"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>decal</title>
      <link href="/BloodSoul.github.io/2022/11/24/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/decal/decal/"/>
      <url>/BloodSoul.github.io/2022/11/24/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/decal/decal/</url>
      
        <content type="html"><![CDATA[<h1 id="Plane-Projector"><a href="#Plane-Projector" class="headerlink" title="Plane Projector"></a>Plane Projector</h1><p>通过 raycast 动态计算相交的顶点，并生成 mesh 进行投射渲染。<a href="https://assetstore.unity.com/packages/tools/utilities/easy-decal-22867">详细计算方式请参考 EasyDecal 插件</a></p><p>适用于简单的表面</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221124111654937.png" alt="image-20221124111654937" style="zoom:67%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221124111744335.png"></p><h2 id="shader-注意点"><a href="#shader-注意点" class="headerlink" title="shader 注意点"></a>shader 注意点</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" "PreviewType"="Plane" }Blend SrcAlpha OneMinusSrcAlphaCull Off Lighting Off ZWrite OffOffset -1,-1 //这个可以防止 ZFightting<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h2><ul><li>Bake Mesh</li><li>Altas</li><li>Instance and CullingGroup</li></ul><h1 id="Box-Projector"><a href="#Box-Projector" class="headerlink" title="Box Projector"></a>Box Projector</h1><p>于 Plane 类似，通过 bounding box 计算相交的表面，并生成 mesh 进行投射渲染。<a href="https://assetstore.unity.com/packages/tools/utilities/easy-decal-22867">详细计算方式请参考 EasyDecal 插件</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221124111915610.png" alt="image-20221124111915610"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221124112125232.png"></p><h2 id="shader-注意点-1"><a href="#shader-注意点-1" class="headerlink" title="shader 注意点"></a>shader 注意点</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" "PreviewType"="Plane" }Blend SrcAlpha OneMinusSrcAlphaCull Off Lighting Off ZWrite OffOffset -1,-1 //这个可以防止 ZFightting<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化方法-1"><a href="#优化方法-1" class="headerlink" title="优化方法"></a>优化方法</h2><ul><li>Bake Mesh</li><li>Altas</li><li>Instance and CullingGroup</li></ul><h1 id="ScreenSpace-Projector"><a href="#ScreenSpace-Projector" class="headerlink" title="ScreenSpace Projector"></a>ScreenSpace Projector</h1><p>使用 box mesh，不用计算相交，但是需要读深度图，然后重建世界坐标后在变换到 Decal Cube Space 进行 clip 处理</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ZWrite On ZTest AlwaysOffset -1,-1Blend SrcAlpha OneMinusSrcAlphastruct Attributes{    float4 positionOS : POSITION;    float2 texcoord : TEXCOORD0;};struct Varyings{    float4 positionCS : SV_POSITION;    float3 positionWS : TEXCOORD2;    float4 viewDirWS : TEXCOORD4;    float4 screenPos : TEXCOORD5;};Varyings LitPassVertex(Attributes input){    Varyings output = (Varyings)0;    VertexPositionInputs vertexInput = (VertexPositionInputs)0;vertexInput.positionWS = TransformObjectToWorld(input.positionOS.xyz);vertexInput.positionCS = TransformWorldToHClip(vertexInput.positionWS);    half3 viewDirWS = GetWorldSpaceViewDir(vertexInput.positionWS);    output.viewDirWS.xyz = viewDirWS;    output.viewDirWS.w = mul(GetWorldToViewMatrix(), float4(viewDirWS.xyz, 0)).z;    output.positionCS = vertexInput.positionCS;    output.screenPos = ComputeScreenPos(output.positionCS);    return output;}half4 LitPassFragment(Varyings input) : SV_Target{    half2 screenUV = input.screenPos.xy / input.screenPos.w;    float sceneDepth = SampleSceneDepth(screenUV).r;    float linearSceneDepth = LinearEyeDepth(sceneDepth, _ZBufferParams);    half radio = -linearSceneDepth / input.viewDirWS.w;    float3 scenePosWS = GetCameraPositionWS().xyz + radio * input.viewDirWS.xyz;    //Decal Space    float3 scenePosDS = TransformWorldToObject(scenePosWS);       clip(0.5 - abs(scenePosDS.xyz));       input.positionWS = scenePosWS;    input.uv = scenePosDS.xz + 0.5;    input.uv = input.uv * _BaseTex_ST.xy + _BaseTex_ST.zw;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>EasyDecal 计算世界坐标的方法</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Attributes{    float4 positionOS   : POSITION;    float3 normalOS     : NORMAL;    float4 tangentOS    : TANGENT;    float2 uv           : TEXCOORD0;    float2 uv2          : TEXCOORD1;};struct Varyings{    float4 uv                       : TEXCOORD0;    half3  normalWS                 : TEXCOORD3;    float4 positionCS               : SV_POSITION;    float4x4 mpv_inv: TEXCOORD7;    float4 screenPos: TEXCOORD11;    float3 ray: TEXCOORD12;};Varyings LitPassVertex(Attributes input){    Varyings output;    VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);    VertexNormalInputs vertexNormalInput = GetVertexNormalInputs(input.normalOS, input.tangentOS);    float2 uv = TRANSFORM_TEX(input.uv, _BaseMap);    output.normalWS = vertexNormalInput.normalWS;    output.positionCS = vertexInput.positionCS;    float ortho = unity_OrthoParams.w;    float4 pp = float4(input.positionOS.xyz, 1.0f);    float4 p = vertexInput.positionCS;    float4x4 mi = ortho ? inverseMat(UNITY_MATRIX_MVP) : mul(unity_WorldToObject, unity_CameraToWorld);     output.screenPos = ComputeScreenPos(p);    output.ray = mul(UNITY_MATRIX_MV, pp).xyz * float3(-1, -1, 1);    output.uv = float4(input.uv, input.uv2);    output.mpv_inv = mi;    return output;}half4 LitPassFragment(Varyings input) : SV_Target{    float ortho = unity_OrthoParams.w;    float4x4 invMVP = input.mpv_inv;    input.ray = ortho ? input.ray : input.ray * (_ProjectionParams.z / input.ray.z);    float2 uvs = input.screenPos.xy;    float2 screenUV = (uvs / input.screenPos.w);    float depth = SAMPLE_TEXTURE2D(_CameraDepthTexture, sampler_CameraDepthTexture, screenUV).r;    //float depth = SampleDepthTexture(uvs);    depth = ortho ? depth : Linear01Depth(depth, _ZBufferParams);    float4 viewPos = ortho ? float4(input.ray.xy, depth, 1.0f) : float4(input.ray * depth, 1.0f);    float4 worldPos = mul(invMVP, viewPos);    float3 localPos = worldPos.xyz / worldPos.w;    // Clip outside    clip(0.5f - abs(localPos));    //...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支持法线贴图"><a href="#支持法线贴图" class="headerlink" title="支持法线贴图"></a>支持法线贴图</h2><p>采样法线贴图需要在 Decal Cube Space 中交换 z轴 和 y轴，因为在切线空间中 z轴垂直面朝上（x:tangent，y:binTangent，z:normal）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// z/y axis swap for normal to decal space, Unity is column major float3x3 martix = (float3x3)GetWorldToObjectMatrix();float3 temp = martix[1];temp = normalize(temp);martix[1] = martix[2];martix[2] = temp;inputData.normalWS = mul(normalTS, martix);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化方法-2"><a href="#优化方法-2" class="headerlink" title="优化方法"></a>优化方法</h2><ul><li>Altas</li><li>Instance and CullingGroup</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 场景 </tag>
            
            <tag> Decal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bakery烘焙</title>
      <link href="/BloodSoul.github.io/2022/11/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/gong-ju-fang-xiang/chang-jing/bakery/bakery-hong-bei/"/>
      <url>/BloodSoul.github.io/2022/11/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/gong-ju-fang-xiang/chang-jing/bakery/bakery-hong-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="一、使用方法"><a href="#一、使用方法" class="headerlink" title="一、使用方法"></a>一、使用方法</h1><h4 id="Bakery-烘焙脚本"><a href="#Bakery-烘焙脚本" class="headerlink" title="Bakery 烘焙脚本"></a>Bakery 烘焙脚本</h4><p>Bakery Direct Light ：平行光烘焙参数设置</p><ul><li>Direct And Indirect：间接光和直接光都全量烘焙，相当于 Light 的 Baked</li><li>Indirect Only：只烘焙间接光，相当于 Bake Indirect Mode</li><li>Indirect And Shadowmask：烘焙间接光和阴影，相当于 shadowmask 模式</li></ul><p>Bakery Point Light：点光源和探照灯烘焙参数设置（探照灯使用 Cone mask）</p><p>Bakery Sky Light：天空盒烘焙参数设置</p><p>Bakery Light Mesh：自发光物体烘焙参数设置</p><p>Bakery Lightmapped Prefab：预制体烘焙参数设置，可以动态加载</p><p>Bakery Volume：LightProbe 烘焙，3D 贴图</p><p>Bakery Always Render：无论物体是否隐藏，都会参与烘焙</p><p>Bakey Pack As Single Square：该物体及其子物体，烘焙时他们的 UV 会作为一个整体烘焙在Lightmap图上，不会打乱</p><p>Bakery Sector：独立烘焙，可以选择只烘焙特定区域，其他区域不会变更。</p><p>Bakery Lightmap Group Selector：设置单个区域烘焙的参数，会 override 全局参数。</p><ul><li><p>全局烘焙时，会按照每个 Bakery Lightmap Group Selector 组进行烘焙，当没有这个设置的物体是，会按照全局参数烘焙。如下图，全局烘焙时，左边这一组按照 AO Only 烘焙，而右边会按照 shadowmask 方式进行正常烘焙</p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221121150011963.png" alt="image-20221121150011963"></p></li></ul><h4 id="Directional-mode"><a href="#Directional-mode" class="headerlink" title="Directional mode"></a>Directional mode</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221122101338057.png" alt="image-20221122101338057"></p><h4 id="Bakery-API-使用"><a href="#Bakery-API-使用" class="headerlink" title="Bakery API 使用"></a>Bakery API 使用</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using UnityEngine;public class TestBakeryAPI : MonoBehaviour{    public BakerySector bakerySector;    [ContextMenu("Test1")]    private void Test1()    {        // 每个场景会保存一个 ftLightmapsStorage        ftLightmapsStorage storage = ftRenderLightmap.FindRenderSettingsStorage();        storage.renderSettingsSector = bakerySector;        storage.renderSettingsUserRenderMode = (int)                              BakeryLightmapGroup.RenderMode.AmbientOcclusionOnly;        // 获取当前渲染的实例        ftRenderLightmap bakery = ftRenderLightmap.instance;        // 加载 ftLightmapsStorage 设置到实例中        bakery.LoadRenderSettings();        // 在用 Bakery Sector情况下，直接调用 bakery.RenderButton 会报错,需要手动验证路径        // bakery.ValidateOutputPath();        // 进行烘焙        bakery.RenderButton(false);        // 保存当前实例烘焙参数到 ftLightmapsStorage        bakery.SaveRenderSettings();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Bakery-Meta-Pass-使用"><a href="#Bakery-Meta-Pass-使用" class="headerlink" title="Bakery Meta Pass 使用"></a>Bakery Meta Pass 使用</h4><p>Albedo： 默认识别  _MainTex、_BaseColorMap、 _Color（没有贴图的情况下） 的 颜色作为 albedo 颜色<br>Emission：默认识别  _EmissionMap、 _EmissionColor 作为自发光的颜色</p><p>Alpha：默认识别  _MainTex、 _BaseColorMap 、 _BaseMap 的 Alpha 作为 alpha 值</p><p> _Cutoff：作为裁剪值</p><ul><li>计算公式为：finalCutoff = 1 - (1 - cutoff) * alpha</li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221121204812045.png" alt="image-20221121204812045"></p><p>Bakery 对半透明烘焙不支持，只能 _cutoff，但是可以对 alpha 进行修改。方式如下：</p><p>[HideInInspector] BAKERY_META_ALPHA_ENABLE (“Enable Bakery alpha meta pass”, Float) = 1.0</p><p>Name “META_BAKERY”</p><p>if (unity_MetaFragmentControl.w)</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Shader "Unlit/TestMetaPass"{    Properties    {        _MainTex ("Texture", 2D) = "white" {}        _Color("Color for Lightmap", Color) = (0.5, 0.5, 0.5, 1.0)        _Cutoff("_Cutoff",Range(0,1)) = 0        [HideInInspector] BAKERY_META_ALPHA_ENABLE ("Enable Bakery alpha meta pass", Float) = 1.0    }    SubShader    {        Tags        {            "RenderType" = "Transparent"            "Queue" = "Transparent"        }        Blend SrcAlpha OneMinusSrcAlpha        ZWrite off                Pass        {            Name "META_BAKERY"            Tags            {                "LightMode" = "Meta"            }            Cull Off            HLSLPROGRAM            #pragma target 3.5            #pragma vertex VertMeta            #pragma fragment FragMeta            #include "Packages/com.unity.render-pipelines.universal/Shaders/LitInput.hlsl"            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/UniversalMetaPass.hlsl"            // #include "MetaPass.hlsl"            Varyings VertMeta(Attributes input)            {                Varyings output = (Varyings)0;                output = UniversalVertexMeta(input);                            return output;            }            half4 FragMeta(Varyings input) : SV_Target            {                MetaInput metaInput = (MetaInput)0;                            //Output custom alpha to Bakery                if (unity_MetaFragmentControl.w)                {                    float2 alpha2 = cos(abs(frac(input.uv * 10) *2 - 1));                    float alpha = alpha2.x * alpha2.y;                    return alpha;                }                return UniversalFragmentMeta(input, metaInput);            }            ENDHLSL        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Normal Mapping</p><p>_BumpMap</p><p>_MainTex_ST</p><p>META_BAKERY</p><p>BakeryMetaPass.cginc</p><p>#pragma vertex vert_bakerymt</p><p>unity_MetaFragmentControl.z</p><p>BakeryEncodeNormal</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221122101713655.png" alt="image-20221122101713655"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 场景 </tag>
            
            <tag> Package </tag>
            
            <tag> 工具方向 </tag>
            
            <tag> Bakery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_07_LOD_and_Reflection</title>
      <link href="/BloodSoul.github.io/2022/11/18/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-07-lodandreflection/"/>
      <url>/BloodSoul.github.io/2022/11/18/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-07-lodandreflection/</url>
      
        <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li>可以使用LODGroup.crossFadeAnimationDuration 控制切换的动画时间，默认0.5秒</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221215204227666.png" alt="image-20221215204227666" style="zoom:67%;"> </li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// -- 需要放在后面,放在 unity_WorldTransformParams 那个地方时会失效// LOD0 到 LOD1 CrossFade 时 参数从 0..1// LOD1 到 LOD2 CrossFade 时,参数从 -1..0float4 unity_LODFade;// 宏定义#pragma multi_compile _ LOD_FADE_CROSSFADEstruct Fragment{    float2 positionSS; //屏幕空间纹素的位置    float2 screenUV; //屏幕空间UV    float depth; //view-space 深度（到相机 XY 平面的距离，线性）    float bufferDepth; // 从深度图读取的深度,};Fragment GetFragment (float4 positionSS){    Fragment fragment = (Fragment)0;    fragment.positionSS = positionSS.xy;    fragment.screenUV = fragment.positionSS * _CameraBufferSize;    fragment.depth = IsOrthographicCamera() ? OrthographicDepthBufferToLinear(positionSS.z) : positionSS.w;    fragment.bufferDepth = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_point_clamp, fragment.screenUV, 0);    fragment.bufferDepth = IsOrthographicCamera() ?        OrthographicDepthBufferToLinear(fragment.bufferDepth):        LinearEyeDepth(fragment.bufferDepth, _ZBufferParams);    return fragment;}void ClipLOD(Fragment fragment, float fade){    #if defined(LOD_FADE_CROSSFADE)        float dither = InterleavedGradientNoise(fragment.positionSS, 0);        clip(fade + (fade &lt; 0.0 ? dither : -dither));    #endif}// include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Random.hlsl" 中的方法//From  Next Generation Post Processing in Call of Duty: Advanced Warfare [Jimenez 2014]// http://advances.realtimerendering.com/s2014/index.htmlfloat InterleavedGradientNoise(float2 pixCoord, int frameCount){    const float3 magic = float3(0.06711056f, 0.00583715f, 52.9829189f);    float2 frameMagicScale = float2(2.083f, 4.867f);    pixCoord += frameCount * frameMagicScale;    return frac(magic.z * frac(dot(pixCoord, magic.xy)));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%BD%95%E5%88%B6_2022_12_15_20_51_54_626.gif" alt="录制_2022_12_15_20_51_54_626"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_06_BakedShadowMask</title>
      <link href="/BloodSoul.github.io/2022/11/18/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-06-bakedshadowmask/"/>
      <url>/BloodSoul.github.io/2022/11/18/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-06-bakedshadowmask/</url>
      
        <content type="html"><![CDATA[<h1 id="一、ShadowMask-Bake-Mode"><a href="#一、ShadowMask-Bake-Mode" class="headerlink" title="一、ShadowMask Bake Mode"></a>一、ShadowMask Bake Mode</h1><h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>与 indirect Bake Mode 类似，只不过将静态物体的阴影信息也烘焙出来，写入到 ShadowMask 贴图中</p><h4 id="ShadowMask"><a href="#ShadowMask" class="headerlink" title="ShadowMask"></a>ShadowMask</h4><p><strong>静态物体将阴影烘焙到 ShadowMask 贴图中</strong></p><p>Light 的模式设置</p><ul><li><p>Realtime</p><ul><li>纯实时光计算，不会有任何信息烘焙进 lightmap</li></ul></li><li><p>Mixed</p><ul><li><p>间接光（indirect）烘焙到 lightmap</p></li><li><p><strong>阴影烘焙到 ShadowMask 中</strong></p></li><li><p>直接光 （direct）实时计算</p></li></ul></li><li><p>Baked</p><ul><li>直接光信息和间接光信息都烘焙到 lightmap 中</li></ul></li></ul><h4 id="OcclusionProbe"><a href="#OcclusionProbe" class="headerlink" title="OcclusionProbe"></a>OcclusionProbe</h4><p><strong>动态物体如果需要接受静态物体的阴影可以使用  OcclusionProbe</strong></p><p><strong>OcclusionProbe 数据在 ShadowMask 模式下与 LightProbe 使用相同的位置，会通过unity传入到 unity_ProbesOcclusion，LightProbe 数据是通过球谐参数传入的</strong></p><h4 id="OcclusionProbe-LPPV"><a href="#OcclusionProbe-LPPV" class="headerlink" title="OcclusionProbe LPPV"></a>OcclusionProbe LPPV</h4><p>较长的物体也可以使用LPPV，OcclusionProbe 也有LPPV</p><ul><li>使用 OcclusionProbe LPPV</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221118123040094.png" alt="image-20221118123040094"> </li><li>不使用 OcclusionProbe LPPV</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221118123051672.png" alt="image-20221118123051672"> </li></ul><h4 id="管线及Shader使用"><a href="#管线及Shader使用" class="headerlink" title="管线及Shader使用"></a>管线及Shader使用</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">SortingSettings sortingSettings = new SortingSettings(_camera){    criteria = SortingCriteria.CommonOpaque};DrawingSettings drawingSettings = new DrawingSettings(UnlitShaderTagId, sortingSettings){    enableDynamicBatching = useDynamicBatching,    enableInstancing = useGPUInstancing,    perObjectData =        PerObjectData.ReflectionProbes |         PerObjectData.Lightmaps | PerObjectData.ShadowMask | //启用光照贴图、ShadowMask贴图        PerObjectData.LightProbe | PerObjectData.OcclusionProbe | //启用 LightProbe、OcclusionProbe        PerObjectData.LightProbeProxyVolume | PerObjectData.OcclusionProbeProxyVolume | //启用对应 LPPV 模式};drawingSettings.SetShaderPassName(1, LitShaderTagId);FilteringSettings filteringSettings = new FilteringSettings(RenderQueueRange.opaque, renderingLayerMask: (uint) renderingLayerMask);_context.DrawRenderers(_cullingResults, ref drawingSettings, ref filteringSettings);_context.DrawSkybox(_camera);if (_useColorTexture || _useDepthTexture){    CopyAttachments();}sortingSettings.criteria = SortingCriteria.CommonTransparent;drawingSettings.sortingSettings = sortingSettings;filteringSettings.renderQueueRange = RenderQueueRange.transparent;_context.DrawRenderers(_cullingResults, ref drawingSettings, ref filteringSettings);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 ShadowMask 贴图方法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//需要使用宏定义 静态物体会开启 SHADOWS_SHADOWMASK#pragma multi_compile _ SHADOWS_SHADOWMASK#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl"#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/ImageBasedLighting.hlsl"//OcclusionProbefloat4 unity_ProbesOcclusion;//LPPV//LightProbeProxyVolume 和 OcclusionProbeProxyVolume 使用同一个数据结构// 如果使用了 LPPV, unity_ProbeVolumeParams.x 为 1float4 unity_ProbeVolumeParams;float4x4 unity_ProbeVolumeWorldToObject;float4 unity_ProbeVolumeSizeInv;float4 unity_ProbeVolumeMin;//ShadowMaskTEXTURE2D_FLOAT(unity_ShadowMask); SAMPLER(samplerunity_ShadowMask);//LPPVTEXTURE3D_FLOAT(unity_ProbeVolumeSH);SAMPLER(samplerunity_ProbeVolumeSH);// lightMapUV 计算,使用第二套 UV// float2 lightMapUV : TEXCOORD1;// output.lightMapUV = input.lightMapUV * unity_LightmapST.xy + unity_LightmapST.zw;float4 SamplerBakedShadows( float2 lightMapUV, Surface surfaceWS){    #ifdef LIGHTMAP_ON        return SAMPLE_TEXTURE2D(unity_ShadowMask, samplerunity_ShadowMask, lightMapUV);     #else        if (unity_ProbeVolumeParams.x) //LPPV        {            return SampleProbeOcclusion(                        TEXTURE3D_ARGS( unity_ProbeVolumeSH, samplerunity_ProbeVolumeSH),                        surfaceWS.position, unity_ProbeVolumeWorldToObject,                        unity_ProbeVolumeParams.y, unity_ProbeVolumeParams.z,                        unity_ProbeVolumeMin.xyz, unity_ProbeVolumeSizeInv.xyz                    );        }        else        {            return unity_ProbesOcclusion;        }    #endif}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ShadowDistance-结合"><a href="#ShadowDistance-结合" class="headerlink" title="ShadowDistance 结合"></a>ShadowDistance 结合</h4><ul><li><ul><li>ShadowDistance 模式</li></ul></li><li><ul><li><ul><li><p>在实时光距离范围内</p></li><li><ul><li>静态物体和动态物体都能投射阴影，都使用实时阴影控制</li></ul></li><li><p>在实时光距离范围外</p></li><li><ul><li>静态物体使用  ShadowMask 来计算阴影</li><li>动态物体使用 OcclusionProbe 来计算阴影</li></ul></li></ul></li><li><p>ShdowMask 模式</p></li><li><ul><li><p>在实时光距离范围内</p></li><li><ul><li>静态物体不能投射阴影，一直使用 ShadowMask 来计算阴影</li><li>只有动态物体可以投射阴影，使用实时阴影计算</li></ul></li><li><p>在实时光距离范围外</p></li><li><ul><li>静态物体使用 ShadowMask 来计算阴影</li><li>动态物体使用 OcclusionProbe 来计算阴影</li></ul></li></ul></li></ul></li></ul><h1 id="二、Subtractive-Bake-Mode（不常用，限制比较大）"><a href="#二、Subtractive-Bake-Mode（不常用，限制比较大）" class="headerlink" title="二、Subtractive Bake Mode（不常用，限制比较大）"></a>二、Subtractive Bake Mode（不常用，限制比较大）</h1><p>简介</p><p>其他都差不多，唯一不同的是：</p><ul><li>Light 的模式设置 Mixed 的灯光，即作为实时光，又会全量烘焙到光照贴图（即烘焙直接光，也烘焙间接光），在shader光照计算的时候，实时光动态减去光照贴图中遮蔽的部分</li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221118141940853.png" alt="image-20221118141940853"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221119152216421.png" alt="image-20221119152216421"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_05_BakedLights</title>
      <link href="/BloodSoul.github.io/2022/11/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-05-bakedlights/"/>
      <url>/BloodSoul.github.io/2022/11/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-05-bakedlights/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Indirect-Bake-Mode"><a href="#一、Indirect-Bake-Mode" class="headerlink" title="一、Indirect Bake Mode"></a>一、Indirect Bake Mode</h1><ul><li>烘焙的时候，会把环境光也烘焙进去</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117204126990.png" alt="image-20221117204126990"> </li></ul><h4 id="静态物体"><a href="#静态物体" class="headerlink" title="静态物体"></a>静态物体</h4><ul><li><p>Light 的模式设置</p><ul><li><p>Realtime</p><ul><li>纯实时光计算，不会有任何信息烘焙进 lightmap</li></ul></li><li><p>Mixed</p><ul><li>间接光（indirect）烘焙到 lightmap<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117204400853.png" alt="image-20221117204400853" style="zoom: 67%;"> </li></ul></li><li>直接光 direct 实时计算</li></ul></li><li><p>Baked</p><ul><li><p>直接光信息和间接光信息都烘焙到 lightmap 中</p><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117204538699.png" alt="image-20221117204538699" style="zoom:67%;"> </li></ul></li><li><p>不会有任何实时光计算</p></li></ul></li></ul><p><strong>静态物体通过光照贴图获取间接光信息</strong></p><p>shader 中采样</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl"#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/ImageBasedLighting.hlsl"//LightmapTEXTURE2D(unity_Lightmap);SAMPLER(samplerunity_Lightmap);// lightMapUV 计算,使用第二套 UV// float2 lightMapUV : TEXCOORD1;// output.lightMapUV = input.lightMapUV * unity_LightmapST.xy + unity_LightmapST.zw;    float3 SamplerLightMap(float2 lightMapUV){    #if defined(LIGHTMAP_ON)        return SampleSingleLightmap(                TEXTURE2D_ARGS(unity_Lightmap, samplerunity_Lightmap),lightMapUV,                float4(1.0,1.0,0.0,0.0),                #if defined(UNITY_LIGHTMAP_FULL_HDR)                    false,                #else                    true,                #endif                float4(LIGHTMAP_HDR_MULTIPLIER, LIGHTMAP_HDR_EXPONENT, 0.0, 0.0)        );    #else        return 0.0;    #endif}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="动态物体"><a href="#动态物体" class="headerlink" title="动态物体"></a>动态物体</h4><p><strong>动态物体可以通过 LightProbe 来获取间接光，较长的物体可以通过 LPPV 方式进行获取 lightProbe</strong></p><p>通过摆放 LightProbe,可以将间接光信息烘焙到 LightProbe 中。LightProbe 数据通过球谐函数传入</p><ul><li>不使用 LPPV<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117205303684.png" alt="image-20221117205303684"> </li></ul></li><li>使用 LPPV<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117205320798.png" alt="image-20221117205320798"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117205748847.png" alt="image-20221117205748847" style="zoom:67%;"> </li></ul></li></ul><h4 id="LightProbe-和-LPPV-使用方式"><a href="#LightProbe-和-LPPV-使用方式" class="headerlink" title="LightProbe 和 LPPV 使用方式"></a>LightProbe 和 LPPV 使用方式</h4><ul><li>管线</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">SortingSettings sortingSettings = new SortingSettings(_camera){    criteria = SortingCriteria.CommonOpaque};DrawingSettings drawingSettings = new DrawingSettings(UnlitShaderTagId, sortingSettings){    enableDynamicBatching = useDynamicBatching,    enableInstancing = useGPUInstancing,    perObjectData =        PerObjectData.ReflectionProbes | //启用反射探针        PerObjectData.Lightmaps | PerObjectData.ShadowMask | //启用光照贴图、ShadowMask贴图        PerObjectData.LightProbe | PerObjectData.OcclusionProbe | //启用 LightProbe、OcclusionProbe        PerObjectData.LightProbeProxyVolume | PerObjectData.OcclusionProbeProxyVolume | //启用对应 LPPV 模式};drawingSettings.SetShaderPassName(1, LitShaderTagId);FilteringSettings filteringSettings = new FilteringSettings(RenderQueueRange.opaque, renderingLayerMask: (uint) renderingLayerMask);_context.DrawRenderers(_cullingResults, ref drawingSettings, ref filteringSettings);_context.DrawSkybox(_camera);if (_useColorTexture || _useDepthTexture){    CopyAttachments();}sortingSettings.criteria = SortingCriteria.CommonTransparent;drawingSettings.sortingSettings = sortingSettings;filteringSettings.renderQueueRange = RenderQueueRange.transparent;_context.DrawRenderers(_cullingResults, ref drawingSettings, ref filteringSettings);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>shader</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//需要使用宏定义，静态物体会开启 LIGHTMAP_ON#pragma multi_compile _ LIGHTMAP_ON#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl"#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/ImageBasedLighting.hlsl"// LightProbe 的球谐函数参数float4 unity_SHAr;float4 unity_SHAg;float4 unity_SHAb;float4 unity_SHBr;float4 unity_SHBg;float4 unity_SHBb;float4 unity_SHC;//LPPV//LightProbeProxyVolume 和 OcclusionProbeProxyVolume 使用同一个数据结构// 如果使用了 LPPV, unity_ProbeVolumeParams.x 为 1float4 unity_ProbeVolumeParams;float4x4 unity_ProbeVolumeWorldToObject;float4 unity_ProbeVolumeSizeInv;float4 unity_ProbeVolumeMin;//LPPVTEXTURE3D_FLOAT(unity_ProbeVolumeSH);SAMPLER(samplerunity_ProbeVolumeSH);float3 SampleLightProbe (Surface surfaceWS) {    #if defined(LIGHTMAP_ON)        return 0.0;    #else        if (unity_ProbeVolumeParams.x)        {            return SampleProbeVolumeSH4(                TEXTURE3D_ARGS(unity_ProbeVolumeSH, samplerunity_ProbeVolumeSH),                surfaceWS.position, surfaceWS.normal,                unity_ProbeVolumeWorldToObject,                unity_ProbeVolumeParams.y, unity_ProbeVolumeParams.z,                unity_ProbeVolumeMin.xyz, unity_ProbeVolumeSizeInv.xyz            );        }        else        {            float4 coefficients[7];            coefficients[0] = unity_SHAr;            coefficients[1] = unity_SHAg;            coefficients[2] = unity_SHAb;            coefficients[3] = unity_SHBr;            coefficients[4] = unity_SHBg;            coefficients[5] = unity_SHBb;            coefficients[6] = unity_SHC;            return max(0.0, SampleSH9(coefficients, surfaceWS.normal));        }        #endif}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Unity-烘焙的硬编码"><a href="#Unity-烘焙的硬编码" class="headerlink" title="Unity 烘焙的硬编码"></a>Unity 烘焙的硬编码</h4><p>Unity 烘焙使用硬编码 _MainTex、Color、_Cutoff 来进行计算 alpha 的</p><p>Unity 根据材质球的渲染队列来判断使用哪种方式进行计算 alpha</p><ul><li>支持的半透明烘焙，材质球渲染队列为：Transparent &amp; 3000</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117210211939.png" alt="image-20221117210211939"> </li><li>支持的 Clip 烘焙，材质球渲染队列为： AlphaTest &amp; 2450</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117210219469.png" alt="image-20221117210219469"> </li><li>正常不透明的烘焙，材质球渲染队列为：Opaque &amp; 2000</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117210232094.png" alt="image-20221117210232094"> </li></ul><h4 id="Directional-Mode"><a href="#Directional-Mode" class="headerlink" title="Directional Mode"></a>Directional Mode</h4><p><a href="https://catlikecoding.com/unity/tutorials/rendering/part-16/">https://catlikecoding.com/unity/tutorials/rendering/part-16/</a></p><p>正常烘焙的间接光信息是没有法线计算的，所以没有凹凸效果，细节效果Unity 支持 Dominant Direction 模式</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221122155447769.png" alt="image-20221122155447769"></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221122155050083.png" alt="image-20221122155050083" style="zoom: 80%;"> <p>shader使用</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">//宏定义#pragma multi_compile _ DIRLIGHTMAP_COMBINED // 启用 DirectionalMode#pragma multi_compile _ LIGHTMAP_ON//贴图名字#define LIGHTMAP_NAME unity_Lightmap#define LIGHTMAP_INDIRECTION_NAME unity_LightmapInd //DirectionalLightmap 贴图名称//使用 SampleLightmap 中的分子#if defined(LIGHTMAP_ON) &amp;&amp; defined(DIRLIGHTMAP_COMBINED)    diffuseLighting = SampleDirectionalLightmap(TEXTURE2D_LIGHTMAP_ARGS(LIGHTMAP_NAME, LIGHTMAP_SAMPLER_NAME),        TEXTURE2D_LIGHTMAP_ARGS(LIGHTMAP_INDIRECTION_NAME, LIGHTMAP_SAMPLER_NAME),        LIGHTMAP_SAMPLE_EXTRA_ARGS, transformCoords, normalWS, encodedLightmap, decodeInstructions);#elif defined(LIGHTMAP_ON)    diffuseLighting = SampleSingleLightmap(TEXTURE2D_LIGHTMAP_ARGS(LIGHTMAP_NAME, LIGHTMAP_SAMPLER_NAME), LIGHTMAP_SAMPLE_EXTRA_ARGS, transformCoords, encodedLightmap, decodeInstructions);#endif    //具体方法//directional Lightmap 存储的不是单位向量的灯光方向//通过使用半兰伯特计算，来模拟表面受到多个光照后的效果void SampleDirectionalLightmap(TEXTURE2D_LIGHTMAP_PARAM(lightmapTex, lightmapSampler), TEXTURE2D_LIGHTMAP_PARAM(lightmapDirTex, lightmapDirSampler), LIGHTMAP_EXTRA_ARGS, float4 transform,    float3 normalWS, float3 backNormalWS, bool encodedLightmap, real4 decodeInstructions, inout real3 bakeDiffuseLighting, inout real3 backBakeDiffuseLighting){     // In directional mode Enlighten bakes dominant light direction    // in a way, that using it for half Lambert and then dividing by a "rebalancing coefficient"    // gives a result close to plain diffuse response lightmaps, but normalmapped.    // Note that dir is not unit length on purpose. Its length is "directionality", like    // for the directional specular lightmaps.    // transform is scale and bias    uv = uv * transform.xy + transform.zw;    real4 direction = SAMPLE_TEXTURE2D_LIGHTMAP(lightmapDirTex, lightmapDirSampler, LIGHTMAP_EXTRA_ARGS_USE);    // Remark: baked lightmap is RGBM for now, dynamic lightmap is RGB9E5    real3 illuminance = real3(0.0, 0.0, 0.0);    if (encodedLightmap)    {        real4 encodedIlluminance = SAMPLE_TEXTURE2D_LIGHTMAP(lightmapTex, lightmapSampler, LIGHTMAP_EXTRA_ARGS_USE).rgba;        illuminance = DecodeLightmap(encodedIlluminance, decodeInstructions);    }    else    {        illuminance = SAMPLE_TEXTURE2D_LIGHTMAP(lightmapTex, lightmapSampler, LIGHTMAP_EXTRA_ARGS_USE).rgb;    }    real halfLambert = dot(normalWS, direction.xyz - 0.5) + 0.5;    bakeDiffuseLighting += illuminance * halfLambert / max(1e-4, direction.w);    real backHalfLambert = dot(backNormalWS, direction.xyz - 0.5) + 0.5;    backBakeDiffuseLighting += illuminance * backHalfLambert / max(1e-4, direction.w);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221122160035650.png" alt="image-20221122160035650"></p><p>Bakery 支持烘焙更多 Directional 方式</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221122160605640.png" alt="image-20221122160605640"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>光照探针是如何存储数据的，如何存储自定义数据？</p><p>unity_OneOverOutputBoost，unity_MaxOutputValue</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_04_DirectionalShadows</title>
      <link href="/BloodSoul.github.io/2022/11/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-04-directionalshadows/"/>
      <url>/BloodSoul.github.io/2022/11/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-04-directionalshadows/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Shadermap-贴图"><a href="#一、Shadermap-贴图" class="headerlink" title="一、Shadermap 贴图"></a>一、Shadermap 贴图</h1><ul><li><p><a href="https://docs.unity3d.com/ScriptReference/RenderTextureFormat.Shadowmap.html">RenderTextureFormat.Shadowmap</a> 在支持的平台使用 shadowmap 格式，不支持的平台会返回使用 <a href="https://docs.unity3d.com/ScriptReference/RenderTextureFormat.Depth.html">RenderTextureFormat.Depth</a> 格式，可以使用      <a href="https://docs.unity3d.com/ScriptReference/SystemInfo.SupportsRenderTextureFormat.html">SystemInfo.SupportsRenderTextureFormat</a> 来检测</p><ul><li><p>Shadowmap 贴图格式，在GPU 会自动进行 shadowmap comparisons</p></li><li><p>RenderTextureFormat.Depth 在 OpenGL it is the native “depth component” format (usually 24 or 16  bits), on Direct3D9 it is the 32 bit floating point (“R32F”) format.</p></li><li><p>在安卓设备上，经常是 D24S8 格式。即 24位深度，8位stencil。</p></li></ul></li><li><p>CommandBuffer.GetTemporaryRT 默认是ARGB格式，采样模式为 FliterMode.Point</p></li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117194118295.png" alt="image-20221117194118295"></p><h1 id="二、矩阵访问"><a href="#二、矩阵访问" class="headerlink" title="二、矩阵访问"></a>二、矩阵访问</h1><ul><li><p>Matrix .m23，含义是 第三行第四列<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117194650541.png" alt="image-20221117194650541"></p></li><li><p>Matrix 创建时是按照列创建的</p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117194804669.png" alt="image-20221117194804669"> </p></li><li><p>Matrix[index] 是按列访问的</p></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117194959319.png" alt="image-20221117194959319" style="zoom:80%;"> </li></ul><h1 id="三、阴影数据计算"><a href="#三、阴影数据计算" class="headerlink" title="三、阴影数据计算"></a>三、阴影数据计算</h1><ul><li>_cullingResults.ComputeDirectionalShadowMatricesAndCullingPrimitives 获取阴影灯光的 VP矩阵，和阴影设置数据</li><li>_CommandBuffer.SetViewport 进行渲染贴图分割渲染</li><li>Context.DrawShadow 进行确切的渲染阴影贴图，只会执行有 ShadowCaster Pass 的 Shader</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private void RenderDirectionalShadows(int index, int split, int tileSize){    ShadowedDirectionalLight light = _shadowedDirectionalLights[index];    ShadowDrawingSettings shadowDrawingSettings = new ShadowDrawingSettings(_cullingResults, light.VisibleLightIndex)    {        useRenderingLayerMaskTest = true    };    int cascadeCount = _shadowSettings.directional.cascadeCount;    int tileOffset = index * cascadeCount;    Vector3 ratios = _shadowSettings.directional.cascadeRadios;    float cullingFactor = Mathf.Max(0f, 0.8f - _shadowSettings.directional.cascadeFade);    float tileScale = 1f / split;    for (int i = 0; i &lt; cascadeCount; i++)    {        _cullingResults.ComputeDirectionalShadowMatricesAndCullingPrimitives(            light.VisibleLightIndex, i, cascadeCount, ratios, tileSize, light.NearPlaneOffset,            out Matrix4x4 viewMatrix, out Matrix4x4 projMatrix, out ShadowSplitData shadowSplitData        );        shadowSplitData.shadowCascadeBlendCullingFactor = cullingFactor;        shadowDrawingSettings.splitData = shadowSplitData;        if (index == 0)        {            SetCascadeData(i, shadowSplitData.cullingSphere, tileSize);        }        int tileIndex = tileOffset + i;        _dirShadowMatrices[tileIndex] = ConvertToAtlasMatrix(projMatrix * viewMatrix, SetTileViewport(tileIndex, split, tileSize), tileScale);        _buffer.SetViewProjectionMatrices(viewMatrix, projMatrix);        _buffer.SetGlobalDepthBias(0f, light.SlopeScaleBias);        ExecuteBuffer();        _context.DrawShadows(ref shadowDrawingSettings);        _buffer.SetGlobalDepthBias(0f, 0f);    }}private void SetCascadeData(int index, Vector4 cullingSphere, float tileSize){    float texelSize = 2f * cullingSphere.w / tileSize;    float filterSize = texelSize * ((float) _shadowSettings.directional.filterMode + 1f);    cullingSphere.w -= filterSize;    cullingSphere.w *= cullingSphere.w;    _cascadeData[index] = new Vector4(1f / cullingSphere.w, filterSize * 1.41242136f);    _cascadeCullingSpheres[index] = cullingSphere;}private Vector2 SetTileViewport(int index, int split, float tileSize){    Vector2 offset = new Vector2(index % split, index / split);    _buffer.SetViewport(new Rect(offset.x * tileSize, offset.y * tileSize, tileSize, tileSize));    return offset;}private Matrix4x4 ConvertToAtlasMatrix(Matrix4x4 matrix4X4, Vector2 offset, float scale){    if (SystemInfo.usesReversedZBuffer)    {        matrix4X4.m20 = -matrix4X4.m20;        matrix4X4.m21 = -matrix4X4.m21;        matrix4X4.m22 = -matrix4X4.m22;        matrix4X4.m23 = -matrix4X4.m23;    }    matrix4X4.m00 = (0.5f * (matrix4X4.m00 + matrix4X4.m30) + offset.x * matrix4X4.m30) * scale;    matrix4X4.m01 = (0.5f * (matrix4X4.m01 + matrix4X4.m31) + offset.x * matrix4X4.m31) * scale;    matrix4X4.m02 = (0.5f * (matrix4X4.m02 + matrix4X4.m32) + offset.x * matrix4X4.m32) * scale;    matrix4X4.m03 = (0.5f * (matrix4X4.m03 + matrix4X4.m33) + offset.x * matrix4X4.m33) * scale;    matrix4X4.m10 = (0.5f * (matrix4X4.m10 + matrix4X4.m30) + offset.y * matrix4X4.m30) * scale;    matrix4X4.m11 = (0.5f * (matrix4X4.m11 + matrix4X4.m31) + offset.y * matrix4X4.m31) * scale;    matrix4X4.m12 = (0.5f * (matrix4X4.m12 + matrix4X4.m32) + offset.y * matrix4X4.m32) * scale;    matrix4X4.m13 = (0.5f * (matrix4X4.m13 + matrix4X4.m33) + offset.y * matrix4X4.m33) * scale;    matrix4X4.m20 = 0.5f * (matrix4X4.m20 + matrix4X4.m30);    matrix4X4.m21 = 0.5f * (matrix4X4.m21 + matrix4X4.m31);    matrix4X4.m22 = 0.5f * (matrix4X4.m22 + matrix4X4.m32);    matrix4X4.m23 = 0.5f * (matrix4X4.m23 + matrix4X4.m33);    return matrix4X4;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、级联阴影数据计算"><a href="#四、级联阴影数据计算" class="headerlink" title="四、级联阴影数据计算"></a>四、级联阴影数据计算</h1><ul><li><p>Cascade Shadow 有一个 CullingSphere, 在shader 中通过计算在哪一个 CullingShphere 来确定应该在那个一个 Cascade Shadow 中</p></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117195810960.png" alt="image-20221117195810960" style="zoom:67%;"> </li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117195930117.png" alt="image-20221117195930117"> </p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117201442092.png" alt="image-20221117201442092"> </p></li><li><p>通过判断到摄像机的距离进行裁剪阴影，会得到一个物体在SphereCulling内，但是阴影却被裁掉的问题</p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117201605615.png" alt="image-20221117201605615"> </p></li><li><p>可以结合 ViewSpace 的 Z depth 值进行裁剪处理</p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117201700252.png" alt="image-20221117201700252"> </p></li><li><p>常规的 Fade 函数</p><ul><li>d is the surface depth</li><li>m is the max shadow distance</li><li>f is a fade range</li></ul></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117201947674.png" alt="image-20221117201947674"></p></li></ul><h1 id="五、Shadow-acne（阴影自遮挡问题）"><a href="#五、Shadow-acne（阴影自遮挡问题）" class="headerlink" title="五、Shadow acne（阴影自遮挡问题）"></a>五、Shadow acne（阴影自遮挡问题）</h1><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117202222123.png" alt="image-20221117202222123"> </p><ul><li><p>DX 裁剪空间 Z坐标是【0，1】，OPENGL 裁剪空间 Z坐标是【-1，1】</p></li><li><p>反转 Z</p><ul><li><p>由于大部分物体都集中在近裁剪平面的地方，导致深度贴图中记录的数字分布非常不均匀，都集中在靠近0的地方。为了深度图充分利用，和提高精度，可以进行反转 Z,及近平面的值为1，远平面的值为0，DX 下Z坐标为[1，0]</p></li><li><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117202439139.png" alt="image-20221117202439139"> </p></li></ul></li></ul><h1 id="六、PCF"><a href="#六、PCF" class="headerlink" title="六、PCF"></a>六、PCF</h1><ul><li>PCF unity 采样时 ten - filter 通过计算面积占比，进行优化采样，PCF3x3本来需要采样9次，优化后只需要采样4次，即可达到同样的效果，算法使用的是 GPU pro 360 guide to shadows 的方法</li></ul><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117202606777.png" alt="image-20221117202606777"> </p><h1 id="七、PCSF"><a href="#七、PCSF" class="headerlink" title="七、PCSF"></a>七、PCSF</h1><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117202653668.png" alt="image-20221117202653668"> </p><h1 id="八、资料"><a href="#八、资料" class="headerlink" title="八、资料"></a>八、资料</h1><p><strong>Cameras and depth textures</strong></p><p>来自 <a href="https://docs.unity3d.com/Manual/SL-CameraDepthTexture.html">https://docs.unity3d.com/Manual/SL-CameraDepthTexture.html</a> </p><p>浅谈RenderTexture的shadowmap格式</p><p>来自 <a href="https://gameinstitute.qq.com/community/detail/124214">https://gameinstitute.qq.com/community/detail/124214</a> </p><p>Shader中 UNITY_REVERSED_Z 的定义是什么</p><p>来自 <a href="https://answer.uwa4d.com/question/617fa23f8f8c834241fbbd7a">https://answer.uwa4d.com/question/617fa23f8f8c834241fbbd7a</a> </p><p>Unity中的shadows（二）cast shadows</p><p><a href="https://blog.51cto.com/u_15069471/4545408">https://blog.51cto.com/u_15069471/4545408</a></p><p>Unity PCF 优化算法原理，见最后的推荐链接</p><p><a href="https://forum.unity.com/threads/pcf-size-in-urp.1126025/">https://forum.unity.com/threads/pcf-size-in-urp.1126025/</a></p><p>The Witness</p><p><a href="http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/">http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_03_DirectionalLights</title>
      <link href="/BloodSoul.github.io/2022/11/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-03-directionallights/"/>
      <url>/BloodSoul.github.io/2022/11/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-03-directionallights/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Directional-Lights"><a href="#一、Directional-Lights" class="headerlink" title="一、Directional Lights"></a>一、Directional Lights</h1><p><a href="https://catlikecoding.com/unity/tutorials/custom-srp/directional-lights/"><strong>Directional Lights</strong></a></p><p>物体的光照（Lighting） = Surface（材质表面属性） 与 Light 的交互</p><ul><li>BRDF 解释 surface  与 light 交互过程中有多少光线被反射出去，即将  surface.color 分解成 diffuse 和  specular</li><li>入射能量 = 反射光线能量 + 漫反射光线能量</li><li>最终反射进入人眼睛的反射光线 = 反射光线能量 和 观察方向有关（公式见下图 【Unity 高光强度计算公式】）</li><li>金属材质会完全反射光线，非金属则基本上不会反射光线，介点介质影响（大概反射0.04）</li><li>PBR金属工作流程，Albedo = 非金属 diffuse 颜色 + 金属 Specular 颜色</li></ul><p>unity 高光的计算公式</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117190206613.png" alt="image-20221117190206613"></p><p>管线中可见光获取</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">NativeArray&lt;VisibleLight&gt; visibleLights = cullingResults.visibleLights;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可变长度的 For 循环在  OpenGL ES 2.0 and WebGL 1.0 graphics APIs 中不支持</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma target 3.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整代码</p><ul><li>Lighting.hlsl</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef CUSTOM_LIGHTING_INCLUDED#define CUSTOM_LIGHTING_INCLUDEDbool RenderingLayersOverlap (Surface surface, Light light){    //OpenGL ES 2.0 及以下不支持位操作,其他支持    return (surface.renderingLayerMask &amp; light.renderingLayerMask) != 0;}float3 IncomingLight(Surface surface, Light light){    return saturate(dot(surface.normal, light.direction)) * light.attenuation * light.color;}float3 GetLighting(Surface surface, BRDF brdf, Light light){    return IncomingLight(surface, light) * DirectBRDF(surface, brdf, light);}float3 GetLighting(Surface surfaceWS, BRDF brdf, GI gi){    ShadowData shadowData = GetShadowData(surfaceWS);    shadowData.shadowMask = gi.shadowMask;    float3 color = IndirectBRDF(surfaceWS, brdf, gi.diffuse, gi.specular);    for (int i = 0; i &lt; GetDirectionalLightCount(); i++)    {        Light light = GetDirectionLight(i, surfaceWS, shadowData);        if (RenderingLayersOverlap(surfaceWS, light))        {            color += GetLighting(surfaceWS, brdf, light);        }    }        return color;}#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>BRDF.hlsl</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef CUSTOM_BRDF_INCLUDED#define CUSTOM_BRDF_INCLUDED#define MIN_REFLECTIVITY 0.04struct BRDF{    float3 diffuse;    float3 specular;    float roughness;    float perceptualRoughness;    float fresnel;};float OneMinusReflectivity(float metallic){    float range = 1.0 - MIN_REFLECTIVITY;    return (range - metallic * range);}BRDF GetBRDF(Surface surface, bool applyAlphaToDiffuse = false){    BRDF brdf = (BRDF)0;    float oneMinusReflectivity = OneMinusReflectivity(surface.metallic);    brdf.diffuse = surface.color * oneMinusReflectivity;    if (applyAlphaToDiffuse)    {        //通过下面的方法，解决高光反射也会在 blend 中减淡的问题        //更改blend srcAlpha oneMinusSrcAlpha 为 Blend One oneMinusSrcAlpha。并且 premultiplied alpha        brdf.diffuse *= surface.alpha;    }    //因为金属基本没有diffuse，金属会影响高光颜色，不同金属会有不同的高光颜色。金属工作流程中,surface.color 金属部分绘制的是高光颜色    //非金属的反射颜色为白色，白色 * MIN_REFLECTIVITY(非金属最小的反射率) = MIN_REFLECTIVITY    brdf.specular = lerp(MIN_REFLECTIVITY, surface.color, surface.metallic);    brdf.perceptualRoughness = PerceptualSmoothnessToPerceptualRoughness(surface.smoothness);    brdf.roughness = PerceptualRoughnessToRoughness(brdf.perceptualRoughness); //matches the Disney lighting model    brdf.fresnel = saturate(surface.smoothness + 1.0 - oneMinusReflectivity);    return brdf;}float SpecularStrength(Surface surface, BRDF brdf, Light light){    float3 h = SafeNormalize(light.direction + surface.viewDirection);    float nh2 = Square(saturate(dot(surface.normal, h)));    float lh2 = Square(saturate(dot(light.direction, h)));    float r2 = Square(brdf.roughness);    float d2 = Square(nh2 * (r2 - 1.0) + 1.00001);    float normalization = brdf.roughness * 4 + 2;    return r2 / (d2 * max(0.1, lh2) * normalization);}float3 DirectBRDF(Surface surface, BRDF brdf, Light light){    return SpecularStrength(surface, brdf, light) * brdf.specular + brdf.diffuse;}float3 IndirectBRDF(Surface surface, BRDF brdf, float3 diffuse, float3 specular){    float fresnelStrength = surface.fresnelStrength * Pow4(1.0 - saturate(dot(surface.normal, surface.viewDirection)));    float3 reflection = specular * lerp(brdf.specular, brdf.fresnel, fresnelStrength);    reflection /= brdf.roughness * brdf.roughness + 1.0;    return (diffuse * brdf.diffuse + reflection) * surface.occlusion;}#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、Custom-Shader-GUI"><a href="#二、Custom-Shader-GUI" class="headerlink" title="二、Custom Shader GUI"></a>二、Custom Shader GUI</h1><h4 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using UnityEditor;using UnityEngine;using UnityEngine.Rendering;public class CustomShaderGUI : ShaderGUI {private MaterialEditor _editor;    private Object[] _materials;    private MaterialProperty[] _properties;    public override void OnGUI (MaterialEditor materialEditor, MaterialProperty[] properties)     {base.OnGUI(materialEditor, properties);        _editor = materialEditor;        _materials = materialEditor.targets;        _properties = properties;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断某个属性是否存在"><a href="#判断某个属性是否存在" class="headerlink" title="判断某个属性是否存在"></a>判断某个属性是否存在</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private bool HasProperty(string name){    return FindProperty(name, _properties, false) != null;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private bool SetProperty(string name, float value){    MaterialProperty property = FindProperty(name, _properties, false);    if (property != null)    {        property.floatValue = value;        return true;    }    return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="显示多个不同值的情况"><a href="#显示多个不同值的情况" class="headerlink" title="显示多个不同值的情况"></a>显示多个不同值的情况</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">EditorGUI.showMixedValue = property.hasMultipleDifferentValues;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示自发光属性"><a href="#显示自发光属性" class="headerlink" title="显示自发光属性"></a>显示自发光属性</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">_editor.LightmapEmissionProperty();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Shader-中启用"><a href="#Shader-中启用" class="headerlink" title="Shader 中启用"></a>Shader 中启用</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Shader "CustomRP/Lit"{    Properties{...}    SubShader{...}        CustomEditor "CustomRP.Editor.CustomShaderGUI"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_02_DrawCalls</title>
      <link href="/BloodSoul.github.io/2022/11/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-02-drawcalls/"/>
      <url>/BloodSoul.github.io/2022/11/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-02-drawcalls/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SRP-Batcher"><a href="#一、SRP-Batcher" class="headerlink" title="一、SRP Batcher"></a>一、SRP Batcher</h1><h4 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h4><ul><li>将一组参数打包放在 GPU 上，渲染时不用切换渲染状态，从而进行渲染优化。但不能减少 DrawCall，只是降低 DrawCall 的代价</li></ul><h4 id="合批限制："><a href="#合批限制：" class="headerlink" title="合批限制："></a>合批限制：</h4><ul><li>Property内的属性，都要写到 CBuffer 内</li><li>全局变量不能写在 CBuffer 内</li><li>CBuffer内不包含#if（非常量大小CBuffer）</li><li>CBuffer内的变量必须按照half4 half2 half 从上到下的顺序写，顺序不能乱不能穿插的写，不然就会闪退，还有不能写half3，要用half4代替half3，不然在某些机器上会显示错误。<ul><li><a href="https://www.xuanyusong.com/archives/4932">URP在小米10安卓12系统闪退</a></li></ul></li><li>一个 Shader 里面有多个 Pass，每个 Pass 的 CBuffer 应该一致</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>SRP Bather 不支持 MaterialPropertyBlock，如果有很多个不同属性但使用相同Shader的需求，只能创建 N 多个材质，然后进行 SRP Bather<ul><li>Instance 支持 MaterialPropertyBlock，所以上面的情况，可以用 Instance + MaterialPropertyBlock 代替</li></ul></li></ul><h1 id="二、GPU-Instancing"><a href="#二、GPU-Instancing" class="headerlink" title="二、GPU Instancing"></a>二、GPU Instancing</h1><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><ul><li>GPU Instancing 支持 MaterialPropertyBlock，如果有使用相同 Shader 但是不同材质属性的需求，GPU Instancing 可以进行高效处理</li></ul><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>一般来说，GPU实例化比动态批处理效果更好。这种方法也有一些注意事项，例如，当涉及到不同比例时，较大的网格的法向量不能保证是单位长度的。另外，绘制顺序也会发生变化，因为现在是单个网格而不是多个。</li></ul><h4 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h4><ul><li>管线</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">SortingSettings sortingSettings = new SortingSettings(_camera){    criteria = SortingCriteria.CommonOpaque};DrawingSettings drawingSettings = new DrawingSettings(UnlitShaderTagId, sortingSettings){    enableInstancing = useGPUInstancing, //启用GPUInstancing};drawingSettings.SetShaderPassName(1, LitShaderTagId);FilteringSettings filteringSettings = new FilteringSettings(RenderQueueRange.opaque, renderingLayerMask: (uint) renderingLayerMask);_context.DrawRenderers(_cullingResults, ref drawingSettings, ref filteringSettings);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>宏定义引用文件</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma multi_compile_instancing#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>属性定义</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">UNITY_INSTANCING_BUFFER_START(UnityPerMaterial)UNITY_DEFINE_INSTANCED_PROP(float4, _Color)UNITY_DEFINE_INSTANCED_PROP(float4, _EmissionColor)UNITY_DEFINE_INSTANCED_PROP(float4, _MainTex_ST)UNITY_DEFINE_INSTANCED_PROP(float4, _DetailMap_ST)UNITY_DEFINE_INSTANCED_PROP(float, _DetailAlbedo)UNITY_DEFINE_INSTANCED_PROP(float, _DetailSmoothness)UNITY_DEFINE_INSTANCED_PROP(float, _Cutoff)UNITY_DEFINE_INSTANCED_PROP(float, _ZWrite)UNITY_DEFINE_INSTANCED_PROP(float, _Metallic)UNITY_DEFINE_INSTANCED_PROP(float, _Occlusion)UNITY_DEFINE_INSTANCED_PROP(float, _Smoothness)UNITY_DEFINE_INSTANCED_PROP(float, _Fresnel)UNITY_DEFINE_INSTANCED_PROP(float, _NormalScale)UNITY_DEFINE_INSTANCED_PROP(float, _DetailNormalScale)UNITY_INSTANCING_BUFFER_END(UnityPerMaterial)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结构定义</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Attributes{    float4 positionOS : POSITION;    float2 uv : TEXCOORD0;    UNITY_VERTEX_INPUT_INSTANCE_ID};struct Varyings{    float4 positionCS_SS : SV_POSITION;    float2 uv : VAR_UV;    UNITY_VERTEX_INPUT_INSTANCE_ID};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Vertex 和 Fragment 使用</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Varyings LitPassVertex(Attributes input){    Varyings output = (Varyings)0;    UNITY_SETUP_INSTANCE_ID(input);    UNITY_TRANSFER_INSTANCE_ID(input, output);    output.positionCS_SS = TransformWorldToHClip(output.positionWS);        return output;}float4 LitPassFragment(Varyings input) : SV_TARGET{    UNITY_SETUP_INSTANCE_ID(input);        float4 finalColor = UNITY_ACCESS_INSTANCED_PROP(UnityPerMaterial, _Color)    return finalColor;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>材质球</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20221117164846483.png" alt="image-20221117164846483" style="zoom: 80%;"></li><li><p>C# 端</p></li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using UnityEngine;using UnityEngine.Rendering;using Random = UnityEngine.Random;namespace CustomRP.Examples{    public class MeshBall : MonoBehaviour    {        private static int _colorID = Shader.PropertyToID("_Color");        private static int _metallicID = Shader.PropertyToID("_Metallic");        private static int _smoothnessID = Shader.PropertyToID("_Smoothness");        [SerializeField] private Mesh mesh = default;        [SerializeField] private Material material = default;        [SerializeField] private LightProbeProxyVolume _lightProbeProxyVolume = null;        private Matrix4x4[] _matrices = new Matrix4x4[1023];        private Vector4[] _colors = new Vector4[1023];        private float[]            _metallic = new float[1023],            _smoothness = new float[1023];        private MaterialPropertyBlock _block;        private void Awake()        {            for (int i = 0; i &lt; _matrices.Length; i++)            {                _matrices[i] = Matrix4x4.TRS(                    Random.insideUnitSphere * 10f,                    Quaternion.Euler(Random.value * 360f, Random.value * 360f, Random.value * 360f),                    Vector3.one * Random.Range(0.5f, 1.5f));                _colors[i] = new Vector4(Random.value, Random.value, Random.value, Random.Range(0.5f, 1.5f));                _metallic[i] = Random.value &lt; 0.25f ? 1f : 0f;                _smoothness[i] = Random.Range(0.05f, 0.95f);            }        }        private void Update()        {            if (_block == null)            {                _block = new MaterialPropertyBlock();                _block.SetVectorArray(_colorID, _colors);                _block.SetFloatArray(_metallicID, _metallic);                _block.SetFloatArray(_smoothnessID, _smoothness);                if (_lightProbeProxyVolume == null)                {                    Vector3[] positions = new Vector3[1023];                    for (int i = 0; i &lt; _matrices.Length; i++)                    {                        positions[i] = _matrices[i].GetColumn(3);                    }                    SphericalHarmonicsL2[] lightProbes = new SphericalHarmonicsL2[1023];                    Vector4[] occlusionProbes = new Vector4[1023];                    LightProbes.CalculateInterpolatedLightAndOcclusionProbes(positions, lightProbes, occlusionProbes);                    _block.CopySHCoefficientArraysFrom(lightProbes);                    _block.CopyProbeOcclusionArrayFrom(occlusionProbes);                }            }            Graphics.DrawMeshInstanced(                mesh, 0, material, _matrices, 1023, _block,                ShadowCastingMode.On, true, 0, null,                _lightProbeProxyVolume ? LightProbeUsage.UseProxyVolume : LightProbeUsage.CustomProvided,                _lightProbeProxyVolume);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、Dynamic-Batching"><a href="#三、Dynamic-Batching" class="headerlink" title="三、Dynamic Batching"></a>三、Dynamic Batching</h1><h4 id="简述：-1"><a href="#简述：-1" class="headerlink" title="简述："></a>简述：</h4><ul><li>将使用相同材质球的多个小Mesh合并成一个大Mesh，从而减小 DrawCall</li></ul><h4 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>不支持 MaterialPropertyBlock</li></ul><h4 id="使用方式：-1"><a href="#使用方式：-1" class="headerlink" title="使用方式："></a>使用方式：</h4><ul><li> 管线</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">SortingSettings sortingSettings = new SortingSettings(_camera){    criteria = SortingCriteria.CommonOpaque};DrawingSettings drawingSettings = new DrawingSettings(UnlitShaderTagId, sortingSettings){    enableDynamicBatching = useDynamicBatching, //启用动态批处理};drawingSettings.SetShaderPassName(1, LitShaderTagId);FilteringSettings filteringSettings = new FilteringSettings(RenderQueueRange.opaque, renderingLayerMask: (uint) renderingLayerMask);_context.DrawRenderers(_cullingResults, ref drawingSettings, ref filteringSettings);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>禁用 SRP，他的优先级比较高</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">GraphicsSettings.useScriptableRenderPipelineBatching = false;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="四、AlphaTest"><a href="#四、AlphaTest" class="headerlink" title="四、AlphaTest"></a>四、AlphaTest</h1><h4 id="简述：-2"><a href="#简述：-2" class="headerlink" title="简述："></a>简述：</h4><ul><li>是一个典型的不透明物体，也会写入深度，只是有部分像素被丢弃，队列在2450，在不透明之后半透明之前渲染。因为它丢弃了像素，所以不能保证在它后面的物体是否会渲染出来，因此为了性能优化，渲染队列在不透明之后半透明之前渲染</li></ul>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRP_01_CustomRP</title>
      <link href="/BloodSoul.github.io/2022/11/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-01-customrp/"/>
      <url>/BloodSoul.github.io/2022/11/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/guan-xian/srp/srp-01-customrp/</url>
      
        <content type="html"><![CDATA[<h1 id="一、结构"><a href="#一、结构" class="headerlink" title="一、结构"></a>一、结构</h1><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using UnityEngine;using UnityEngine.Rendering;[CreateAssetMenu(menuName = "Rendering/Custom Render Pipeline")]public partial class CustomRenderPipelineAsset : RenderPipelineAsset{protected override RenderPipeline CreatePipeline()    {        return new CustomRenderPipeline();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public partial class CustomRenderPipeline : RenderPipeline{    protected override void Render(ScriptableRenderContext context, Camera[] cameras)    {                }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、渲染"><a href="#二、渲染" class="headerlink" title="二、渲染"></a>二、渲染</h1><h4 id="设置相机相关变量"><a href="#设置相机相关变量" class="headerlink" title="设置相机相关变量"></a>设置相机相关变量</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">//Schedules the setup of Camera specific global Shader variables._context.SetupCameraProperties(_camera);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Cull"><a href="#Cull" class="headerlink" title="Cull"></a>Cull</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private bool Cull(float maxShadowDistance){    if (_camera.TryGetCullingParameters(out ScriptableCullingParameters cullingParameters))    {        cullingParameters.shadowDistance = Mathf.Min(maxShadowDistance, _camera.farClipPlane);        _cullingResults = _context.Cull(ref cullingParameters);        return true;    }    return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="渲染-UI"><a href="#渲染-UI" class="headerlink" title="渲染 UI"></a>渲染 UI</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">if (_camera.cameraType == CameraType.SceneView){    ScriptableRenderContext.EmitWorldGeometryForSceneView(_camera);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RenderDebug"><a href="#RenderDebug" class="headerlink" title="RenderDebug"></a>RenderDebug</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">_buffer.BeginSample(SampleName);_buffer.EndSample(SampleName);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="执行CommandBuffer"><a href="#执行CommandBuffer" class="headerlink" title="执行CommandBuffer"></a>执行CommandBuffer</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private void ExecuteBuffer(){    _context.ExecuteCommandBuffer(_buffer);    _buffer.Clear();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置渲染目标"><a href="#设置渲染目标" class="headerlink" title="设置渲染目标"></a>设置渲染目标</h4><ul><li>需要与当前屏幕上的颜色进行混合是，需要使用 RenderBufferLoadAction.Load</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">_buffer.SetRenderTarget(    BuiltinRenderTextureType.CameraTarget,    finalBlendMode.destination == BlendMode.Zero ? RenderBufferLoadAction.DontCare : RenderBufferLoadAction.Load,    RenderBufferStoreAction.Store);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置绘制渲染目标中的那些区域"><a href="#设置绘制渲染目标中的那些区域" class="headerlink" title="设置绘制渲染目标中的那些区域"></a>设置绘制渲染目标中的那些区域</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">_buffer.SetViewport(_camera.pixelRect);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="渲染不透明物体"><a href="#渲染不透明物体" class="headerlink" title="渲染不透明物体"></a>渲染不透明物体</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">SortingSettings sortingSettings = new SortingSettings(_camera){    criteria = SortingCriteria.CommonOpaque};DrawingSettings drawingSettings = new DrawingSettings(UnlitShaderTagId, sortingSettings);drawingSettings.SetShaderPassName(1, LitShaderTagId);FilteringSettings filteringSettings = new FilteringSettings(RenderQueueRange.opaque, renderingLayerMask: (uint) renderingLayerMask);_context.DrawRenderers(_cullingResults, ref drawingSettings, ref filteringSettings);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="渲染-skybox"><a href="#渲染-skybox" class="headerlink" title="渲染 skybox"></a>渲染 skybox</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">_context.DrawSkybox(_camera);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="渲染半透明物体"><a href="#渲染半透明物体" class="headerlink" title="渲染半透明物体"></a>渲染半透明物体</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">sortingSettings.criteria = SortingCriteria.CommonTransparent;drawingSettings.sortingSettings = sortingSettings;filteringSettings.renderQueueRange = RenderQueueRange.transparent;_context.DrawRenderers(_cullingResults, ref drawingSettings, ref filteringSettings);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绘制不支持的-Shader"><a href="#绘制不支持的-Shader" class="headerlink" title="绘制不支持的 Shader"></a>绘制不支持的 Shader</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private static readonly ShaderTagId[] LegacyShaderTagIds = new[]{    new ShaderTagId("Always"),    new ShaderTagId("ForwardBase"),    new ShaderTagId("PrepassBase"),    new ShaderTagId("Vertex"),    new ShaderTagId("VertexLMRGBM"),    new ShaderTagId("VertexLM")};partial void DrawUnsupportedShaders(){    if (_errorMaterial == null)    {        _errorMaterial = new Material(Shader.Find("Hidden/InternalErrorShader"));    }    DrawingSettings drawingSettings = new DrawingSettings(LegacyShaderTagIds[0], new SortingSettings(_camera))    {        overrideMaterial = _errorMaterial    };    for (int i = 1; i &lt; LegacyShaderTagIds.Length; i++)    {        drawingSettings.SetShaderPassName(i, LegacyShaderTagIds[i]);    }    FilteringSettings filteringSettings = FilteringSettings.defaultValue;    _context.DrawRenderers(_cullingResults, ref drawingSettings, ref filteringSettings);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="渲染-Gizmos"><a href="#渲染-Gizmos" class="headerlink" title="渲染 Gizmos"></a>渲染 Gizmos</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">_context.DrawGizmos(_camera, GizmoSubset.PreImageEffects);_context.DrawGizmos(_camera, GizmoSubset.PostImageEffects);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apktool工具使用</title>
      <link href="/BloodSoul.github.io/2022/07/22/gamedevelop/gamecontent/aroundfunction/you-xi-an-quan/jie-bao/apktool-gong-ju-shi-yong/"/>
      <url>/BloodSoul.github.io/2022/07/22/gamedevelop/gamecontent/aroundfunction/you-xi-an-quan/jie-bao/apktool-gong-ju-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="apktool工具使用"><a href="#apktool工具使用" class="headerlink" title="apktool工具使用"></a>apktool工具使用</h1><p><a href="https://gitee.com/mirrors/Apktool?utm_source=alading&amp;utm_campaign=repo">https://gitee.com/mirrors/Apktool?utm_source=alading&amp;utm_campaign=repo</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220722214604673.png" alt="image-20220722214604673" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220722214641841.png" alt="image-20220722214641841" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> AroundFunction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏安全 </tag>
            
            <tag> 游戏解包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity报错集锦</title>
      <link href="/BloodSoul.github.io/2022/07/22/gamedevelop/gameengine/unity/unity-bao-cuo-ji-jin/unity-bao-cuo-ji-jin/"/>
      <url>/BloodSoul.github.io/2022/07/22/gamedevelop/gameengine/unity/unity-bao-cuo-ji-jin/unity-bao-cuo-ji-jin/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Unity-常见问题-之-NDK-ndk-报错-Unity-requires-NDK-r19-64-bit-19-0-05232133"><a href="#1-Unity-常见问题-之-NDK-ndk-报错-Unity-requires-NDK-r19-64-bit-19-0-05232133" class="headerlink" title="1 Unity 常见问题 之 NDK (ndk)报错 Unity requires NDK r19 (64-bit)(19.0.05232133)"></a>1 Unity 常见问题 之 NDK (ndk)报错 Unity requires NDK r19 (64-bit)(19.0.05232133)</h4><pre class="line-numbers language-none"><code class="language-none">&lt;https://blog.csdn.net/u014361280/article/details/113845080&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721231659886.png" alt="image-20220721231659886" style="zoom:67%;"> <p>首先下载 Android-NDK r 19 版本</p><p>点击链接直接下载ndk <a href="https://dl.google.com/android/repository/android-ndk-r19-windows-x86_64.zip">https://dl.google.com/android/repository/android-ndk-r19-windows-x86_64.zip</a></p><p>来自 <a href="https://blog.csdn.net/u014361280/article/details/113845080">https://blog.csdn.net/u014361280/article/details/113845080</a> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721231957480.png" alt="image-20220721231957480" style="zoom:67%;"> <h4 id="2【解决】Moving-Logs-AssetImportWorker-1-log-to-Logs-AssetImportWorker-1-prev-log-另一个程序正在使用此文件，进程无法访问。"><a href="#2【解决】Moving-Logs-AssetImportWorker-1-log-to-Logs-AssetImportWorker-1-prev-log-另一个程序正在使用此文件，进程无法访问。" class="headerlink" title="2【解决】Moving Logs/AssetImportWorker 1.log to Logs/AssetImportWorker 1-prev.log: 另一个程序正在使用此文件，进程无法访问。"></a>2【解决】Moving Logs/AssetImportWorker 1.log to Logs/AssetImportWorker 1-prev.log: 另一个程序正在使用此文件，进程无法访问。</h4><p>来自 <a href="https://blog.csdn.net/qq_51026638/article/details/120861977">https://blog.csdn.net/qq_51026638/article/details/120861977</a> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220722210314763.png" alt="image-20220722210314763" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity报错集锦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小坑日记</title>
      <link href="/BloodSoul.github.io/2022/07/21/gamedevelop/gameengine/unity/xiao-keng-ri-ji/xiao-keng-ri-ji/"/>
      <url>/BloodSoul.github.io/2022/07/21/gamedevelop/gameengine/unity/xiao-keng-ri-ji/xiao-keng-ri-ji/</url>
      
        <content type="html"><![CDATA[<p>一、Shader 相关</p><ol><li>Unity的选中描边，在AlphaTest队列中的shader需要里面有 _MainTex属性定义，不然不能正确显示，烘焙也会出错，主颜色必须用 _MainTex 定义</li></ol><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721224257454.png" alt="image-20220721224257454" style="zoom:67%;"> <ol start="2"><li>Projection Size 0.5 为1米，Orthographic 相机的 orthographicSize 即为 0.5。orthographicSize = 0.5<ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721230034176.png" alt="image-20220721230034176" style="zoom:67%;"> </li></ol></li></ol><p>二、Editor 相关</p><ol><li><p>用代码修改场景脚本的引用关系，Unity默认无法识别，导致无法保存场景，也就无法正常保存序列化资源</p><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721224822452.png" alt="image-20220721224822452" style="zoom:67%;"> </li></ol></li><li><p>使用Context.DrawRender 方法时，如果没有其他 CommandBuffer 命令，会默认在最外侧</p><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721225101807.png" alt="image-20220721225101807" style="zoom:67%;">         </li><li>需要先执 Context.ExecuteCommandBuffer 一下，然后清除buffer,才能显示正常<ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721225159391.png" alt="image-20220721225159391" style="zoom:67%;"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721225306004.png" alt="image-20220721225306004" style="zoom:67%;"> </li></ol></li></ol></li></ol><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小坑日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity与Android联合开发五Unity调用安卓方法汇总</title>
      <link href="/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/wu-unity-diao-yong-an-zhuo-fang-fa-hui-zong/"/>
      <url>/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/wu-unity-diao-yong-an-zhuo-fang-fa-hui-zong/</url>
      
        <content type="html"><![CDATA[<p>Unity3d接入安卓aar详细过程</p><p><a href="https://blog.csdn.net/qq_21267961/article/details/111548739">https://blog.csdn.net/qq_21267961/article/details/111548739</a> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628231331840.png" alt="image-20220628231331840" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628231355219.png" alt="image-20220628231355219" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628231413732.png" alt="image-20220628231413732" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628231430789.png" alt="image-20220628231430789" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628231450229.png" alt="image-20220628231450229" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628231552378.png" alt="image-20220628231552378" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> AroundFunction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity与Android联合开发四SDK打包问题汇总</title>
      <link href="/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/si-sdk-da-bao-wen-ti-hui-zong/"/>
      <url>/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/si-sdk-da-bao-wen-ti-hui-zong/</url>
      
        <content type="html"><![CDATA[<p>问题一：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628230743780.png" alt="image-20220628230743780" style="zoom:67%;"> <p>修改方法：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628230808663.png" alt="image-20220628230808663" style="zoom:67%;"> <p>问题二：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628230834668.png" alt="image-20220628230834668" style="zoom:67%;"> <p>修改方法：</p><p>Aar 中 AndroidManifest label 与 unity Plugins/android AndroidManifest 文件中的 label冲突，需要删掉aar中的</p><p>问题三：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628230906939.png" alt="image-20220628230906939" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628230928997.png" alt="image-20220628230928997" style="zoom:67%;"> <p>解决办法：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628230954200.png" alt="image-20220628230954200" style="zoom:67%;"> <p>改成 3.4.0</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628231025693.png" alt="image-20220628231025693" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> AroundFunction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity与Android联合开发三启动自定义Activity</title>
      <link href="/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/san-qi-dong-zi-ding-yi-activity/"/>
      <url>/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/san-qi-dong-zi-ding-yi-activity/</url>
      
        <content type="html"><![CDATA[<p>前置知识：</p><p><strong>Android之Activity全面解析</strong></p><p><a href="https://www.jianshu.com/p/476087b4c087">https://www.jianshu.com/p/476087b4c087</a> </p><p><strong>Android Intent用法总结</strong></p><p><a href="https://www.jianshu.com/p/67d99a82509b">https://www.jianshu.com/p/67d99a82509b</a> </p><p><strong>官方文档：</strong></p><p><strong>Activity 简介</strong></p><p><a href="https://developer.android.com/guide/components/activities/intro-activities?hl=zh-cn">https://developer.android.com/guide/components/activities/intro-activities?hl=zh-cn</a> </p><p><strong>与其他应用交互</strong></p><p><a href="https://developer.android.com/training/basics/intents?hl=zh-cn">https://developer.android.com/training/basics/intents?hl=zh-cn</a> </p><p>实践</p><p>在Helper类中加入如下代码</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628230341656.png" alt="image-20220628230341656" style="zoom:67%;"> <p>并在 aar 中的 AndroidManifest 中声明自己的 activity</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628230407006.png" alt="image-20220628230407006" style="zoom:67%;"> <p>打包后如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628230433413.png" alt="image-20220628230433413" style="zoom:67%;"> <p>点击按钮会弹出自己的空Activity</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628230456863.png" alt="image-20220628230456863" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> AroundFunction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity与Android联合开发一环境配置</title>
      <link href="/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/yi-huan-jing-pei-zhi/"/>
      <url>/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/yi-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>创建空工程</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628221838891.png" alt="image-20220628223335488" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628221910462.png" alt="image-20220628223335488" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628224643473.png" alt="image-20220628224643473" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628222002170.png" alt="image-20220628223335488" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628224919035.png" alt="image-20220628224919035" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628222055175.png" alt="image-20220628223335488" style="zoom:67%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628222118035.png" alt="image-20220628223335488" style="zoom:67%;">  <p>将Unity的插件拷贝到如下目录</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628222159469.png" alt="image-20220628223335488" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628225147597.png" alt="image-20220628225147597" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628222249123.png" alt="image-20220628223335488" style="zoom:67%;"> <p><strong>如果需要作为主</strong>Activity<strong>扩展</strong>Unity ，还需要把 UnityPlayerActivity 拷贝到如下地方</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628222353822.png" alt="image-20220628223335488" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628222410538.png" alt="image-20220628223335488" style="zoom:67%;"> <p>修改Unity的库作为编译用，不打包出去，不然会包冲突</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628222446686.png" alt="image-20220628223335488" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> AroundFunction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity与Android联合开发二导出AAR</title>
      <link href="/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/er-dao-chu-aar/"/>
      <url>/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/er-dao-chu-aar/</url>
      
        <content type="html"><![CDATA[<p>新建一个 java 类，示例取名为：MyToUnityHelper</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628223335488.png" alt="image-20220628223335488" style="zoom:67%;"> <p>写一个简单的方法：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628223412670.png" alt="image-20220628223412670" style="zoom:67%;"> <p><strong>编译成 aar</strong></p><p>选中 MyToUnityLibrary 模块，buid-&gt;Make Module xxx</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628223521102.png" alt="image-20220628223521102" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628223541298.png" alt="image-20220628223541298" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628223557619.png" alt="image-20220628223557619" style="zoom:67%;"> <p>拷贝到Unity Assets/Plugins/Android 下</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628223627692.png" alt="image-20220628223627692" style="zoom:67%;"> <p>写如下代码，打包测试</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628223702057.png" alt="image-20220628223702057" style="zoom:67%;"> <p>手机上显示如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220628223738002.png" alt="image-20220628223738002" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> AroundFunction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>屏幕雨滴模拟</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/tian-qi/yu/ping-mu-yu-di-mo-ni/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/tian-qi/yu/ping-mu-yu-di-mo-ni/</url>
      
        <content type="html"><![CDATA[<h1 id="屏幕雨滴模拟"><a href="#屏幕雨滴模拟" class="headerlink" title="屏幕雨滴模拟"></a>屏幕雨滴模拟</h1><p><a href="https://zhuanlan.zhihu.com/p/298606553">https://zhuanlan.zhihu.com/p/298606553</a></p><p><a href="https://www.shadertoy.com/view/ltffzl">https://www.shadertoy.com/view/ltffzl</a></p><p><a href="https://github.com/ya7gisa0/Unity-Raindrops">https://github.com/ya7gisa0/Unity-Raindrops</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222163123843.png" alt="image-20211222163123843" style="zoom:67%;"> <p>实现的困难难点：</p><p>水珠模拟</p><ol><li><ol><li><p>通过 length 对 UV 进行画圆，UV中心需要从左下角移动到中间</p></li><li><p>通过对 UV的x,y是均等缩放,配合      frac/num,实现变形效果</p></li><li><p>使用偏移后的UV,对贴图进行采样,达到扰动的效果 </p></li></ol></li></ol><p>水珠流动的模拟</p><ol><li><ol><li><p>通过对 整体UV施加向下的偏移 uv.y += t * 0.25;</p></li><li><p>通过对 frac 后的uv.y,进行周期性偏移 uv.y = -sin(t + sin(t + sin(t) *      0.5)) * 0.45，实现周期性快速下落</p><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222163202094.png" alt="image-20211222163202094" style="zoom: 80%;"> </li></ol></li><li><p>通过对 frac 后的uv.x，进行周期性的偏移，uv.x = sin(3 * w) * pow(sin(w), 6) * 0.45; 实现突然的左右移动</p><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222163241413.png" alt="image-20211222163241413" style="zoom: 80%;">  </li></ol></li><li><p>使用 N21 伪随机方法，实现随机左右移动和上下移动</p><ol><li>// 求伪随机数<pre><code>half N21(half2 p){    p = frac(p * half2(123.34, 345.45));    p += dot(p, p + 34.345);    return frac(p.x + p.y);}</code></pre></li></ol></li><li><p>雨滴下落</p><ol><li><a href="https://www.desmos.com/calculator/ffavoe5vd2?lang=zh-CN">https://www.desmos.com/calculator/ffavoe5vd2?lang=zh-CN</a></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222163449014.png" alt="image-20211222163449014" style="zoom:80%;"> </li></ol></li><li><p>水珠流动痕迹的模拟</p></li><li><ol><li>通过对 UV.x 进行 abs后，然后使用较小的 smoothstep fogTrail *= smoothstep(0.5, y, gv.y);//将水滴做个渐变，从上到下从无到有,      0.5是以gv为坐标的，顶部0.5，底部-0.5</li><li>对 UV.y 方向也用smoothstep进行渐变计算 fogTrail      *= smoothstep(0.05, 0.04, abs(dropPos.x) * _Test);// 两边雾的效果缩小下</li></ol></li></ol></li></ol><p><strong>小技巧</strong></p><p>将UV零点移动到中心，可以使用 Length 和 SmoothStep 进行画圆，正反圆 Mask</p><p>half drop = smoothstep(0.5, 0, length(gv));</p><p>half drop = smoothstep(0, 0.5, length(gv));</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222163551284.png" alt="image-20211222163551284" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222163600557.png" alt="image-20211222163600557" style="zoom:50%;"> <p>将 UV的 y进行 frac 然后除以拉长程度，可以的到如下效果</p><p>half2 gv = frac(uv) - 0.5;//-0.5，将左下角的原点调整为中间</p><p>gv.y = (frac(gv.y * 1) - 0.25) / _Test;</p><p>half drop = smoothstep(0.05, 0.03, length(gv));//画圆, length(gv)，可以理解为半径</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222163619053.png" alt="image-20211222163619053" style="zoom:50%;"> <p>将 frac 里面乘以2 如下：</p><p>gv.y = (frac(gv.y * 2) - 0.25) / _Test;</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222163641460.png" alt="image-20211222163641460" style="zoom:50%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 场景 </tag>
            
            <tag> 天气 </tag>
            
            <tag> 雨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>场景雨材质效果</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/tian-qi/yu/chang-jing-yu-cai-zhi-xiao-guo/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/tian-qi/yu/chang-jing-yu-cai-zhi-xiao-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="场景雨材质模拟"><a href="#场景雨材质模拟" class="headerlink" title="场景雨材质模拟"></a>场景雨材质模拟</h1><p><a href="https://zhuanlan.zhihu.com/p/182459720">https://zhuanlan.zhihu.com/p/182459720</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162219436.png" alt="image-20211222162219436" style="zoom:67%;"> <p>实现难点：</p><p>斜面和平面区分</p><ol><li><ol><li>通过法线和竖直向上的朝向的夹角，确定</li></ol></li></ol><p>多点涟漪</p><ol><li><ol><li><p>个人想法： 非精细控制可以使用 frac UV + 圆形SDF 进行模拟</p></li><li><p>别人做法一：</p></li><li><ol><li><p><a href="https://zhuanlan.zhihu.com/p/182459720">https://zhuanlan.zhihu.com/p/182459720</a></p></li><li><p>使用 frac 时间，与一个mask贴图作差，然后和一个特定的数字0.05算距离，范围【0，0.95】</p></li><li><p>最后在除以 0.05，抠出圆圈边缘，范围【0,19】</p></li><li><p>最后错位UV采样两次贴图，使用       abs(sin(time) * 0.5) 作为因子来对两张贴图进行 lerp，进行模拟</p></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162251026.png" alt="image-20211222162251026" style="zoom: 50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162311993.png" alt="image-20211222162311993" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162334826.png" alt="image-20211222162334826" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162351697.png" alt="image-20211222162351697" style="zoom:67%;"> </li></ol></li></ol></li><li><p>别人做法二：</p></li><li><ol><li>使用贴图采样模拟</li><li><a href="https://zhuanlan.zhihu.com/p/83219238">https://zhuanlan.zhihu.com/p/83219238</a></li><li> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162438456.png" alt="image-20211222162438456" style="zoom:50%;"> </li><li>我来分别解释一下，R通道代表了涟漪生成的范围，并且带有淡出的效果，GB两个通道是高度，差不多就是法线图的效果，A通道用来存储时间差，从白到黑不同的颜色值代表了不同的时间</li></ol></li><li><p>别人做法三:</p><ol><li>使用贴图模拟加 voronoi 噪声 <a href="https://zhuanlan.zhihu.com/p/92939613">https://zhuanlan.zhihu.com/p/92939613</a></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162716365.png" alt="image-20211222162716365" style="zoom:67%;"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162728871.png" alt="image-20211222162728871" style="zoom:67%;"> </li></ol></li></ol><p>雨滴流动和水痕</p><ol><li><p>个人想法：可以使用本篇最顶部的数学方式</p></li><li><p>别人做法一：</p></li><li><ol><li><p>使用一张水痕图加一张Noise贴图，进行走UV动画</p></li><li><p>使用世界坐标的 xy,zy进行平面映射</p><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162832422.png" alt="image-20211222162832422" style="zoom:50%;"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162843558.png" alt="image-20211222162843558" style="zoom: 50%;"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222162857486.png" alt="image-20211222162857486" style="zoom:50%;"> </li></ol></li></ol></li></ol><p>雨的质感模拟</p><ol><li><ol><li>粗糙度降低</li><li>亮度降低，整体颜色变暗</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 场景 </tag>
            
            <tag> 天气 </tag>
            
            <tag> 雨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可交互水面涟漪</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/shui/ke-jiao-hu-shui-mian-lian-yi/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/shui/ke-jiao-hu-shui-mian-lian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="可交互水面涟漪"><a href="#可交互水面涟漪" class="headerlink" title="可交互水面涟漪"></a>可交互水面涟漪</h1><p>实现难点：</p><ol><li><p>多点水面检测，如何传递</p></li><li><ol><li>个人想法：通过射线检测，配合差值器的数组类型进行实现，间隔检测时间比如0.1秒，避免数据过大</li></ol></li><li><p>水纹相互扩散的实现</p></li><li><ol><li><p>个人想法：</p></li><li><ol><li>使用一个圆形 SDF 距离扩散，设定一个最大值，达到后消失</li><li>使用粒子系统，由粒子系统进行接管水纹扩散的大小曲线控制</li></ol></li><li><p>调研的方法：</p></li><li><ol><li><p>方法一：使用有限分差波模拟。 通过一张buffer，使用纹素移动，分别采样上下左右四次，然后进行相加并与上次结果相减，乘以阻尼后写回buffer <a href="https://www.shadertoy.com/view/4sd3WB">https://www.shadertoy.com/view/4sd3WB</a>  <a href="https://rice.moonedit.com/edit/?h=W2L7zN">https://rice.moonedit.com/edit/?h=W2L7zN</a></p><p>​        <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222160251599.png" alt="image-20211222160251599" style="zoom:67%;"> </p></li><li><p>方法二：使用波动方程进行计算模拟</p><ol><li><p><a href="https://zhuanlan.zhihu.com/p/108845039">https://zhuanlan.zhihu.com/p/108845039</a></p><p><a href="https://github.com/dreamfairy/interactivity-waterplane">https://github.com/dreamfairy/interactivity-waterplane</a></p></li></ol><p>​        <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222160337232.png" alt="image-20211222160337232" style="zoom:50%;"> </p></li><li><p>方法三：使用RT进行渲染</p><ol><li><a href="https://www.youtube.com/watch?v=jclxfdS3a3w">Water Simulation using CustomRenderTexture from      Unity 2017.1</a></li><li><a href="https://github.com/hecomi/UnityWaterSurface">https://github.com/hecomi/UnityWaterSurface</a></li><li><a href="https://youtu.be/jclxfdS3a3w">https://youtu.be/jclxfdS3a3w</a><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222160448854.png" alt="image-20211222160448854" style="zoom:67%;"> </li></ol></li></ol></li><li><p>方法四：使用粒子系统，分层渲染 </p><ol><li><p><a href="https://www.patreon.com/posts/24192529">https://www.patreon.com/posts/24192529</a></p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222160646357.png" alt="image-20211222160646357" style="zoom:50%;"> </p></li><li><p><a href="https://www.artstation.com/blogs/mattmurch/np4y/code-free-interactive-water">https://www.artstation.com/blogs/mattmurch/np4y/code-free-interactive-water</a></p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222160743974.png" alt="image-20211222160743974" style="zoom:67%;"> </p></li></ol></li></ol></li><li><ol start="5"><li><p>方法五：使用粒子系统加网格变形</p><ol><li><p><a href="https://www.reddit.com/r/Unity3D/comments/d8yeoa/interactive_water_using_shader_graph_and_mesh/?utm_medium=android_app&amp;utm_source=share">https://www.reddit.com/r/Unity3D/comments/d8yeoa/interactive_water_using_shader_graph_and_mesh/?utm_medium=android_app&amp;utm_source=share</a></p></li><li><p><a href="https://catlikecoding.com/unity/tutorials/mesh-deformation/">https://catlikecoding.com/unity/tutorials/mesh-deformation/</a></p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222160846029.png" alt="image-20211222160846029" style="zoom:67%;"> </p></li></ol></li></ol></li><li><ol start="6"><li><p>方法六：使用 sin 波叠加</p><p>​        [Ripple Water Shader - Unity CG/C# Tutorial [Part 1/3]</p><p>​            <a href="https://youtu.be/UfX9dzhBhg0">https://youtu.be/UfX9dzhBhg0</a></p><p>​            <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222160933237.png" alt="image-20211222160933237" style="zoom: 67%;"></p><p>​            <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222161043227.png" alt="image-20211222161043227" style="zoom:67%;"> </p></li></ol></li></ol></li><li><p>水纹扩散相交处的融合处理</p></li><li><ol><li>个人想法：直接结果相加</li><li>调研的方法：直接相加</li></ol></li><li><p>旧水纹与刚检测到的新水纹的叠加融合处理</p></li><li><ol><li>个人想法：直接结果相加</li><li>调研的方法：直接相加</li></ol></li></ol><p><strong>水纹</strong></p><p><a href="https://www.shadertoy.com/view/Xsd3DB">https://www.shadertoy.com/view/Xsd3DB</a></p><p><a href="https://github.com/ya7gisa0/Unity-Wave-Propagation-Water-Ripple">https://github.com/ya7gisa0/Unity-Wave-Propagation-Water-Ripple</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222161218788.png" alt="image-20211222161218788" style="zoom:67%;"> <p>上述效果的原始版本</p><p><a href="https://www.shadertoy.com/view/4sd3WB">https://www.shadertoy.com/view/4sd3WB</a></p><p><a href="https://rice.moonedit.com/edit/?h=W2L7zN">https://rice.moonedit.com/edit/?h=W2L7zN</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222161252398.png" alt="image-20211222161252398" style="zoom:67%;"> <p>源码</p><p><a href="https://rice.moonedit.com/edit/?h=W2L7zN">https://rice.moonedit.com/edit/?h=W2L7zN</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222161318948.png" alt="image-20211222161318948" style="zoom:50%;"> <p>2D波动方程</p><p><a href="https://www.youtube.com/watch?v=Whp6jolTu34">Solving the 2D Wave Equation</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 场景 </tag>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本学习</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/assisttool/ban-ben-guan-li/ming-ling-xing/shell-jiao-ben-xue-xi/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/assisttool/ban-ben-guan-li/ming-ling-xing/shell-jiao-ben-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-脚本学习"><a href="#Shell-脚本学习" class="headerlink" title="Shell 脚本学习"></a>Shell 脚本学习</h1><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p><a href="https://www.runoob.com/linux/linux-shell.html">https://www.runoob.com/linux/linux-shell.html</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># echo "Shell HAHAHA"</span><span class="token comment"># 只读变量</span><span class="token builtin class-name">readonly</span> <span class="token assign-left variable">my_name</span><span class="token operator">=</span><span class="token string">"klj35"</span><span class="token comment"># 定义变量</span><span class="token assign-left variable">my_name1</span><span class="token operator">=</span><span class="token string">"fdsfsd"</span><span class="token comment"># 删除变量</span><span class="token builtin class-name">unset</span> my_name1<span class="token comment"># echo ${my_name}</span><span class="token comment"># echo ${my_name1}</span><span class="token comment"># 拼接字符串</span><span class="token assign-left variable">str1</span><span class="token operator">=</span><span class="token string">"My Name <span class="token variable">${my_name}</span>"</span><span class="token comment"># echo ${str1}</span><span class="token comment"># 获取字符串长度</span><span class="token assign-left variable">str1Len</span><span class="token operator">=</span><span class="token variable">${<span class="token operator">#</span>str1}</span><span class="token comment"># echo ${str1Len}</span><span class="token comment"># 脚本传参</span><span class="token comment"># echo $0</span><span class="token comment"># 数组</span><span class="token assign-left variable">my_arry</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"haha1"</span> <span class="token string">"haha2"</span> <span class="token string">"haha3"</span><span class="token punctuation">)</span><span class="token comment"># echo ${my_arry[0]}</span><span class="token comment"># echo ${my_arry[1]}</span><span class="token comment"># 数组长度</span><span class="token comment"># echo ${#my_arry[*]}</span><span class="token comment"># 遍历数组</span><span class="token comment"># for item in ${my_arry[*]}; do</span><span class="token comment">#     echo ${item}</span><span class="token comment"># done</span><span class="token comment"># 数学计算,注意反引号和空格</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> + <span class="token number">2</span><span class="token variable">`</span></span><span class="token comment"># echo ${sum}</span><span class="token comment"># 数学运算二,乘法要用反斜杠</span><span class="token assign-left variable">num1</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">num2</span><span class="token operator">=</span><span class="token number">2</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $<span class="token punctuation">{</span>num1<span class="token punctuation">}</span> <span class="token punctuation">\</span>* $<span class="token punctuation">{</span>num2<span class="token punctuation">}</span> <span class="token punctuation">\</span>* $<span class="token punctuation">{</span>num2<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token comment"># echo ${sum}</span><span class="token comment"># if 语句, then 写在同一行要加 ‘;’</span><span class="token comment"># if ((${num1} == ${num2})); then</span><span class="token comment">#     echo "1"</span><span class="token comment"># else</span><span class="token comment">#     echo "2"</span><span class="token comment"># fi</span><span class="token comment"># 重定向输出</span><span class="token comment"># echo "echo \"输出测试\"" &gt; file1.text</span><span class="token comment"># ls &gt; file2.text</span><span class="token comment"># 查看文件内容</span><span class="token comment"># cat file2.text</span><span class="token comment"># 错误输出重定向</span><span class="token comment"># git status 2&gt;&gt;err.log</span><span class="token comment"># 同时保存错误和正常于两个文件内</span><span class="token comment"># ls &gt;&gt;out.log 2&gt;&gt;err.log</span><span class="token comment"># 输出重定向到变量</span><span class="token assign-left variable">ls_names</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span><span class="token comment"># echo ${ls_names}</span><span class="token comment"># echo ${ls_names} &gt;&gt; file4.text</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Shell字符串拼接（连接、合并）"><a href="#Shell字符串拼接（连接、合并）" class="headerlink" title="Shell字符串拼接（连接、合并）"></a>Shell字符串拼接（连接、合并）</h3><p><a href="http://c.biancheng.net/view/1114.html">http://c.biancheng.net/view/1114.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222153729320.png" alt="image-20211222153729320" style="zoom:67%;"> <h3 id="Linux-Shell重定向（输入输出重定向）"><a href="#Linux-Shell重定向（输入输出重定向）" class="headerlink" title="Linux Shell重定向（输入输出重定向）"></a>Linux Shell重定向（输入输出重定向）</h3><p>Linux Shell重定向（输入输出重定向）精讲</p><p><a href="http://c.biancheng.net/view/942.html">http://c.biancheng.net/view/942.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222153927315.png" alt="image-20211222153927315" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222153941338.png" alt="image-20211222153941338" style="zoom:67%;"> <p>shell 如何将命令的执行结果重定向到变量</p><p><a href="https://blog.csdn.net/microchenhong/article/details/91399031">https://blog.csdn.net/microchenhong/article/details/91399031</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222154009039.png" alt="image-20211222154009039" style="zoom:80%;"> <h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>比对两个分支，获取新增资源</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 分支一的名称</span><span class="token assign-left variable">branch1</span><span class="token operator">=</span><span class="token string">"分支一的名称"</span> <span class="token comment"># 分支二的名称</span><span class="token assign-left variable">branch2</span><span class="token operator">=</span><span class="token string">"分支二的名称"</span> <span class="token comment"># 保存的文件名</span><span class="token assign-left variable">save_file_name</span><span class="token operator">=</span><span class="token string">"new_asset_list"</span>  <span class="token assign-left variable">timeStr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d_%H_%M_%S"</span><span class="token variable">)</span></span><span class="token assign-left variable">final_file_name</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${save_file_name}</span>__<span class="token variable">${timeStr}</span>.txt"</span> <span class="token assign-left variable">results</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> <span class="token function">diff</span> --name-status $<span class="token punctuation">{</span>branch1<span class="token punctuation">}</span> $<span class="token punctuation">{</span>branch2<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">"^A.*"</span><span class="token variable">)</span></span><span class="token keyword">for</span> <span class="token for-or-select variable">item</span> <span class="token keyword">in</span> <span class="token variable">${results}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span>${#item} <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token variable">${item}</span>        <span class="token builtin class-name">echo</span> <span class="token variable">${item}</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">${final_file_name}</span>    <span class="token keyword">fi</span><span class="token keyword">done</span> <span class="token builtin class-name">echo</span> <span class="token string">"导出完成,已保存到文件: <span class="token variable">${final_file_name}</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> AssistTool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPR技术发展</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shi-jue-wai-guan/zhao-se/npr/npr-ji-zhu-fa-zhan/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shi-jue-wai-guan/zhao-se/npr/npr-ji-zhu-fa-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="NPR技术发展"><a href="#NPR技术发展" class="headerlink" title="NPR技术发展"></a>NPR技术发展</h1><p>卡通渲染学习总结</p><p><a href="https://zhuanlan.zhihu.com/p/163791090">https://zhuanlan.zhihu.com/p/163791090</a></p><p>Unity大咖作客｜腾讯TA大咖对卡通渲染风格及影视化的探索（上）</p><p><a href="https://zhuanlan.zhihu.com/p/433590735">https://zhuanlan.zhihu.com/p/433590735</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222153106619.png" alt="image-20211222153106619" style="zoom:67%;"> <p>描线发展</p><p><a href="https://api.academy.163.com/course/careerList?order=1&amp;courseTap=11">https://api.academy.163.com/course/careerList?order=1&amp;courseTap=11</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222152848487.png" alt="image-20211222152848487" style="zoom:67%;"> <p>原神各个级别的渲染对比</p><p><a href="https://www.zhihu.com/zvideo/1347865335270404097">https://www.zhihu.com/zvideo/1347865335270404097</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222153154266.png" alt="image-20211222153154266" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视觉外观 </tag>
            
            <tag> 着色 </tag>
            
            <tag> NPR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像修复工具</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/assisttool/chang-yong-gong-ju/tu-xiang-xiu-fu-gong-ju/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/assisttool/chang-yong-gong-ju/tu-xiang-xiu-fu-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="Real-ESRGAN"><a href="#Real-ESRGAN" class="headerlink" title="Real-ESRGAN"></a>Real-ESRGAN</h1><p><a href="https://github.com/xinntao/Real-ESRGAN/blob/master/README_CN.md">https://github.com/xinntao/Real-ESRGAN/blob/master/README_CN.md</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222151712609.png" alt="image-20211222151712609" style="zoom: 67%;"> ]]></content>
      
      
      <categories>
          
          <category> AssistTool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络同步</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/gameplay/wang-luo-tong-bu/wang-luo-tong-bu/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/gameplay/wang-luo-tong-bu/wang-luo-tong-bu/</url>
      
        <content type="html"><![CDATA[<p><strong>Network Programming in Game Development - 游戏开发中的网络编程</strong></p><p><a href="https://github.com/Caizc/cai-knowledge-base/blob/master/hacking/Network%20Programming%20in%20Game%20Development.md">https://github.com/Caizc/cai-knowledge-base/blob/master/hacking/Network%20Programming%20in%20Game%20Development.md</a></p>]]></content>
      
      
      <categories>
          
          <category> GamePlay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shader性能分析</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/shader-xing-neng-fen-xi/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/shader-xing-neng-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Shader性能分析"><a href="#Shader性能分析" class="headerlink" title="Shader性能分析"></a>Shader性能分析</h1><p><strong>How to Analyze the Performance Cost of Your Unity Shaders</strong></p><p><a href="https://thegamedev.guru/unity-gpu-performance/shader-cost-analysis-mali-offline-compiler/">https://thegamedev.guru/unity-gpu-performance/shader-cost-analysis-mali-offline-compiler/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222145929544.png" alt="image-20211222145929544" style="zoom: 50%;"> <p><strong>Accelerate your shaders with Mali Offline Compiler 7.0</strong></p><p><a href="https://community.arm.com/arm-community-blogs/b/graphics-gaming-and-vr-blog/posts/accelerating-shader-programs-with-mali-offline-compiler-7?_ga=2.253927496.1507573389.1638757550-1227176563.1636628135">https://community.arm.com/arm-community-blogs/b/graphics-gaming-and-vr-blog/posts/accelerating-shader-programs-with-mali-offline-compiler-7?_ga=2.253927496.1507573389.1638757550-1227176563.1636628135</a></p><p><strong>Arm Mali Offline Compiler User Guide Revision: Version 7.4</strong></p><p><a href="https://developer.arm.com/documentation/101863/latest?_ga=2.177440869.1507573389.1638757550-1227176563.1636628135">https://developer.arm.com/documentation/101863/latest?_ga=2.177440869.1507573389.1638757550-1227176563.1636628135</a></p><p>Malioc shader.vert</p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分析工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kajiya-kay头发渲染</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/jiao-se/tou-fa-xuan-ran/kajiya-kay-tou-fa-xuan-ran/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/jiao-se/tou-fa-xuan-ran/kajiya-kay-tou-fa-xuan-ran/</url>
      
        <content type="html"><![CDATA[<h1 id="Kajiya-kay-头发渲染"><a href="#Kajiya-kay-头发渲染" class="headerlink" title="Kajiya-kay 头发渲染"></a>Kajiya-kay 头发渲染</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222144933790.png" alt="image-20211222144933790" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222144945591.png" alt="image-20211222144945591" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222145010592.png" alt="image-20211222145010592" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222145027180.png" alt="image-20211222145027180" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222145037929.png" alt="image-20211222145037929" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222145050921.png" alt="image-20211222145050921" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222145107524.png" alt="image-20211222145107524" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 角色 </tag>
            
            <tag> 头发渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>法线外扩</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shi-jue-wai-guan/zhao-se/npr/miao-bian/fa-xian-wai-kuo/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shi-jue-wai-guan/zhao-se/npr/miao-bian/fa-xian-wai-kuo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/95986273">https://zhuanlan.zhihu.com/p/95986273</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222140817249.png" alt="image-20211222140817249" style="zoom:67%;"> <p>硬表面问题处理</p><p><a href="https://zhuanlan.zhihu.com/p/107664564">https://zhuanlan.zhihu.com/p/107664564</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222140921308.png" alt="image-20211222140921308" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222140934471.png" alt="image-20211222140934471" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222140946668.png" alt="image-20211222140946668" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视觉外观 </tag>
            
            <tag> 着色 </tag>
            
            <tag> NPR </tag>
            
            <tag> 描边 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伽马校正与线性空间</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shi-jue-wai-guan/jia-ma-xiao-zheng/jia-ma-xiao-zheng-yu-xian-xing-kong-jian/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shi-jue-wai-guan/jia-ma-xiao-zheng/jia-ma-xiao-zheng-yu-xian-xing-kong-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>Shader 入门精要，18.4.2章节</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222114313771.png" alt="image-20211222114313771" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222114323687.png" alt="image-20211222114323687" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222114338610.png" alt="image-20211222114338610" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222114348911.png" alt="image-20211222114348911" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222114404177.png" alt="image-20211222114404177" style="zoom:80%;"> <p>sRGB颜色空间标准：图像使用 0.45编码，显示器使用 2.2解码，这个流程叫 sRGB颜色空间标准</p><p>1/2.2 约等于 0.45</p><p>Pow(颜色，1/2.2) –&gt; png   编码伽马，将现实世界的线性的颜色编码成Gamma空间</p><p>Pow(png，2.2) –&gt; 显示器   显示伽马，将Gamma空间的颜色值还原成现实世界的线性颜色值</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222135042416.png" alt="image-20211222135042416" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222135058033.png" alt="image-20211222135058033" style="zoom:67%;"> <h3 id="Gamma-与线性的光照差异和混合差异"><a href="#Gamma-与线性的光照差异和混合差异" class="headerlink" title="Gamma 与线性的光照差异和混合差异"></a>Gamma 与线性的光照差异和混合差异</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222135223940.png" alt="image-20211222135223940" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222135234307.png" alt="image-20211222135234307" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222135250507.png" alt="image-20211222135250507" style="zoom:67%;"> <h3 id="Unity线性空间背后的设置"><a href="#Unity线性空间背后的设置" class="headerlink" title="Unity线性空间背后的设置"></a>Unity线性空间背后的设置</h3><ol><li><p>Gamma 空间</p></li><li><ol><li>Unity 处于放任模式，不会对输入和输出进行任何处理</li></ol></li><li><p>Linear 空间</p></li><li><ol><li><p>会把勾选了 sRGB的贴图，在采样时，自动将其转换到线性空间</p></li><li><p>开启 HDR</p></li><li><ol><li>将颜色写入到颜色缓冲区，或者自定义RT时，均使用线性写入，不进行 Gamma 编码</li><li>在读取颜色缓冲区或者RT时，不需要 Gamma       解码操作</li></ol></li><li><p>使用 LDR</p></li><li><ol><li>将颜色写入到颜色缓冲区，或者自定义RT时，进行 Gamma 编码，此时贴图跟 sRGB空间的贴图没有任何区别</li><li>在读取颜色缓冲区或者RT时，需要进行 Gamma       解码操作</li><li>混合操作时， Gamma       解码 -&gt;混合 -&gt; Gamma 编码 -&gt;缓冲区，<strong>A通道不参与伽马校正</strong></li></ol></li></ol></li></ol><p>在Unity使用了<strong>线性空间</strong>后，<strong>Unity会在把像素写入颜色缓冲区前进行一次伽马编码校正，来抵消显示器的显示伽马解码作用</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222135347803.png" alt="image-20211222135347803" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222135358173.png" alt="image-20211222135358173" style="zoom:67%;"> <p>官网文档 Linear or gamma workflow</p><p><a href="https://docs.unity3d.com/2019.4/Documentation/Manual/LinearRendering-LinearOrGammaWorkflow.html">https://docs.unity3d.com/2019.4/Documentation/Manual/LinearRendering-LinearOrGammaWorkflow.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视觉外观 </tag>
            
            <tag> 伽马校正 </tag>
            
            <tag> 线性空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>潮湿材质实现方式</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/te-shu-cai-zhi/chao-shi-cai-zhi/chao-shi-cai-zhi-shi-xian-fang-shi/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/te-shu-cai-zhi/chao-shi-cai-zhi/chao-shi-cai-zhi-shi-xian-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>SIGGRAPH 上顽皮狗的分享</p><p>Here are a few more examples. Note how the puddles show four characteristic regions. A) Core of the puddle, the water surface is totally flat. B) Region where surface tension causes water to cling to the surface underneath, causing a shrink-wrapped look. C) Region where water has saturated the surface, causing a darkening of the albedo, but not significantly affecting normals or specular response. D) Dry, unmodified surface.</p><p>而这里是代码。 艺术家可以控制两个参数，”湿润度 “和 “孔隙度”，它们可以独立混合。 湿润度驱动不同阶段之间的过渡，在上一张幻灯片中已经解释过。 多孔性是一个可选的控制（如果省略了，就用粗糙度来代替）。 多孔性会影响基色的变暗–多孔性强的表面会变暗，多孔性弱的表面，更 “硬 “的表面，变暗的程度更低。 请注意，我们只是将基色 “平方 “化 - 与现实世界的参考相比，这是一个合理的近似值，即当一个表面被弄湿时发生的变暗。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222113552239.png" alt="image-20211222113552239" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222113604876.png" alt="image-20211222113604876" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 场景 </tag>
            
            <tag> 特殊材质 </tag>
            
            <tag> 潮湿材质 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有意思的网站</title>
      <link href="/BloodSoul.github.io/2021/12/22/hobby/you-qu-de-dong-xi/you-yi-si-de-wang-zhan/"/>
      <url>/BloodSoul.github.io/2021/12/22/hobby/you-qu-de-dong-xi/you-yi-si-de-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h4 id="随机代码"><a href="#随机代码" class="headerlink" title="随机代码"></a>随机代码</h4><p><a href="https://www.daimajiaoliu.com/randomcode">https://www.daimajiaoliu.com/randomcode</a></p><h4 id="架构的一种思想"><a href="#架构的一种思想" class="headerlink" title="架构的一种思想"></a>架构的一种思想</h4><p><a href="http://harmful.cat-v.org/software/OO_programming/_pdf/Pitfalls_of_Object_Oriented_Programming_GCAP_09.pdf">http://harmful.cat-v.org/software/OO_programming/_pdf/Pitfalls_of_Object_Oriented_Programming_GCAP_09.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> Hobby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有趣的东西 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试基础知识回顾</title>
      <link href="/BloodSoul.github.io/2021/12/22/demogallery/mian-shi/mian-shi-ji-chu-zhi-shi-hui-gu/"/>
      <url>/BloodSoul.github.io/2021/12/22/demogallery/mian-shi/mian-shi-ji-chu-zhi-shi-hui-gu/</url>
      
        <content type="html"><![CDATA[<h3 id="一、简要说一下渲染流程、渲染流水线"><a href="#一、简要说一下渲染流程、渲染流水线" class="headerlink" title="一、简要说一下渲染流程、渲染流水线"></a>一、简要说一下渲染流程、渲染流水线</h3><p> 思路：从CPU端的相机剔除开始，简要说出每一步的主要作用</p><h5 id="在CPU端"><a href="#在CPU端" class="headerlink" title="在CPU端"></a>在CPU端</h5><ol><li>通过摄像机的<strong>视锥体剔除</strong>、<strong>层级剔除等</strong>在物体层面进行剔除，对剔除后的数据按造不透明物体从前往后排序，透明物体从后向前排序，最后通过SetPassCall将模型数据、贴图数据等传送到GPU，并通过DrawCall向GPU发起渲染</li></ol><h5 id="在GPU端"><a href="#在GPU端" class="headerlink" title="在GPU端"></a>在GPU端</h5><ol><li>接收到渲染指令后，首先来到<strong>顶点着色器</strong>，顶点着色器的主要作用是将模型空间坐标通过MVP矩阵变换到裁减空间。</li><li>完成后会来到<strong>曲面细分着色器</strong>，曲面细分着色器的主要作用是对线段等进行分段。</li><li>完成后会来到<strong>几何着色器</strong>，几何着色器的主要作用是对顶点进行添加、删除、修改等。</li><li>完成后会来到<strong>裁剪空间</strong>，对xyz小于w的坐标进行<strong>裁剪操作</strong>。</li><li>完成后会进行齐次除法即除以w，得到标准化设备坐标，然后进行背面剔除。</li><li>完成后会进行<strong>屏幕映射</strong>，将坐标映射到屏幕空间中。</li><li>完后成会进行<strong>图元装配</strong>，将顶点装配成三角面。</li><li>然后进行<strong>光栅化</strong>，将三角面和相关数据插值成片元。</li><li>然后逐片元进行<strong>片元着色器</strong>操作，片元着色器的主要作用是对片元进行着色。</li><li>完后后会进行<strong>缓冲区测试</strong>，也就是模板测试、深度测试等。</li><li>测试完成后会与帧缓冲区的<strong>数据进行混合</strong>，并更新帧缓冲区。</li><li>再有硬件读取帧缓冲区数据显示成图像。</li></ol><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222102611808.png" alt="image-20211222102611808" style="zoom: 67%;"> <h3 id="二、说一下对贴图采样、对纹理的理解"><a href="#二、说一下对贴图采样、对纹理的理解" class="headerlink" title="二、说一下对贴图采样、对纹理的理解"></a>二、说一下对贴图采样、对纹理的理解</h3><ol><li>纹理管线</li><li>首先通过<strong>投影方程</strong>，将模型中的点转换到<strong>参数空间</strong></li><li>然后通过<strong>映射函数</strong>，将参数空间的值映射到<strong>贴图空间</strong></li><li>然后使用贴图空间中的值，从纹理中获取相应的值</li><li>在使用<strong>变换函数</strong>，对纹理中的值进行变换，得到需要使用的值</li></ol><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222102720152.png" alt="image-20211222102720152" style="zoom:67%;"> <h3 id="三、说下对EBO的理解"><a href="#三、说下对EBO的理解" class="headerlink" title="三、说下对EBO的理解"></a>三、说下对EBO的理解</h3><p><a href="https://zhuanlan.zhihu.com/p/150906665">https://zhuanlan.zhihu.com/p/150906665</a></p><p>顶点缓冲对象（Vertex Buffer Objects，VBO）</p><p>索引缓冲对象（Element Buffer Object）</p><p>顶点数组对象 VAO(Vertex Array Object)</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222102830520.png" alt="image-20211222102830520" style="zoom:67%;"> <h3 id="四、为什么需要压缩贴图"><a href="#四、为什么需要压缩贴图" class="headerlink" title="四、为什么需要压缩贴图"></a>四、为什么需要压缩贴图</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222103416451.png" alt="image-20211222103416451" style="zoom:67%;"> <h3 id="五、为什么不直接使用jpg、png格式图片"><a href="#五、为什么不直接使用jpg、png格式图片" class="headerlink" title="五、为什么不直接使用jpg、png格式图片"></a>五、为什么不直接使用jpg、png格式图片</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222103447255.png" alt="image-20211222103447255" style="zoom:67%;"> <h3 id="六、ASTC-内部压缩算法原理，比PVRTC好在那？"><a href="#六、ASTC-内部压缩算法原理，比PVRTC好在那？" class="headerlink" title="六、ASTC 内部压缩算法原理，比PVRTC好在那？"></a>六、ASTC 内部压缩算法原理，比PVRTC好在那？</h3><h3 id="七、球谐光照是什么？-SH-存储了什么数据？"><a href="#七、球谐光照是什么？-SH-存储了什么数据？" class="headerlink" title="七、球谐光照是什么？ SH 存储了什么数据？"></a>七、球谐光照是什么？ SH 存储了什么数据？</h3><p>《内建着色器源码解析》中的描述</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222135833925.png" alt="image-20211222135833925" style="zoom:67%;"> <h3 id="八、DrawMeshInstance的限制是什么？"><a href="#八、DrawMeshInstance的限制是什么？" class="headerlink" title="八、DrawMeshInstance的限制是什么？"></a>八、DrawMeshInstance的限制是什么？</h3><ol><li>单批次最大渲染数：1024</li><li>位置信息等需要从外界预设置</li><li>学习中…</li></ol><h3 id="九、SRP、动态批处理、静态批处理、GPUInstance的区别是什么？各有什么优缺点？"><a href="#九、SRP、动态批处理、静态批处理、GPUInstance的区别是什么？各有什么优缺点？" class="headerlink" title="九、SRP、动态批处理、静态批处理、GPUInstance的区别是什么？各有什么优缺点？"></a>九、SRP、动态批处理、静态批处理、GPUInstance的区别是什么？各有什么优缺点？</h3><p>关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析</p><p><a href="https://zhuanlan.zhihu.com/p/98642798">https://zhuanlan.zhihu.com/p/98642798</a></p><h3 id="十、说一下对-PBR的理解"><a href="#十、说一下对-PBR的理解" class="headerlink" title="十、说一下对 PBR的理解"></a>十、说一下对 PBR的理解</h3><ol><li><p>基于物理的材质</p></li><li><ol><li>PBR美术流程</li></ol></li><li><p>基于物理的光照</p></li><li><ol><li><p>能量守恒。</p></li><li><p>迪士尼BRDF光照模型</p></li><li><ol><li><p>漫反射项</p></li><li><ol><li>Lambert 在边缘处太暗，结合使用修改的 Schlick Fresnel 模型近似</li></ol></li><li><p>镜面反射项</p></li><li><ol><li><p>法线分布<strong>D</strong>项，使用了GTR模型近似</p></li><li><ol><li>一般我们用宏观表面的半矢量<strong>h</strong>来表示微观表面法线<strong>m</strong>，因为仅<strong>m</strong> = <strong>h</strong>的表面点的朝向才会将光线<strong>l</strong>反射到视线<strong>v</strong>的方向，其他朝向的表面点对BRDF没有贡献（正负相互抵消）</li></ol></li><li><p>菲涅尔<strong>F</strong>项，使用了 Schlick Fresnel 模型近似</p></li><li><p>几何遮蔽<strong>G</strong>项，使用 Smith-GGX</p></li></ol></li></ol></li></ol></li><li><p>基于物理的相机</p></li><li><ol><li>改变相机的光圈大小、曝光度、快门速度等</li></ol></li></ol><h3 id="十一、说一下微平面理论的理解"><a href="#十一、说一下微平面理论的理解" class="headerlink" title="十一、说一下微平面理论的理解"></a>十一、说一下微平面理论的理解</h3><p>微平面理论就将宏观物体表面建模成微观尺寸上的随机朝向的理想镜面反射的小平面，宏观物体在某个点处的受光情况，就等于在该点出各个随机朝向小平面的受光情况的集合</p><h3 id="十二、说一下对BRDF的理解，双向指哪两个方向"><a href="#十二、说一下对BRDF的理解，双向指哪两个方向" class="headerlink" title="十二、说一下对BRDF的理解，双向指哪两个方向"></a>十二、说一下对BRDF的理解，双向指哪两个方向</h3><h3 id="十三、如果在Unity中拆分-M-矩阵，顺序是什么"><a href="#十三、如果在Unity中拆分-M-矩阵，顺序是什么" class="headerlink" title="十三、如果在Unity中拆分 M 矩阵，顺序是什么"></a>十三、如果在Unity中拆分 M 矩阵，顺序是什么</h3><ol><li><ol><li>Zxy</li><li>缩放、旋转、平移</li></ol></li></ol><h3 id="十四、说一下延迟渲染的理解"><a href="#十四、说一下延迟渲染的理解" class="headerlink" title="十四、说一下延迟渲染的理解"></a>十四、说一下延迟渲染的理解</h3><ol><li><p>将着色延迟到深度测试之后</p></li><li><p>两个阶段</p></li><li><ol><li>第一个阶段将几何数据存储到GBuffer中</li><li>第二个阶段读取GBuffer数据，进行着色</li></ol></li><li><p>使光照复杂度由 mxn 降低的 m+n</p></li><li><p>可以支持成百上千盏灯光</p></li><li><p>缺点，带宽比较大</p></li></ol><h3 id="十五、GBuffer-存储了那些数据"><a href="#十五、GBuffer-存储了那些数据" class="headerlink" title="十五、GBuffer 存储了那些数据"></a>十五、GBuffer 存储了那些数据</h3><p>Unity 存储结构</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222103940153.png" alt="image-20211222103940153" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222103956799.png" alt="image-20211222103956799" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222104011806.png" alt="image-20211222104011806" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222104025592.png" alt="image-20211222104025592" style="zoom:67%;"> <p>经典存储结构</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222104341198.png" alt="image-20211222104341198" style="zoom:67%;"> <h3 id="十六、说一下对-MRT（多目标渲染）理解"><a href="#十六、说一下对-MRT（多目标渲染）理解" class="headerlink" title="十六、说一下对 MRT（多目标渲染）理解"></a>十六、说一下对 MRT（多目标渲染）理解</h3><p><a href="https://zhuanlan.zhihu.com/p/265372749">https://zhuanlan.zhihu.com/p/265372749</a></p><p>在延迟渲染输出的GBuffer时就有用到</p><p>OpenGL ES 多目标渲染（MRT），即多重渲染目标，是 OpenGL ES 3.0 新特性，它允许应用程序一次渲染到多个缓冲区。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222104145640.png" alt="image-20211222104145640" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222104209775.png" alt="image-20211222104209775" style="zoom:67%;"> <h3 id="十七、延迟渲染的有那些缺点"><a href="#十七、延迟渲染的有那些缺点" class="headerlink" title="十七、延迟渲染的有那些缺点"></a>十七、延迟渲染的有那些缺点</h3><ol><li>对 MSAA 支持不友好 <a href="https://zhuanlan.zhihu.com/p/28489928">https://zhuanlan.zhihu.com/p/28489928</a><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222105948406.png" alt="image-20211222105948406" style="zoom:67%;"> </li></ol></li><li>未知，学习中…</li></ol><h3 id="十八、说一下你了解那些抗锯齿技术"><a href="#十八、说一下你了解那些抗锯齿技术" class="headerlink" title="十八、说一下你了解那些抗锯齿技术"></a>十八、说一下你了解那些抗锯齿技术</h3><p>重点 TAA、MSAA、FXAA</p><h3 id="十九、说一下你了解的那些软阴影技术、各自的优缺点是什么"><a href="#十九、说一下你了解的那些软阴影技术、各自的优缺点是什么" class="headerlink" title="十九、说一下你了解的那些软阴影技术、各自的优缺点是什么"></a>十九、说一下你了解的那些软阴影技术、各自的优缺点是什么</h3><p>概述：<a href="https://zhuanlan.zhihu.com/p/369710758">https://zhuanlan.zhihu.com/p/369710758</a></p><ul><li><p><strong>Temporal Shadows</strong></p><ul><li><a href="https://docs.sofunny.io/download/attachments/24469088/ClusteredRenderingAndAnti-Aliasing.pdf?version=1&amp;modificationDate=1619588431000&amp;api=v2">ClusteredRenderingAndAnti-Aliasing</a></li></ul></li><li><p>Screen Space Soft Shadow</p><ul><li><a href="https://zhuanlan.zhihu.com/p/300248303">原神Unity会议分享</a></li><li>[GPU Pro 1 P477 : Screen Space Soft Shadows](<a href="https://docs.sofunny.io/download/attachments/24469088/GPU">https://docs.sofunny.io/download/attachments/24469088/GPU</a> Pro 1.pdf?version=1&amp;modificationDate=1619600976000&amp;api=v2)</li></ul></li><li><p>综述类</p><ul><li><a href="https://www.jianshu.com/p/07216e42aa98">Soft Shadow综述</a></li><li><a href="https://docs.sofunny.io/download/attachments/24469088/ADORJAN-2013-ASE-thesis.pdf?version=1&amp;modificationDate=1619588349000&amp;api=v2">Advanced Shadow Algorithms</a></li><li>[Variable Penumbra Soft Shadows for Mobile Devices ](<a href="https://docs.sofunny.io/download/attachments/24469088/Variable">https://docs.sofunny.io/download/attachments/24469088/Variable</a> Penumbra Soft Shadows for Mobile Devices.pdf?version=1&amp;modificationDate=1619588486000&amp;api=v2)</li></ul></li><li><p>VSM</p><ul><li><a href="https://docs.sofunny.io/download/attachments/24469088/2006-GDC-Variance-Shadow-Maps.pdf?version=1&amp;modificationDate=1619588146000&amp;api=v2">2006-GDC-Variance-Shadow-Maps</a></li><li><a href="https://docs.sofunny.io/download/attachments/24469088/GDC08_SoftShadowMapping.pdf?version=1&amp;modificationDate=1619588600000&amp;api=v2">GDC08_SoftShadowMapping</a></li><li><a href="https://developer.nvidia.com/gpugems/gpugems3/part-ii-light-and-shadows/chapter-8-summed-area-variance-shadow-maps">Gpu Gems 3 Chapter 8. Summed-Area Variance Shadow Maps</a></li><li>[GPU Pro 2 P207 : Variance Shadow Maps Light-Bleeding Reduction Tricks](<a href="https://docs.sofunny.io/download/attachments/24469088/GPU">https://docs.sofunny.io/download/attachments/24469088/GPU</a> Pro 2.pdf?version=1&amp;modificationDate=1619589123000&amp;api=v2)</li></ul></li><li><p>ESM</p><ul><li><a href="https://pixelstoomany.wordpress.com/2008/06/12/a-conceptually-simpler-way-to-derive-exponential-shadow-maps-sample-code/">ESM的推导过程</a></li><li><a href="http://www.klayge.org/2013/10/07/%E5%88%87%E6%8D%A2%E5%88%B0esm/">KlayGE中关于改进ESM的文档</a></li><li><a href="https://docs.sofunny.io/download/attachments/24469088/esm_gi08.pdf?version=1&amp;modificationDate=1619588452000&amp;api=v2">Exponential Shadow Maps</a></li><li><a href="https://doc.babylonjs.com/divingDeeper/lights/shadows#exponential-shadow-map">Babylon阴影文档</a></li></ul></li><li><p>EVSM</p><ul><li><a href="https://www.martincap.io/project_detail.php?project_id=9">EVSM算法概述</a></li><li>[SIGGRAPH 2009 - Lighting Research at Bungie](<a href="https://docs.sofunny.io/download/attachments/24469088/SIGGRAPH">https://docs.sofunny.io/download/attachments/24469088/SIGGRAPH</a> 2009 - Lighting Research at Bungie.pdf?version=2&amp;modificationDate=1619588497000&amp;api=v2)</li></ul></li><li><p>MSM</p><ul><li><a href="https://therealmjp.github.io/posts/shadow-sample-update/">EVSM-16bit 和 MSM-16bit 对比</a></li><li><a href="https://docs.sofunny.io/download/attachments/24469088/MomentShadowMapping.pdf?version=1&amp;modificationDate=1619588633000&amp;api=v2">MomentShadowMapping</a></li><li><a href="https://www.gdcvault.com/play/1023808/Rendering-Antialiased-Shadows-with-Moment">Rendering Antialiased Shadows with Moment Shadow Mapping</a></li></ul></li><li><p>CSM</p><ul><li><a href="https://docs.sofunny.io/download/attachments/24469088/shaderx7_-_advanced_rendering_techniques.pdf?version=1&amp;modificationDate=1619588106000&amp;api=v2">shaderx7_-_advanced_rendering_techniques</a></li></ul></li><li><p>级联阴影与距离场阴影</p><ul><li><a href="https://zhuanlan.zhihu.com/p/92017307">https://zhuanlan.zhihu.com/p/92017307</a></li></ul></li><li><p>PSSM（平行分割阴影贴图）</p><ul><li><a href="https://zhuanlan.zhihu.com/p/335731448">https://zhuanlan.zhihu.com/p/335731448</a></li></ul><p><strong>级联阴影会出现那些问题</strong>？？</p></li></ul><h3 id="二十、说一下阴影走样的产生原因"><a href="#二十、说一下阴影走样的产生原因" class="headerlink" title="二十、说一下阴影走样的产生原因"></a>二十、说一下阴影走样的产生原因</h3><ol><li>阴影贴图的精度不够</li><li>学习中…</li></ol><h3 id="二一、说一下阴影漏光产生的原因"><a href="#二一、说一下阴影漏光产生的原因" class="headerlink" title="二一、说一下阴影漏光产生的原因"></a>二一、说一下阴影漏光产生的原因</h3><ol><li><p>可以使用第二深度阴影映射（second-depth     shadow mapping ）的方法来有效解决</p></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222105323787.png" alt="image-20211222105323787" style="zoom:67%;"> </li><li><p>其他解决方案未知，学习中…</p></li></ol><h3 id="二二、说一下你做过那些后处理效果"><a href="#二二、说一下你做过那些后处理效果" class="headerlink" title="二二、说一下你做过那些后处理效果"></a>二二、说一下你做过那些后处理效果</h3><ol><li>模糊<ol><li>高斯模糊</li><li>径向模糊 <a href="https://zhuanlan.zhihu.com/p/125744132">https://zhuanlan.zhihu.com/p/125744132</a></li></ol></li><li>DOF</li><li>Bloom</li><li>高度雾</li><li>暗角</li><li>HSV</li><li>学习中…</li></ol><h3 id="二三、说一下你做过那些优化内存优化和渲染优化"><a href="#二三、说一下你做过那些优化内存优化和渲染优化" class="headerlink" title="二三、说一下你做过那些优化内存优化和渲染优化"></a>二三、说一下你做过那些优化内存优化和渲染优化</h3><ol><li>shader 变体过多，内存炸裂</li><li>学习中…</li></ol><h3 id="二四、说一下你做过那些工具"><a href="#二四、说一下你做过那些工具" class="headerlink" title="二四、说一下你做过那些工具"></a>二四、说一下你做过那些工具</h3><ol><li>贴图检测工具</li><li>刷草工具</li><li>学习中…</li></ol><h3 id="二五、如果水面需要实时反射，你的思路是什么？"><a href="#二五、如果水面需要实时反射，你的思路是什么？" class="headerlink" title="二五、如果水面需要实时反射，你的思路是什么？"></a>二五、如果水面需要实时反射，你的思路是什么？</h3><ol><li>最佳做法学习中…</li></ol><h3 id="二六、如果两个颜色不同的文本，想要在一次渲染中绘制，你的思路是什么？"><a href="#二六、如果两个颜色不同的文本，想要在一次渲染中绘制，你的思路是什么？" class="headerlink" title="二六、如果两个颜色不同的文本，想要在一次渲染中绘制，你的思路是什么？"></a>二六、如果两个颜色不同的文本，想要在一次渲染中绘制，你的思路是什么？</h3><ol><li>合并网格，颜色烘焙到顶点色</li></ol><h3 id="二七、什么是伽马校正，为什么需要"><a href="#二七、什么是伽马校正，为什么需要" class="headerlink" title="二七、什么是伽马校正，为什么需要"></a>二七、什么是伽马校正，为什么需要</h3><ol><li>参见渲染基础知识 伽马校正与线性空间</li></ol><h3 id="二八、线性空间与-Gamma-空间有什么不同，在Unity中有那些差异"><a href="#二八、线性空间与-Gamma-空间有什么不同，在Unity中有那些差异" class="headerlink" title="二八、线性空间与 Gamma 空间有什么不同，在Unity中有那些差异"></a>二八、线性空间与 Gamma 空间有什么不同，在Unity中有那些差异</h3><ol><li>参见渲染基础知识 伽马校正与线性空间</li></ol><p>Unity线性空间背后的设置</p><ol><li><p>Gamma 空间</p></li><li><ol><li>Unity 处于放任模式，不会对输入和输出进行任何处理</li></ol></li><li><p>Linear 空间</p></li><li><ol><li><p>会把勾选了 sRGB的贴图，在采样时，自动将其转换到线性空间</p></li><li><p>开启 HDR</p></li><li><ol><li>将颜色写入到颜色缓冲区，或者自定义RT时，均使用线性写入，不进行 Gamma 编码</li><li>在读取颜色缓冲区或者RT时，不需要 Gamma       解码操作</li></ol></li><li><p>使用 LDR</p></li><li><ol><li>将颜色写入到颜色缓冲区，或者自定义RT时，进行 Gamma 编码，此时贴图跟 sRGB空间的贴图没有任何区别</li><li>在读取颜色缓冲区或者RT时，需要进行 Gamma       解码操作</li><li>混合操作时， Gamma       解码 -&gt;混合 -&gt; Gamma 编码 -&gt;缓冲区，<strong>A通道不参与伽马校正</strong></li></ol></li></ol></li></ol><p>在Unity使用了<strong>线性空间</strong>后，Unity会在把像素写入颜色缓冲区前进行一次伽马编码校正，来抵消显示器的显示伽马解码作用</p><h3 id="二九、说一下你对HDR的理解"><a href="#二九、说一下你对HDR的理解" class="headerlink" title="二九、说一下你对HDR的理解"></a>二九、说一下你对HDR的理解</h3><p>《Shader 入门精要》，18.4.3</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222140057451.png" alt="image-20211222140057451" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222140108020.png" alt="image-20211222140108020" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222140120010.png" alt="image-20211222140120010" style="zoom:67%;"> <h3 id="三十、说一下-Unity-BuildIn-中的光照方式"><a href="#三十、说一下-Unity-BuildIn-中的光照方式" class="headerlink" title="三十、说一下 Unity BuildIn 中的光照方式"></a>三十、说一下 Unity BuildIn 中的光照方式</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222142243337.png" alt="image-20211222142243337" style="zoom:80%;"> <h3 id="说一下你做了那些效果"><a href="#说一下你做了那些效果" class="headerlink" title="说一下你做了那些效果"></a>说一下你做了那些效果</h3><ol><li><p>卡通火焰燃烧特效</p></li><li><ol><li>使用一张渐变图用于控制火焰上部分和下部部分</li><li>使用noise进行滚动，实现火焰扰动的形态</li><li>使用一张椭圆形的Mask贴图进行整体形状的控制</li><li>配合Bloom的光晕效果就实现了</li></ol></li><li><p>图片燃烧效果</p></li><li><ol><li>使用一张Noise贴图作为材质和贴图的Alpha进行运算</li><li>并使用一个阈值进行控制即可</li></ol></li><li><p>钻石</p></li><li><ol><li>通过采样一张七彩的环境贴图，模拟了色散效果</li><li>通过采样另一张环境贴图，模拟场景反射</li><li>在加上Fresnel的边缘光效果即可</li></ol></li><li><p>水晶</p></li><li><ol><li>将世界坐标和世界空间下的法线转换到观察空间</li><li>并用法线扰动世界坐标进行贴图采样，便可得到基础的水晶效果</li><li>添加菲涅尔，环境反射进行调整即可</li></ol></li><li><p>玉石</p></li><li><ol><li>通过法线对主光方向相反方向的进行扰动</li><li>对观察方向和主光反方向进行点乘，得到基础效果</li><li>通过使用一张厚度图，对结果进行遮蔽增加体积感</li><li>通过采样一个Cube贴图，增加光泽感</li><li>进行色彩调整即可</li></ol></li><li><p>视差</p></li><li><ol><li>法线贴图可以得到凹凸效果，但是在侧面看的时候就会穿帮，视差是通过通过高度图对视线进行遮蔽的近似</li><li>通过将观察方向转换到切线空间，并通过对采样的高度图进行计算，对UV的偏移</li><li>用偏移后的UV进行正常计算，以得到视差的效果</li></ol></li><li><p>可交互涟漪</p></li><li><ol><li>通过对点击区域，进行2D波动方程计算</li><li>将计算的结果使用RenderTexture的 RG 通道进行累计</li><li>在需要用到的材质上对RT贴图进行采样，并进行UV扰动和法线扰动，以实现效果</li></ol></li><li><p>闪电效果</p></li><li><ol><li>通过在C#端，使用随机数进行偏移</li><li>并预先使用渐变色工具调整好闪电颜色</li><li>通过后处理，对上述对C#传入的参数，进行画面调色</li></ol></li><li><p>屏幕雨</p></li><li><ol><li>在摄像机前放一个全屏面片</li><li>使用tilling的雨滴mask贴图进行滚动，对屏幕空间的UV进行扰动，采样场景颜色贴图进行模拟</li></ol></li><li><p>潮湿材质</p></li><li><ol><li>通过法线朝向进行顶部和下面分离控制</li><li>上部使用雨滴的序列阵动画贴图</li><li>下部使用雨滴贴图和一张水流痕迹 Mask贴图进行混合，来模拟雨滴流动效果</li></ol></li><li><p>卡通水体</p></li><li><ol><li>水的颜色</li><li><ol><li>潜水和深水两种颜色渐变，通过与场景的深度差进行渐变控制</li></ol></li><li>水面的凹凸</li><li><ol><li>使用两张细节程度不同的法线贴图，进行交叉滚动</li></ol></li><li>水面波纹运动</li><li><ol><li>使用 <strong>Gerstner波</strong> ，对水面进行顶点动画</li></ol></li><li>水面白沫</li><li><ol><li>通过一张noise贴图，分别使用不同速率进行采样滚动</li><li>并通过 使用 <strong>Gerstner波</strong>的波峰作为遮罩进行计算实现</li></ol></li><li>水面环境反射</li><li>水面菲涅尔</li><li>水面兰伯特光照</li><li>岸边泡沫</li><li><ol><li>通过定义一个岸边距离值确定岸边大小</li><li>使用组合的正弦波，模拟一个循环效果</li><li>采样一张泡沫贴图，进行显示</li></ol></li><li>水底焦散</li><li><ol><li>分别使用不同速率的对一张焦散Noise贴图采样，并取最小值作为焦散结果</li></ol></li><li>水下反射（折射）</li><li><ol><li>通过法线对屏幕UV扰动采样场景贴图，并进行色彩分离</li></ol></li><li>水下透光散射</li><li><ol><li>通过法线对主光源进行扰动</li><li>通过观察的负方向与主光源点乘，并使用pow进行衰减控制</li></ol></li></ol></li><li><p>复杂草地</p><ol><li>草的上下颜色<ol><li>上面结合透射</li><li>下面融合地表</li></ol></li><li>草的Culling</li><li>草的运动<ol><li>通过世界坐标的x和z相加取余数作为扰动值</li><li>通过Time与扰动值结合作为sin的参数，计算出弯曲的力度变换</li><li>在模型空间，通过对世界坐标到锚点位置的向量进行xyz方向的旋转</li><li>用弯曲力度作为旋转角度</li></ol></li><li>全局风<ol><li>通过采样一张全局Noise贴图和参数控制，做为风弯曲力度</li><li>和草本身的运动的力度进行差值处理</li><li>并给全局风一个可以调控的颜色进行混合</li></ol></li><li>交互<ol><li>模型交互<ol><li>全局RT按造模型法线方向和强度控制进行预先渲染</li><li>通过采样一张全局RT贴图，并缩放到【-1，1】</li><li>使用草的xz坐标进行偏移操作</li><li>y坐标进行压缩处理</li></ol></li></ol></li><li>透视矫正</li><li>距离衰减</li><li>全局颜色混合</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> DemoGallery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分形布朗运动</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/zao-sheng/fen-xing-bu-lang-yun-dong/fen-xing-bu-lang-yun-dong/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/zao-sheng/fen-xing-bu-lang-yun-dong/fen-xing-bu-lang-yun-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="分形布朗运动"><a href="#分形布朗运动" class="headerlink" title="分形布朗运动"></a>分形布朗运动</h1><p><a href="https://thebookofshaders.com/13/?lan=ch">https://thebookofshaders.com/13/?lan=ch</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222100936800.png" alt="image-20211222100936800" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222100956289.png" alt="image-20211222100956289" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 噪声 </tag>
            
            <tag> 分形布朗运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ManagerTool</title>
      <link href="/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/bao-ti-gou-jian/managertool/"/>
      <url>/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/bao-ti-gou-jian/managertool/</url>
      
        <content type="html"><![CDATA[<p>atx-server 安卓集群管理 安装运行及自动化的实践</p><p><a href="https://testerhome.com/topics/11588">https://testerhome.com/topics/11588</a></p><p>Github地址</p><p><a href="https://github.com/openatx/atxserver2">https://github.com/openatx/atxserver2</a></p><p>完美解决Android Studio在gradle上的各种问题</p><p>来自 <a href="https://blog.csdn.net/qq_28336351/article/details/74178349">https://blog.csdn.net/qq_28336351/article/details/74178349</a> </p>]]></content>
      
      
      <categories>
          
          <category> AroundFunction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础系统 </tag>
            
            <tag> 包体构建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学分析工具</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/shu-xue-fen-xi-gong-ju/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/shu-xue-fen-xi-gong-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="WOLFRAM-MATHEMATICA"><a href="#WOLFRAM-MATHEMATICA" class="headerlink" title="WOLFRAM MATHEMATICA"></a>WOLFRAM MATHEMATICA</h3><p>全球现代技术计算的终极系统</p><p><a href="https://www.wolfram.com/mathematica/">https://www.wolfram.com/mathematica/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221164653213.png" alt="image-20211221164653213" style="zoom:80%;"> <h3 id="Desmos"><a href="#Desmos" class="headerlink" title="Desmos"></a>Desmos</h3><p><a href="https://www.desmos.com/calculator/qigfpckugc?lang=zh-CN">https://www.desmos.com/calculator/qigfpckugc?lang=zh-CN</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221165734776.png" alt="image-20211221165734776" style="zoom:67%;"> <h3 id="GeoGebra"><a href="#GeoGebra" class="headerlink" title="GeoGebra"></a>GeoGebra</h3><p><a href="https://www.geogebra.org/">https://www.geogebra.org/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221165708337.png" alt="image-20211221165708337" style="zoom:80%;"> <h3 id="在线多项式曲线及曲线函数拟合工具"><a href="#在线多项式曲线及曲线函数拟合工具" class="headerlink" title="在线多项式曲线及曲线函数拟合工具"></a>在线多项式曲线及曲线函数拟合工具</h3><p><a href="http://tools.jb51.net/jisuanqi/create_fun/">http://tools.jb51.net/jisuanqi/create_fun/</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221165303135.png" alt="image-20211221165303135"></p><h4 id="Graphtoy"><a href="#Graphtoy" class="headerlink" title="Graphtoy"></a>Graphtoy</h4><p><a href="https://graphtoy.com/">https://graphtoy.com/</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221165247524.png" alt="image-20211221165247524"></p><h4 id="傅立叶展开可视化网站"><a href="#傅立叶展开可视化网站" class="headerlink" title="傅立叶展开可视化网站"></a><a href="https://www.zhihu.com/search?q=%E5%82%85%E7%AB%8B%E5%8F%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:49436452%7D">傅立叶</a>展开可视化网站</h4><p><a href="http://bgrawi.com/Fourier-Visualizations/">http://bgrawi.com/Fourier-Visualizations/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222164532519.png" alt="image-20211222164532519" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分析工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染级别</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-bie/xuan-ran-ji-bie/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-bie/xuan-ran-ji-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="Targeting-shader-models-and-GPU-features-in-HLSL"><a href="#Targeting-shader-models-and-GPU-features-in-HLSL" class="headerlink" title="Targeting shader models and GPU features in HLSL"></a>Targeting shader models and GPU features in HLSL</h3><p>Unity 官网文档</p><p><a href="https://docs.unity3d.com/2019.4/Documentation/Manual/SL-ShaderCompileTargets.html">https://docs.unity3d.com/2019.4/Documentation/Manual/SL-ShaderCompileTargets.html</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221163740074.png" alt="image-20211221163740074"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221163749882.png" alt="image-20211221163749882"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221163759153.png" alt="image-20211221163759153"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221163829854.png" alt="image-20211221163829854"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221163840561.png" alt="image-20211221163840561"></p><h3 id="Targeting-graphics-APIs-and-platforms-in-HLSL"><a href="#Targeting-graphics-APIs-and-platforms-in-HLSL" class="headerlink" title="Targeting graphics APIs and platforms in HLSL"></a>Targeting graphics APIs and platforms in HLSL</h3><p>官方文档：</p><p><a href="https://docs.unity3d.com/2019.4/Documentation/Manual/SL-ShaderCompilationAPIs.html">https://docs.unity3d.com/2019.4/Documentation/Manual/SL-ShaderCompilationAPIs.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221164025080.png" alt="image-20211221164025080" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221164040239.png" alt="image-20211221164040239" style="zoom:80%;"> <h3 id="Preprocessor-directives-in-HLSL"><a href="#Preprocessor-directives-in-HLSL" class="headerlink" title="Preprocessor directives in HLSL"></a>Preprocessor directives in HLSL</h3><p>官方文档：</p><p><a href="https://docs.unity3d.com/2019.4/Documentation/Manual/shader-preprocessor-directives.html">https://docs.unity3d.com/2019.4/Documentation/Manual/shader-preprocessor-directives.html</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221164133441.png" alt="image-20211221164133441"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 渲染级别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用计算着色器进行裁剪优化</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/shi-yong-computershader-you-hua/li-yong-ji-suan-zhao-se-qi-jin-xing-cai-jian-you-hua/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/shi-yong-computershader-you-hua/li-yong-ji-suan-zhao-se-qi-jin-xing-cai-jian-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="官方解释-DrawMeshInstancedIndirect"><a href="#官方解释-DrawMeshInstancedIndirect" class="headerlink" title="官方解释 DrawMeshInstancedIndirect"></a>官方解释 DrawMeshInstancedIndirect</h1><p>Graphics.DrawMeshInstancedIndirect </p><p><a href="https://docs.unity3d.com/2019.4/Documentation/ScriptReference/Graphics.DrawMeshInstancedIndirect.html">https://docs.unity3d.com/2019.4/Documentation/ScriptReference/Graphics.DrawMeshInstancedIndirect.html</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221155822831.png" alt="image-20211221155822831"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221155840560.png" alt="image-20211221155840560"></p><h1 id="C-层"><a href="#C-层" class="headerlink" title="C#层"></a>C#层</h1><h4 id="划分逻辑上的-2D-cell"><a href="#划分逻辑上的-2D-cell" class="headerlink" title="划分逻辑上的 2D cell"></a>划分逻辑上的 2D cell</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221160023048.png" alt="image-20211221160023048"></p><p>i % cellCountX ：计算第几列</p><p>i / cellCountX：计算第几行</p><p>+0.5将中心移到cell中心</p><p>这两行计算确切的世界中心位置，上面只是计算逻辑上的格子位置</p><p>centerPosWS.x = Mathf.Lerp(minX, maxX, centerPosWS.x / cellCountX);</p><p> centerPosWS.z = Mathf.Lerp(minZ, maxZ, centerPosWS.z / cellCountZ);</p><p>这边默认了每个 cell 是正方形的</p><p>Vector3 sizeWS = new Vector3(Mathf.Abs(maxX - minX) / cellCountX, 0, Mathf.Abs(maxX - minX) / cellCountX);</p><p>正常非正方向的情况应该如下：</p><p>Vector3 sizeWS = new Vector3(Mathf.Abs(maxX - minX) / cellCountX, 0, Mathf.Abs(maxZ - minZ) / cellCountZ);</p><p>这边对每个 cell 进行视锥体可见性测试，而不是每个草，加快了计算速度，但计算量仍然很多</p><p>if (GeometryUtility.TestPlanesAABB(cameraFrustumPlanes, cellBound)) {</p><p>​        visibleCellIDList.Add(i);</p><p> }</p><h4 id="设置-CumputeShader-读取的起始位置"><a href="#设置-CumputeShader-读取的起始位置" class="headerlink" title="设置 CumputeShader 读取的起始位置"></a>设置 CumputeShader 读取的起始位置</h4><p>因为内部每次都是从总共草里面读取的，这边设置一个GPU组读取数据的起始位置</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221160805516.png" alt="image-20211221160805516"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221160810497.png" alt="image-20211221160810497"></p><h4 id="合并连续的-cell"><a href="#合并连续的-cell" class="headerlink" title="合并连续的 cell"></a>合并连续的 cell</h4><p>0,1,2,3,4</p><p>0,1,5,7</p><p>当Id连续，也就 cell 连续时，合并成一个 batch</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221160927984.png" alt="image-20211221160927984"></p><h4 id="进行GPU划分并执行"><a href="#进行GPU划分并执行" class="headerlink" title="进行GPU划分并执行"></a>进行GPU划分并执行</h4><p>按照每64颗草为一个组，进行 GPU的 x划分组（Group)</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221161024567.png" alt="image-20211221161024567"></p><p>每个组划分 x向的64个线程，分别对应于每一颗草</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221161043447.png" alt="image-20211221161043447" style="zoom:67%;"> <p>完整代码</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221161139811.png" alt="image-20211221161139811"></p><h4 id="调用绘制"><a href="#调用绘制" class="headerlink" title="调用绘制"></a>调用绘制</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221161506994.png" alt="image-20211221161506994"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221161517320.png" alt="image-20211221161517320"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221161525337.png" alt="image-20211221161525337"></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221161831506.png" alt="image-20211221161831506" style="zoom:67%;"> <h1 id="ComputeShader-层"><a href="#ComputeShader-层" class="headerlink" title="ComputeShader 层"></a>ComputeShader 层</h1><p>将世界坐标转换到裁剪空间，进行裁剪，判断是否保留</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221161255242.png" alt="image-20211221161255242"></p><h1 id="Shader-层"><a href="#Shader-层" class="headerlink" title="Shader 层"></a>Shader 层</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221162611368.png" alt="image-20211221162611368" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221162520535.png" alt="image-20211221162520535" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221162807267.png" alt="image-20211221162807267" style="zoom:67%;">  ]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 使用ComputerShader优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ComputerShader</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/computershader/computershader/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/computershader/computershader/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h5 id="Shader-Model-5-Objects"><a href="#Shader-Model-5-Objects" class="headerlink" title="Shader Model 5 Objects"></a>Shader Model 5 Objects</h5><p><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/d3d11-graphics-reference-sm5-objects">https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/d3d11-graphics-reference-sm5-objects</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221152503575.png" alt="image-20211221152503575" style="zoom: 67%;"> <h5 id="System-Values"><a href="#System-Values" class="headerlink" title="System Values"></a>System Values</h5><p><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/d3d11-graphics-reference-sm5-system-values">https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/d3d11-graphics-reference-sm5-system-values</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221152621272.png" alt="image-20211221152621272" style="zoom:67%;"> <h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>SV_GroupID 线程组ID unit(2,1,0)</p><p>SV_GroupThreadID 单个线程组里面线程的索引 uint3(7,5,0)</p><p>SV_DispatchThreadID 当前正在执行的线程id,他是线程组和线程的复合形式 unit3(27,13,0)</p><p>SV_GroupIndex 线程组ID的一维表现形式</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-attributes-numthreads">https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-attributes-numthreads</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221152932427.png" alt="image-20211221152932427" style="zoom: 80%;"> <p>Computer shader 采样贴图</p><p><a href="https://docs.unity3d.com/2020.3/Documentation/Manual/class-ComputeShader.html">https://docs.unity3d.com/2020.3/Documentation/Manual/class-ComputeShader.html</a></p><p>Using sampler states</p><p><a href="https://docs.unity3d.com/2020.3/Documentation/Manual/SL-SamplerStates.html">https://docs.unity3d.com/2020.3/Documentation/Manual/SL-SamplerStates.html</a></p><p>Unity 官网计算着色器</p><p><a href="https://docs.unity3d.com/cn/current/Manual/class-ComputeShader.html">https://docs.unity3d.com/cn/current/Manual/class-ComputeShader.html</a></p><p>How To: Create a Compute Shader</p><p><a href="https://docs.microsoft.com/en-my/windows/win32/direct3d11/direct3d-11-advanced-stages-compute-create">https://docs.microsoft.com/en-my/windows/win32/direct3d11/direct3d-11-advanced-stages-compute-create</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221154811440.png" alt="image-20211221154811440" style="zoom: 67%;"> <h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221155053168.png" alt="image-20211221155053168" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221155103463.png" alt="image-20211221155103463" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221155133109.png" alt="image-20211221155133109" style="zoom: 80%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形硬件 </tag>
            
            <tag> 图形渲染管线 </tag>
            
            <tag> ComputerShader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim编辑操作</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/ban-ben-guan-li/ming-ling-xing/vim-bian-ji-cao-zuo/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/ban-ben-guan-li/ming-ling-xing/vim-bian-ji-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim-常用操作"><a href="#Vim-常用操作" class="headerlink" title="Vim 常用操作"></a>Vim 常用操作</h1><p>:</p><blockquote><p>退出命令是，按<code>ESC</code>键 跳到命令模式，然后输入<code>:q</code>（不保存）或者<code>:wq</code>（保存） 退出。</p></blockquote><hr><h3 id="更多退出命令："><a href="#更多退出命令：" class="headerlink" title="更多退出命令："></a>更多退出命令：</h3><blockquote><p>:w 保存文件但不退出vi<br> :w file 将修改另外保存到file中，不退出vi<br> :w! 强制保存，不推出vi<br> :wq 保存文件并退出vi<br> :wq! 强制保存文件，并退出vi<br> :q 不保存文件，退出vi<br> :q! 不保存文件，强制退出vi<br> :e! 放弃所有修改，从上次保存文件开始再编辑命令历史</p></blockquote><p>以:和/开头的命令都有历史纪录，可以首先键入:或/然后按上下箭头来选择某个历史命令。</p><h3 id="启动vim"><a href="#启动vim" class="headerlink" title="启动vim"></a>启动vim</h3><p>在命令行窗口中输入以下命令即可</p><blockquote><p>vim 直接启动vim</p></blockquote><blockquote><p>vim filename 打开vim并创建名为filename的文件</p></blockquote><h3 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h3><p>打开单个文件</p><blockquote><p>vim file</p></blockquote><p>同时打开多个文件</p><blockquote><p>vim file1 file2 file3 …</p></blockquote><p>在vim窗口中打开一个新文件</p><blockquote><p>:open file</p></blockquote><p>在新窗口中打开文件</p><blockquote><p>:split file</p></blockquote><p>切换到下一个文件</p><blockquote><p>:bn</p></blockquote><p>切换到上一个文件</p><blockquote><p>:bp</p></blockquote><p>查看当前打开的文件列表，当前正在编辑的文件会用[]括起来。</p><blockquote><p>:args</p></blockquote><p>打开远程文件，比如ftp或者share folder</p><blockquote><p>:e <a href="https://link.jianshu.com/?t=ftp://192.168.10.76/abc.txt">ftp://192.168.10.76/abc.txt</a></p></blockquote><blockquote><p>:e \qadrive\test\1.txt</p></blockquote><h3 id="vim的模式"><a href="#vim的模式" class="headerlink" title="vim的模式"></a>vim的模式</h3><blockquote><p>正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空<br> 插入模式（按i键进入） 左下角显示–INSERT–<br> 可视模式（不知道如何进入） 左下角显示–VISUAL–</p></blockquote><h3 id="导-括号匹配令"><a href="#导-括号匹配令" class="headerlink" title="导% 括号匹配令"></a>导% 括号匹配令</h3><blockquote><p>i 在当前位置生前插入<br> I 在当前行首插入<br> a 在当前位置后插入<br> A 在当前行尾插入<br> o 在当前行之后插入一行<br> O 在当前行之前插入一行</p></blockquote><h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><blockquote><p>/text　　查找text，按n健查找下一个，按N健查找前一个。<br> ?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个。</p></blockquote><p>vim中有一些特殊字符在查找时需要转义　　.*[]^%/?~$</p><blockquote><p>:set ignorecase　　忽略大小写的查找<br> :set noignorecase　　不忽略大小写的查找</p></blockquote><p>查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。</p><blockquote><p>:set hlsearch　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。<br> :set nohlsearch　　关闭高亮搜索显示<br> :nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。<br> :set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。<br> :set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。</p></blockquote><h3 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h3><blockquote><p>ra 将当前字符替换为a，当期字符即光标所在字符。<br> s/old/new/ 用old替换new，替换当前行的第一个匹配<br> s/old/new/g 用old替换new，替换当前行的所有匹配<br> %s/old/new/ 用old替换new，替换所有行的第一个匹配<br> %s/old/new/g 用old替换new，替换整个文件的所有匹配<br> :10,20 s/^/    /g 在第10行知第20行每行前面加四个空格，用于缩进。<br> ddp 交换光标所在行和其下紧邻的一行。</p></blockquote><h3 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a>移动命令</h3><blockquote><p>h 左移一个字符<br> l 右移一个字符，这个命令很少用，一般用w代替。<br> k 上移一个字符<br> j 下移一个字符</p></blockquote><p>以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！<esc>，这里的Esc是必须的，否则命令不生效。</esc></p><blockquote><p>w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。<br> b 向后移动一个单词 2b 向后移动2个单词<br> e，同w，只不过是光标停在单词尾部<br> ge，同b，光标停在单词尾部。<br> ^ 移动到本行第一个非空白字符上。<br> 0（数字0）移动到本行第一个字符上，<br> <home> 移动到本行第一个字符。同0健。<br> $ 移动到行尾 3$ 移动到下面3行的行尾<br> gg 移动到文件头。 = [[<br> G（shift + g） 移动到文件尾。 = ]]<br> f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。<br> F 同f，反向查找。</home></p></blockquote><p>跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。</p><blockquote><p>Ctrl + e 向下滚动一行<br> Ctrl + y 向上滚动一行<br> Ctrl + d 向下滚动半屏<br> Ctrl + u 向上滚动半屏<br> Ctrl + f 向下滚动一屏<br> Ctrl + b 向上滚动一屏</p></blockquote><h3 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h3><blockquote><p>u 撤销（Undo）<br> U 撤销对整行的操作<br> Ctrl + r 重做（Redo），即撤销的撤销。</p></blockquote><h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><blockquote><p>x 删除当前字符<br> 3x 删除当前光标开始向后三个字符<br> X 删除当前字符的前一个字符。X=dh<br> dl 删除当前字符， dl=x<br> dh 删除前一个字符<br> dd 删除当前行<br> dj 删除上一行<br> dk 删除下一行<br> 10d 删除当前行开始的10行。<br> D 删除当前字符至行尾。D=d$<br> d$ 删除当前字符之后的所有字符（本行）<br> kdgg 删除当前行之前所有行（不包括当前行）<br> jdG（jd shift + g）   删除当前行之后所有行（不包括当前行）<br> :1,10d 删除1-10行<br> :11,$d 删除11行及以后所有的行<br> :1,$d 删除所有行<br> J(shift + j)　　删除两行之间的空行，实际上是合并两行。</p></blockquote><h3 id="拷贝和粘贴"><a href="#拷贝和粘贴" class="headerlink" title="拷贝和粘贴"></a>拷贝和粘贴</h3><blockquote><p>yy 拷贝当前行<br> nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。<br> p  在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。<br> shift+p 在当前行前粘贴<br> :1,10 co 20 将1-10行插入到第20行之后。<br> :1,$ co $ 将整个文件复制一份并添加到文件尾部。</p></blockquote><p>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制</p><blockquote><p>ddp交换当前行和其下一行<br> xp交换当前字符和其后一个字符</p></blockquote><h3 id="剪切命令"><a href="#剪切命令" class="headerlink" title="剪切命令"></a>剪切命令</h3><p>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切</p><blockquote><p>ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴<br> :1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。<br> :1, 10 m 20 将第1-10行移动到第20行之后。</p></blockquote><h3 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h3><blockquote><p>:wq 保存并退出<br> ZZ 保存并退出<br> :q! 强制退出并忽略所有更改<br> :e! 放弃所有修改，并打开原来文件。</p></blockquote><h3 id="窗口命令"><a href="#窗口命令" class="headerlink" title="窗口命令"></a>窗口命令</h3><blockquote><p>:split或new 打开一个新窗口，光标停在顶层的窗口上<br> :split file或:new file 用新窗口打开文件<br> split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。<br> Ctrl+ww 移动到下一个窗口<br> Ctrl+wj 移动到下方的窗口<br> Ctrl+wk 移动到上方的窗口</p></blockquote><h3 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h3><blockquote><p>:close 最后一个窗口不能使用此命令，可以防止意外退出vim。<br> :q 如果是最后一个被关闭的窗口，那么将退出vim。<br> ZZ 保存并退出。</p></blockquote><p>关闭所有窗口，只保留当前窗口</p><blockquote><p>:only</p></blockquote><h3 id="录制宏"><a href="#录制宏" class="headerlink" title="录制宏"></a>录制宏</h3><p>按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。</p><h3 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h3><blockquote><p>:!command<br> :!ls 列出当前目录下文件<br> :!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。</p></blockquote><p>:!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。<br> :suspend或Ctrl - Z 挂起vim，回到shell，按fg可以返回vim。</p><h3 id="注释命令"><a href="#注释命令" class="headerlink" title="注释命令"></a>注释命令</h3><p>perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入#</p><blockquote><p>3,5 s/^/#/g 注释第3-5行<br> 3,5 s/^#//g 解除3-5行的注释<br> 1,$ s/^/#/g 注释整个文档。<br> :%s/^/#/g 注释整个文档，此法更快。</p></blockquote><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><blockquote><p>:help or F1 显示整个帮助<br> :help xxx 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。<br> :help ‘number’ Vim选项的帮助用单引号括起<br> :help <esc> 特殊键的帮助用&lt;&gt;扩起<br> :help -t Vim启动参数的帮助用-<br> ：help i_<esc> 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式</esc></esc></p></blockquote><p>帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回</p><h3 id="其他非编辑命令"><a href="#其他非编辑命令" class="headerlink" title="其他非编辑命令"></a>其他非编辑命令</h3><p>. 重复前一次命令</p><blockquote><p>:set ruler?　　查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看<br> :scriptnames　　查看vim脚本文件的位置，比如.vimrc文件，语法文件及plugin等。<br> :set list 显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用set lcs=tab:&gt;-命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了expendtab，那么tab将被扩展为空格。</p></blockquote><h3 id="Vim教程"><a href="#Vim教程" class="headerlink" title="Vim教程"></a>Vim教程</h3><p>在Unix系统上</p><blockquote><p>$ vimtutor</p></blockquote><p>在Windows系统上</p><blockquote><p>:help tutor</p></blockquote><p>syntax</p><blockquote><p>:syntax 列出已经定义的语法项<br> :syntax clear 清除已定义的语法规则<br> :syntax case match 大小写敏感，int和Int将视为不同的语法元素<br> :syntax case ignore 大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案</p></blockquote><p>引用：<a href="https://www.jianshu.com/p/0009bf462f15">https://www.jianshu.com/p/0009bf462f15</a></p>]]></content>
      
      
      <categories>
          
          <category> AssistTool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UIClip使用技巧</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/uiclip/uiclip-shi-yong-ji-qiao/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/uiclip/uiclip-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h4 id="Step1-设置相机"><a href="#Step1-设置相机" class="headerlink" title="Step1 设置相机"></a>Step1 设置相机</h4><p>设置Canvas的 ScreenCamera，不然只有scene视图生效，Game视图不生效</p><h4 id="Step2-获取-Corners"><a href="#Step2-获取-Corners" class="headerlink" title="Step2 获取 Corners"></a>Step2 获取 Corners</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221144431875.png" alt="image-20211221144431875" style="zoom:80%;"> <p>Corners 是在世界坐标下，并且他的各个值含义如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221144504931.png" alt="image-20211221144504931" style="zoom:80%;"> <h4 id="Step3-Shader中使用"><a href="#Step3-Shader中使用" class="headerlink" title="Step3 Shader中使用"></a>Step3 Shader中使用</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221144631937.png" alt="image-20211221144631937" style="zoom:80%;"> <h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>UGUI 默认 的 UI Shader 使用的是本地空间的坐标，原因是 UGUI 底层将 Corners 转换到了本地空间</p><p>MaskableGraphic</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221145126416.png" alt="image-20211221145126416" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221145207408.png" alt="image-20211221145207408" style="zoom: 67%;">  ]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> UIClip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书籍查找</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/chang-yong-gong-ju/shu-ji-cha-zhao/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/chang-yong-gong-ju/shu-ji-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h1 id="科学论文查找"><a href="#科学论文查找" class="headerlink" title="科学论文查找"></a>科学论文查找</h1><h4 id="Discover-scientific-knowledge-and-stay-connected-to-the-world-of-science"><a href="#Discover-scientific-knowledge-and-stay-connected-to-the-world-of-science" class="headerlink" title="Discover scientific knowledge and stay connected to the world of science"></a>Discover scientific knowledge and stay connected to the world of science</h4><p><a href="https://www.researchgate.net/">https://www.researchgate.net/</a></p><h1 id="在线电子书分享平台"><a href="#在线电子书分享平台" class="headerlink" title="在线电子书分享平台"></a>在线电子书分享平台</h1><p>道客巴巴在线文档分享平台</p><p><a href="https://www.doc88.com/p-6911506700223.html">https://www.doc88.com/p-6911506700223.html</a></p>]]></content>
      
      
      <categories>
          
          <category> AssistTool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shader效果验证</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/shader-xiao-guo-yan-zheng/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/shader-xiao-guo-yan-zheng/</url>
      
        <content type="html"><![CDATA[<h1 id="shader-快速验证工具网站"><a href="#shader-快速验证工具网站" class="headerlink" title="shader 快速验证工具网站"></a>shader 快速验证工具网站</h1><h4 id="ShaderToy"><a href="#ShaderToy" class="headerlink" title="ShaderToy"></a>ShaderToy</h4><p><a href="https://www.shadertoy.com/">https://www.shadertoy.com/</a></p><h4 id="PolyCube"><a href="#PolyCube" class="headerlink" title="PolyCube"></a>PolyCube</h4><p><a href="https://rice.moonedit.com/">https://rice.moonedit.com/</a></p><h4 id="GLSL-SANDBOX"><a href="#GLSL-SANDBOX" class="headerlink" title="GLSL SANDBOX"></a>GLSL SANDBOX</h4><p><a href="https://glslsandbox.com/?page=2">https://glslsandbox.com/?page=2</a></p><h4 id="GLSL-在线工具"><a href="#GLSL-在线工具" class="headerlink" title="GLSL 在线工具"></a>GLSL 在线工具</h4><p><a href="https://www.techbrood.com/tool?p=glsleditor">https://www.techbrood.com/tool?p=glsleditor</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分析工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费美术插件</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/artresource/cha-jian/mian-fei-mei-zhu-cha-jian/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/artresource/cha-jian/mian-fei-mei-zhu-cha-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="免费插件"><a href="#免费插件" class="headerlink" title="免费插件"></a>免费插件</h1><p>一个非常多免费插件的网站 <a href="https://www.macv.com/cjlist/">https://www.macv.com/cjlist/</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017211126780.png" alt="image-20211017211126780"></p>]]></content>
      
      
      <categories>
          
          <category> ArtResource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费CDN</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/website/blog/hexo/content/mian-fei-cdn/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/website/blog/hexo/content/mian-fei-cdn/</url>
      
        <content type="html"><![CDATA[<h1 id="免费-CDN"><a href="#免费-CDN" class="headerlink" title="免费 CDN"></a>免费 CDN</h1><p>国内 <a href="https://www.bootcdn.cn/">https://www.bootcdn.cn/</a></p><p>国外适用于 Github 的免费CDN <a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a></p><p>例如：<a href="https://cdn.jsdelivr.net/gh/klj35/BlockCDN@0.0.1/js/MathJax.js">https://cdn.jsdelivr.net/gh/klj35/BlockCDN@0.0.1/js/MathJax.js</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染框架</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/xuan-ran-kuang-jia/xuan-ran-kuang-jia/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/xuan-ran-kuang-jia/xuan-ran-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="跨平台渲染框架-TheForge"><a href="#跨平台渲染框架-TheForge" class="headerlink" title="跨平台渲染框架 TheForge"></a>跨平台渲染框架 TheForge</h1><p><a href="https://github.com/ConfettiFX/The-Forge">https://github.com/ConfettiFX/The-Forge</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112115400447.png" alt="image-20211112115400447" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112115418172.png" alt="image-20211112115418172" style="zoom:50%;"> <h1 id="Gravity-Engine"><a href="#Gravity-Engine" class="headerlink" title="Gravity Engine"></a>Gravity Engine</h1><p><a href="https://github.com/MrySwk/GravityEngine">https://github.com/MrySwk/GravityEngine</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222150150348.png" alt="image-20211222150150348" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222150213590.png" alt="image-20211222150213590" style="zoom:67%;"> <h1 id="Filament"><a href="#Filament" class="headerlink" title="Filament"></a>Filament</h1><p>Google 专为手机平台写的开源 PBR 渲染</p><p><a href="https://github.com/google/filament">https://github.com/google/filament</a></p><p>超详细实现原理文档</p><p><a href="https://jerkwin.github.io/filamentcn/Filament.md.html#%E5%85%B3%E4%BA%8E">https://jerkwin.github.io/filamentcn/Filament.md.html#%E5%85%B3%E4%BA%8E</a></p><p>编译说明</p><p><a href="https://www.cxyzjd.com/article/jiamada/113783322">https://www.cxyzjd.com/article/jiamada/113783322</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222150312814.png" alt="image-20211222150312814" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222150720112.png" alt="image-20211222150720112" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222150755688.png" alt="image-20211222150755688" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222150818617.png" alt="image-20211222150818617" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻译工具</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/chang-yong-gong-ju/fan-yi-gong-ju/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/chang-yong-gong-ju/fan-yi-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="DeepL"><a href="#DeepL" class="headerlink" title="DeepL"></a>DeepL</h1><p><a href="https://www.deepl.com/zh/app/">https://www.deepl.com/zh/app/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211122112946681.png" alt="image-20211122112946681" style="zoom: 50%;"> <h1 id="百度翻译"><a href="#百度翻译" class="headerlink" title="百度翻译"></a>百度翻译</h1><p>支持截图翻译</p><p><a href="https://fanyi.baidu.com/appdownload/download.html?tab=desktop&amp;fr=pcplugin">https://fanyi.baidu.com/appdownload/download.html?tab=desktop&amp;fr=pcplugin</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221140531140.png" alt="image-20211221140531140" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> AssistTool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git工具</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/ban-ben-guan-li/ke-shi-hua-gong-ju/git/git-gong-ju/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/ban-ben-guan-li/ke-shi-hua-gong-ju/git/git-gong-ju/</url>
      
        <content type="html"><![CDATA[<h4 id="git-情景使用"><a href="#git-情景使用" class="headerlink" title="git 情景使用"></a>git 情景使用</h4><p><a href="https://github.com/klj35/git-flight-rules/blob/master/README_zh-CN.md">https://github.com/klj35/git-flight-rules/blob/master/README_zh-CN.md</a></p><h4 id="git-Subtree"><a href="#git-Subtree" class="headerlink" title="git Subtree"></a>git Subtree</h4><p>Git Subtree ,submodule</p><p><a href="https://einverne.github.io/post/2020/04/git-subtree-usage.html">https://einverne.github.io/post/2020/04/git-subtree-usage.html</a></p><p><a href="https://www.atlassian.com/git/tutorials/git-subtree">https://www.atlassian.com/git/tutorials/git-subtree</a></p><p>分离仓库</p><p><a href="https://segmentfault.com/a/1190000002548731">https://segmentfault.com/a/1190000002548731</a></p><p><a href="https://www.cnblogs.com/chucklu/p/4647625.html">https://www.cnblogs.com/chucklu/p/4647625.html</a></p><p><a href="https://lostechies.com/johnteague/2014/04/04/using-git-subtrees-to-split-a-repository/">https://lostechies.com/johnteague/2014/04/04/using-git-subtrees-to-split-a-repository/</a></p><p><a href="https://blog.csdn.net/yb223731/article/details/83274446">https://blog.csdn.net/yb223731/article/details/83274446</a></p><p> <strong>两个仓库合并成一个，</strong> <strong>关于</strong> <strong>Git</strong> <strong>子树合并</strong></p><p><a href="https://docs.github.com/cn/get-started/using-git/about-git-subtree-merges">https://docs.github.com/cn/get-started/using-git/about-git-subtree-merges</a></p><p>合并两个已经存在的git仓库</p><p><a href="https://www.jianshu.com/p/cf383f2e6207>">https://www.jianshu.com/p/cf383f2e6207&gt;</a></p><p>添加子仓库</p><p>git subtree add –prefix=Assets/WllGraphicsProject wll-graphics-project master –squash</p><p>拉去子仓库</p><p>git subtree pull –prefix=Assets/WllGraphicsProject wll-graphics-project release/v1.0.0 –squash</p><p>推送子仓库</p><p>git subtree push –prefix=Assets/WllGraphicsProject wll-graphics-project wll/v2.0.1</p><p>以当前节点作为检测起点</p><p>git subtree split –prefix=Assets/WllGraphicsProject –rejoin</p><p>Git subtree用法与常见问题分析</p><p><a href="https://zhuanlan.zhihu.com/p/253148857">https://zhuanlan.zhihu.com/p/253148857</a></p><h4 id="GitLFS"><a href="#GitLFS" class="headerlink" title="GitLFS"></a>GitLFS</h4><p><a href="https://www.atlassian.com/git/tutorials/big-repositories">https://www.atlassian.com/git/tutorials/big-repositories</a></p><p><a href="https://www.atlassian.com/git/tutorials/git-lfs">https://www.atlassian.com/git/tutorials/git-lfs</a></p><h4 id="Git-常见问题"><a href="#Git-常见问题" class="headerlink" title="Git 常见问题"></a>Git 常见问题</h4><p>GitLab 解除受保护的分支</p><p>问题一： <strong>Gitlab强制推送提示”You are not allowed to force push code to a protected branch on this project.”</strong> #11</p><p><a href="https://github.com/LeachZhou/blog/issues/11">https://github.com/LeachZhou/blog/issues/11</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221152132060.png" alt="image-20211221152132060" style="zoom:50%;"> <p>问题二：git ssh: Could not resolve hostname github.com: No address associated with hostname</p><p>解决办法：</p><p>ssh -T <a href="mailto:git@github.com">git@github.com</a></p><p>ping <a href="http://www.github.com/">www.github.com</a></p><p>C:\Windows\System32\drivers\etc</p><p>20.205.243.166  github.com</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220723114334182.png" alt="image-20220723114334182" style="zoom:67%;"> <h4 id="sourcetree-密码修改清楚缓存"><a href="#sourcetree-密码修改清楚缓存" class="headerlink" title="sourcetree 密码修改清楚缓存"></a>sourcetree 密码修改清楚缓存</h4><p><a href="https://www.jianshu.com/p/8aa97f96f786">https://www.jianshu.com/p/8aa97f96f786</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222153315820.png" alt="image-20211222153315820" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> AssistTool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本管理 </tag>
            
            <tag> 可视化工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染书籍教程</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/xuan-ran-jiao-cheng/xuan-ran-shu-ji-jiao-cheng/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/xuan-ran-jiao-cheng/xuan-ran-shu-ji-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h4 id="GPU系列书籍书籍出版顺序"><a href="#GPU系列书籍书籍出版顺序" class="headerlink" title="GPU系列书籍书籍出版顺序"></a>GPU系列书籍书籍出版顺序</h4><p>GPU Gems1 ~ GPU Gems2</p><p><a href="https://developer.nvidia.com/gpugems/gpugems/contributors">https://developer.nvidia.com/gpugems/gpugems/contributors</a></p><p>&lt; GPU Pro &gt; 1~7 and &lt; GPU Zen &gt; 源码地址</p><p>来自 <a href="https://github.com/QianMo/GPU-Pro-Books-Source-Code">https://github.com/QianMo/GPU-Pro-Books-Source-Code</a></p><p>内容目录</p><p><a href="https://zhuanlan.zhihu.com/p/34917895">https://zhuanlan.zhihu.com/p/34917895</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-570c74c9f1a845f7042461dfa3000da5_720w.jpg" alt="v2-570c74c9f1a845f7042461dfa3000da5_720w" style="zoom:67%;"> <h4 id="real-time-shadows"><a href="#real-time-shadows" class="headerlink" title="real-time shadows"></a>real-time shadows</h4><p><a href="https://www.doc88.com/p-6911506700223.html">https://www.doc88.com/p-6911506700223.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222145537960.png" alt="image-20211222145537960" style="zoom: 50%;"> <h4 id="GPU-Pro-360-Guide-to-Shadows"><a href="#GPU-Pro-360-Guide-to-Shadows" class="headerlink" title="GPU Pro 360 Guide to Shadows"></a>GPU Pro 360 Guide to Shadows</h4><p><a href="https://www.doc88.com/p-3317851304635.html">https://www.doc88.com/p-3317851304635.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222145656609.png" alt="image-20211222145656609" style="zoom:50%;"> <h4 id="计算几何与计算机图形必备书单及下载"><a href="#计算几何与计算机图形必备书单及下载" class="headerlink" title="计算几何与计算机图形必备书单及下载"></a>计算几何与计算机图形必备书单及下载</h4><p>一本书大概 5元左右 地址：</p><p><a href="https://github.com/HW140701/Book-list-of-computational-geometry-and-computer-graphics">https://github.com/HW140701/Book-list-of-computational-geometry-and-computer-graphics</a></p><p>计算机图形学书单列表</p><ul><li>Fundamentals     of Computer Graphics</li><li>Physically     Based Rendering From Theory To Implementation</li><li>Real-Time     Rendering</li><li>GPU     Gems</li><li>ShaderX</li><li>GPU     Pro</li><li>GPU     Zen</li><li>GPU     Pro 360</li><li>Foundations     of Game Engine Development</li><li>3D     Math Primer for Graphics and Game Development</li><li>Essential     Mathematics for Games and Interactive Applications</li><li>Jim     Blinn’s Corner</li><li>Game     Engine Gems</li><li>Game     Engine Architecture</li><li>Graphics     Gems</li><li>Ray     Tracing in One Week</li><li>Game     Programming Gems</li><li>The     HDRI Handbook</li><li>High     Dynamic Range Imaging</li><li>Interactive     Computer Graphics</li><li>Realistic     Image Synthesis Using Photon Mapping</li><li>Ray     Tracing Gems</li><li>Efficient     Illumination Algorithms for Global Illumination In Interactive and     Real-Time Rendering</li><li>Mathematics     for 3D Game Programming and Computer Graphics</li><li>Real-Time     Shadows</li><li>Advanced     global illumination</li><li>Computer     Graphics Principles and Practice</li><li>Computer     Graphics Through OpenGL – From Theory to Experiments</li><li>Game     Physics Engine Development- How to Build a Robust Commercial-Grade Physics     Engine for your Game</li><li>Graphics     Shaders - Theory and Practice</li><li>Insights</li><li>The     Magic of Computer Graphics - Landmarks in Rendering</li><li>OpenGL     Programming Guide</li><li>OpenGL     SuperBible</li><li>OpenGL     4.0 Shading Language Cookbook</li><li>OpenGL     Shading Language</li><li>Fluid     Engine Development</li><li>Fluid     Simulation for Computer Graphics</li><li>The     Nature of Code - Simulating Natural Systems with Processing</li><li>Game     Physics Pearls</li><li>Game     Physics</li><li>Game     Physics Cookbook</li><li>Physics     for Game Developers</li><li>Physics     for Game Programmers</li><li>Physics     Modeling for Game Programmers</li><li>Physics-Based     Animation</li><li>Foundations     of Physically Based Modeling and Animation</li><li>Production     Volume Rendering - Design and Implementation</li><li>Collision     Detection in Interactive 3D Environments</li><li>Real-Time     Collision Detection</li><li>Introduction     to 3D Game Programming with DirectX</li><li>Practical     Rendering and Computation with Direct3D 11</li><li>Real-Time     3D Rendering with DirectX and HLSL - A Practical Guide to Graphics     Programming</li><li>The     Art of Fluid Animation</li><li>Ray     Tracing from the Ground Up</li><li>Character     Animation With Direct3D</li><li>Real-time     3D Character Animation with Visual C++</li><li>Vulkan     Programming Guide - The Official Guide to Learning Vulkan</li><li>Learning     Vulkan</li><li>Vulkan     Cookbook - Work through recipes to unlock the full potential of the next     generation graphics API-Vulkan</li><li>GLSL     Essentials - Enrich your 3D scenes with the power of GLSL</li><li>Computer     Animation - Algorithms and Techniques</li><li>The     Ray Tracer Challenge - A Test-Driven Guide to Your First 3D Renderer</li><li>Ray     Tracing - A Tool for All</li><li>Cloth     Simulation for Computer Graphics</li><li>Real-Time     Volume Graphics</li><li>Computer     Graphics from Scratch - A Programmer’s Introduction to 3D Rendering</li><li>3D     Game Engine Design - A Practical Approach to Real-Time Computer Graphics</li><li>3D     Game Engine Architecture - Engineering Real-Time Applications with Wild     Magic</li><li>Real-Time     Cameras - A Guide for Game Designers and Developers</li><li>Game     AI Pro - Collected Wisdom of Game AI Professionals</li><li>Game     AI Pro 360</li><li>Visualizing     Quaternions</li><li>Quaternions     for Computer Graphics</li><li>3D     Engine Design for Virtual Globes</li><li>Texturing     and Modeling - A Procedural Approach</li><li>Level     of Detail for 3D Graphics</li><li>Non-Photorealistic     Rendering</li><li>Non-Photorealistic     Computer Graphics - Modeling, Rendering, and Animation</li><li>The     Algorithms and Principles of Non-photorealistic Graphics - Artistic     Rendering and Cartoon Animation</li><li>Digital     Character Development - Theory and Practice</li><li>3D     Graphics Rendering Cookbook - A comprehensive guide to exploring rendering     algorithms in modern OpenGL and Vulkan</li><li>Tricks     of the 3D Game Programming Gurus - Advanced 3D Graphics and Rasterization</li><li>Graphics     Programming Methods</li><li>Principles     of Digital Image Synthesis</li><li>Digital     Image Processing</li><li>Game     Development Tools</li><li>Div,     Grad, Curl, and All That - An Informal Text on Vector Calculus</li><li>Game     Programming Algorithms and Techniques - A Platform-Agnostic Approach</li><li>Game     Programming Patterns</li><li>Game     Programming Golden Rules</li><li>Augmented     Reality - Principles and Practice</li><li>Practical     Augmented Reality - A Guide to the Technologies, Applications, and Human     Factors for AR and VR-Addison</li><li>VR     Developer Gems</li><li>Image     Objects - An Archaeology of Computer Graphics</li><li>Advanced     High Dynamic Range Imaging</li><li>A     Biography of the Pixel</li><li>Computer     Graphics Programming in OpenGL with C++</li><li>GPGPU     Programming for Games and Science</li><li>Computer     Facial Animation</li><li>Handbook     of Digital Image Synthesis - Scientific Foundations of Rendering</li><li>Image     Content Retargeting - Maintaining Color, Tone, and Spatial Consistency</li><li>Introduction     to Computer Graphics - A Practical Learning Approach</li><li>Direct3D     Rendering Cookbook</li><li>Practical     Algorithms for 3D Computer Graphics</li><li>Computer     Graphics - From Pixels to Programmable Graphics Hardware</li><li>The     History of Visual Magic in Computers - How Beautiful Images are Made in     CAD, 3D, VR and AR</li><li>WebGL     Programming Guide - Interactive 3D Graphics Programming with WebGL</li><li>Beginning     DirectX 11 Game Programming</li><li>The     CUDA Handbook - A Comprehensive Guide to GPU Programming</li><li>OpenGL     Development Cookbook</li><li>GPU     Computing Gems</li><li>3D     Graphics for Game Programming</li><li>Light     &amp; Skin Interactions - Simulations for Computer Graphics Applications</li><li>Video     Game Optimization</li><li>Mathematics     for Computer Graphics</li><li>An     Integrated Introduction to Computer Graphics and Geometric Modeling</li></ul><p>计算几何书单列表</p><ul><li>Polygon     Mesh Processing</li><li>Computational     Geometry – Algorithms and Applications</li><li>Handbook     of Discrete and Computational Geometry</li><li>Geometric     tools for computer graphics</li><li>Computational     Geometry in C</li><li>Computational     Geometry：An Introduction</li><li>Geometric     Algebra for Computer Science - An Object-Oriented Approach to Geometry</li><li>Isosurfaces     - Geometry, Topology, and Algorithms</li><li>Guide     to Computational Geometry Processing Foundations, Algorithms, and Methods</li><li>Discrete     and Computational Geometry</li><li>Robust     and Error-Free Geometric Computing</li><li>Implicit     Curves and Surfaces - Mathematics, Data Structures and Algorithms</li><li>Computational     Geometry - An Introduction Through Randomized Algorithms</li><li>Effective     Computational Geometry for Curves and Surfaces</li><li>Nonlinear     Computational Geometry</li><li>Handbook     of Computer Aided Geometric Design</li><li>Computational     Geometry on Surfaces - Performing Computational Geometry on the Cylinder,     the Sphere, the Torus, and the Cone</li><li>Geometry     for Computer Graphics - Formulae, Examples and Proofs</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图形API</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/gpu-jia-gou/tu-xing-api/tu-xing-api/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/gpu-jia-gou/tu-xing-api/tu-xing-api/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenGL-amp-Vulkan"><a href="#OpenGL-amp-Vulkan" class="headerlink" title="OpenGL &amp; Vulkan"></a>OpenGL &amp; Vulkan</h1><p>安卓图形API 官网文档</p><p><a href="https://www.khronos.org/">https://www.khronos.org/</a></p><p><a href="https://www.khronos.org/registry/">https://www.khronos.org/registry/</a></p><p><a href="https://www.khronos.org/developers">https://www.khronos.org/developers</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104548536.png" alt="image-20211112104548536" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104606358.png" alt="image-20211112104606358" style="zoom:67%;">  <h4 id="安卓图形管线"><a href="#安卓图形管线" class="headerlink" title="安卓图形管线"></a>安卓图形管线</h4><p><a href="https://www.khronos.org/registry/OpenGL/">https://www.khronos.org/registry/OpenGL/</a></p><p><a href="https://www.khronos.org/registry/OpenGL/index_es.php">https://www.khronos.org/registry/OpenGL/index_es.php</a></p><p><a href="https://www.khronos.org/developers/reference-cards">https://www.khronos.org/developers/reference-cards</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104626471.png" alt="image-20211112104626471" style="zoom: 33%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104641304.png" alt="image-20211112104641304" style="zoom:50%;"> <h4 id="图书"><a href="#图书" class="headerlink" title="图书"></a>图书</h4><p><a href="https://www.khronos.org/developers/books/">https://www.khronos.org/developers/books/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104728769.png" alt="image-20211112104728769" style="zoom:50%;"> <h1 id="DX"><a href="#DX" class="headerlink" title="DX"></a>DX</h1><h4 id="Direct3D-官网"><a href="#Direct3D-官网" class="headerlink" title="Direct3D 官网"></a>Direct3D 官网</h4><p><a href="https://docs.microsoft.com/en-us/windows/win32/graphics-and-multimedia">https://docs.microsoft.com/en-us/windows/win32/graphics-and-multimedia</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112104449385.png" alt="image-20211112104449385" style="zoom:50%;"> <h1 id="Metal"><a href="#Metal" class="headerlink" title="Metal"></a>Metal</h1><p>Metal 官网</p><p><a href="https://developer.apple.com/metal/">https://developer.apple.com/metal/</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形硬件 </tag>
            
            <tag> GPU架构 </tag>
            
            <tag> 图形API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>着色语言</title>
      <link href="/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/gpu-jia-gou/shaderlanguage/shaderlanguage/"/>
      <url>/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/gpu-jia-gou/shaderlanguage/shaderlanguage/</url>
      
        <content type="html"><![CDATA[<h1 id="GLSL基础语法"><a href="#GLSL基础语法" class="headerlink" title="GLSL基础语法"></a>GLSL基础语法</h1><p>官网文档：</p><p><a href="https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.1.20.pdf">https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.1.20.pdf</a></p><p>内置方法：</p><p><a href="https://www.khronos.org/registry/OpenGL-Refpages/">https://www.khronos.org/registry/OpenGL-Refpages/</a></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote><p>单行注释：//<br> 多行注释：/* */</p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>GLSL的变量命名方式与C语言类似。变量的名称可以使用字母，数字以及下划线，但变量名不能以数字开头，还有变量名不能以gl_作为前缀，这个是GLSL保留的前缀，用于GLSL的内部变量。当然还有一些GLSL保留的名称是不能够作为变量的名称的。</p><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p>除了布尔型，整型，浮点型基本类型外，GLSL还引入了一些在着色器中经常用到的类型作为基本类型。这些基本类型都可以作为结构体内部的类型。如下表:</p><table><thead><tr><th>数据类型</th><th align="right">描述</th></tr></thead><tbody><tr><td>void</td><td align="right">跟C语言的void类似，表示空类型。作为函数的返回类型，表示这个函数不返回值。</td></tr><tr><td>bool</td><td align="right">布尔类型，可以是true 和false，以及可以产生布尔型的表达式。</td></tr><tr><td>int</td><td align="right">整型 代表至少包含16位的有符号的整数。可以是十进制的，十六进制的，八进制的。</td></tr><tr><td>float</td><td align="right">浮点型</td></tr><tr><td>bvec2</td><td align="right">包含2个布尔成分的向量</td></tr><tr><td>bvec3</td><td align="right">包含3个布尔成分的向量</td></tr><tr><td>bvec4</td><td align="right">包含4个布尔成分的向量</td></tr><tr><td>ivec2</td><td align="right">包含2个整型成分的向量</td></tr><tr><td>ivec3</td><td align="right">包含3个整型成分的向量</td></tr><tr><td>ivec4</td><td align="right">包含4个整型成分的向量</td></tr><tr><td>mat2 或者 mat2x2</td><td align="right">2×2的浮点数矩阵类型</td></tr><tr><td>mat3或者mat3x3</td><td align="right">3×3的浮点数矩阵类型</td></tr><tr><td>mat4x4</td><td align="right">4×4的浮点矩阵</td></tr><tr><td>mat2x3</td><td align="right">2列3行的浮点矩阵（OpenGL的矩阵是列主顺序的）</td></tr><tr><td>mat2x4</td><td align="right">2列4行的浮点矩阵</td></tr><tr><td>mat3x2</td><td align="right">3列2行的浮点矩阵</td></tr><tr><td>mat3x4</td><td align="right">3列4行的浮点矩阵</td></tr><tr><td>mat4x2</td><td align="right">4列2行的浮点矩阵</td></tr><tr><td>mat4x3</td><td align="right">4列3行的浮点矩阵</td></tr><tr><td>sampler1D</td><td align="right">用于内建的纹理函数中引用指定的1D纹理的句柄。只可以作为一致变量或者函数参数使用</td></tr><tr><td>sampler2D</td><td align="right">二维纹理句柄</td></tr><tr><td>sampler3D</td><td align="right">三维纹理句柄</td></tr><tr><td>samplerCube</td><td align="right">cube map纹理句柄</td></tr><tr><td>sampler1DShadow</td><td align="right">一维深度纹理句柄</td></tr><tr><td>sampler2DShadow</td><td align="right">二维深度纹理句柄</td></tr></tbody></table><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p>结构体可以组合基本类型和数组来形成用户自定义的类型。在定义一个结构体的同时，你可以定义一个结构体实例。或者后面再定义。</p><ul><li>=为结构体赋值，</li><li>==，!=来判断两个结构体是否相等。</li></ul><p>mySurface = secondSurface;</p><p>mySurface == secondSurface;</p><p>只有结构体中的每个成分都相等，那么这两个结构体才是相等的。访问结构体的内部成员使用. (点语法)来访问。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">vec3</span> color <span class="token operator">=</span> mySurface<span class="token punctuation">.</span>color <span class="token operator">+</span> secondSurface<span class="token punctuation">.</span>color<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结构体至少包含一个成员。固定大小的数组也可以被包含在结构体中。GLSL的结构体不支持嵌套定义。只有预先声明的结构体可以嵌套其中。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">struct</span> <span class="token class-name">myStruct</span> <span class="token punctuation">{</span>  <span class="token keyword">vec3</span> points<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//固定大小的数组是合法的</span>  surface surf<span class="token punctuation">;</span>  <span class="token comment">//可以，之前已经定义了</span>  <span class="token keyword">struct</span> <span class="token class-name">velocity</span> <span class="token punctuation">{</span>  <span class="token comment">//不合法float speed;</span>    <span class="token keyword">vec3</span> direction<span class="token punctuation">;</span>  <span class="token punctuation">}</span> velo<span class="token punctuation">;</span>  subSurface sub<span class="token punctuation">;</span> <span class="token comment">//不合法，没有预先声明；};</span>  <span class="token keyword">struct</span> <span class="token class-name">subSurface</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token punctuation">}</span> ID<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>GLSL中只可以使用一维的数组。数组的类型可以是一切基本类型或者结构体。下面的几种数组声明是合法的：</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">vec4</span> lightPositions<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">vec4</span> lightPos<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> lightPositions<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> numSurfaces <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>surface myFiveSurfaces<span class="token punctuation">[</span>numSurfaces<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>指定显示大小的数组可以作为函数的参数或者使返回值,也可以作为结构体的成员.数组类型内建了一个length()函数，可以返回数组的长度。</p><p><code>lightPositions.length()</code> //返回数组的大小 8</p><p>最后，你不能定义数组的数组。</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>变量的声明可以使用如下的修饰符。</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>const</td><td>常量值必须在声明是初始化。它是只读的不可修改的。</td></tr><tr><td>attribute</td><td>表示只读的顶点数据，只用在顶点着色器中。数据来自当前的顶点状态或者顶点数组。它必须是全局范围声明的，不能再函数内部。一个attribute可以是浮点数类型的标量，向量，或者矩阵。不可以是数组或则结构体</td></tr><tr><td>uniform</td><td>一致变量。在着色器执行期间一致变量的值是不变的。与const常量不同的是，这个值在编译时期是未知的是由着色器外部初始化的。一致变量在顶点着色器和片段着色器之间是共享的。它也只能在全局范围进行声明。</td></tr><tr><td>varying</td><td>顶点着色器的输出。例如颜色或者纹理坐标，（插值后的数据）作为片段着色器的只读输入数据。必须是全局范围声明的全局变量。可以是浮点数类型的标量，向量，矩阵。不能是数组或者结构体。</td></tr><tr><td>centorid varying</td><td>在没有多重采样的情况下，与varying是一样的意思。在多重采样时，centorid varying在光栅化的图形内部进行求值而不是在片段中心的固定位置求值。</td></tr><tr><td>invariant</td><td>(不变量)用于表示顶点着色器的输出和任何匹配片段着色器的输入，在不同的着色器中计算产生的值必须是一致的。所有的数据流和控制流，写入一个invariant变量的是一致的。编译器为了保证结果是完全一致的，需要放弃那些可能会导致不一致值的潜在的优化。除非必要，不要使用这个修饰符。在多通道渲染中避免z-fighting可能会使用到。</td></tr><tr><td>in</td><td>用在函数的参数中，表示这个参数是输入的，在函数中改变这个值，并不会影响对调用的函数产生副作用。（相当于C语言的传值），这个是函数参数默认的修饰符</td></tr><tr><td>out</td><td>用在函数的参数中，表示该参数是输出参数，值是会改变的。</td></tr><tr><td>inout</td><td>用在函数的参数，表示这个参数即是输入参数也是输出参数。</td></tr></tbody></table><h4 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h4><p>内置变量可以与固定函数功能进行交互。在使用前不需要声明。顶点着色器可用的内置变量如下表：</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>gl_Color</td><td>vec4</td><td>输入属性-表示顶点的主颜色</td></tr><tr><td>gl_SecondaryColor</td><td>vec4</td><td>输入属性-表示顶点的辅助颜色</td></tr><tr><td>gl_Normal</td><td>vec3</td><td>输入属性-表示顶点的法线值</td></tr><tr><td>gl_Vertex</td><td>vec4</td><td>输入属性-表示物体空间的顶点位置</td></tr><tr><td>gl_MultiTexCoordn</td><td>vec4</td><td>输入属性-表示顶点的第n个纹理的坐标</td></tr><tr><td>gl_FogCoord</td><td>float</td><td>输入属性-表示顶点的雾坐标</td></tr><tr><td>gl_Position</td><td>vec4</td><td>输出属性-变换后的顶点的位置，用于后面的固定的裁剪等操作。所有的顶点着色器都必须写这个值。</td></tr><tr><td>gl_ClipVertex</td><td>vec4</td><td>输出坐标，用于用户裁剪平面的裁剪</td></tr><tr><td>gl_PointSize</td><td>float</td><td>点的大小</td></tr><tr><td>gl_FrontColor</td><td>vec4</td><td>正面的主颜色的varying输出</td></tr><tr><td>gl_BackColor</td><td>vec4</td><td>背面主颜色的varying输出</td></tr><tr><td>gl_FrontSecondaryColor</td><td>vec4</td><td>正面的辅助颜色的varying输出</td></tr><tr><td>gl_BackSecondaryColor</td><td>vec4</td><td>背面的辅助颜色的varying输出</td></tr><tr><td>gl_TexCoord[]</td><td>vec4</td><td>纹理坐标的数组varying输出</td></tr><tr><td>gl_FogFragCoord</td><td>float</td><td>雾坐标的varying输出</td></tr></tbody></table><p>片段着色器的内置变量如下表：</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>gl_Color</td><td>vec4</td><td>包含主颜色的插值只读输入</td></tr><tr><td>gl_SecondaryColor</td><td>vec4</td><td>包含辅助颜色的插值只读输入</td></tr><tr><td>gl_TexCoord[]</td><td>vec4</td><td>包含纹理坐标数组的插值只读输入</td></tr><tr><td>gl_FogFragCoord</td><td>float</td><td>包含雾坐标的插值只读输入</td></tr><tr><td>gl_FragCoord</td><td>vec4</td><td>只读输入，窗口的x,y,z和1/w</td></tr><tr><td>gl_FrontFacing</td><td>bool</td><td>只读输入，如果是窗口正面图元的一部分，则这个值为true</td></tr><tr><td>gl_PointCoord</td><td>vec2</td><td>点精灵的二维空间坐标范围在(0.0, 0.0)到(1.0, 1.0)之间，仅用于点图元和点精灵开启的情况下。</td></tr><tr><td>gl_FragData[]</td><td>vec4</td><td>使用glDrawBuffers输出的数据数组。不能与gl_FragColor结合使用。</td></tr><tr><td>gl_FragColor</td><td>vec4</td><td>输出的颜色用于随后的像素操作</td></tr><tr><td>gl_FragDepth</td><td>float</td><td>输出的深度用于随后的像素操作，如果这个值没有被写，则使用固定功能管线的深度值代替</td></tr></tbody></table><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><p>GLSL语言的操作符与C语言相似。如下表（操作符的优先级从高到低排列）</p><table><thead><tr><th>操作符</th><th>描述</th><th></th><th></th></tr></thead><tbody><tr><td>()</td><td>用于表达式组合，函数调用，构造</td><td></td><td></td></tr><tr><td>[]</td><td>数组下标，向量或矩阵的选择器</td><td></td><td></td></tr><tr><td>.</td><td>结构体和向量的成员选择</td><td></td><td></td></tr><tr><td>++ –</td><td>前缀或后缀的自增自减操作符</td><td></td><td></td></tr><tr><td>+ – !</td><td>一元操作符，表示正 负 逻辑非</td><td></td><td></td></tr><tr><td>* /</td><td>乘 除操作符</td><td></td><td></td></tr><tr><td>+ -</td><td>二元操作符 表示加 减操作</td><td></td><td></td></tr><tr><td>&lt;&gt; &lt;= &gt;= == !=</td><td>小于，大于，小于等于， 大于等于，等于，不等于 判断符</td><td></td><td></td></tr><tr><td>&amp;&amp;</td><td></td><td>^^</td><td>逻辑与 ，或，  异或</td></tr><tr><td>?:</td><td>条件判断符</td><td></td><td></td></tr><tr><td>= += –= *=  /=</td><td>赋值操作符</td><td></td><td></td></tr><tr><td>,</td><td>表示序列</td><td></td><td></td></tr></tbody></table><p>像 求地址的&amp; 和 解引用的 * 操作符不再GLSL中出现，因为GLSL不能直接操作地址。类型转换操作也是不允许的。 位操作符(&amp;,|,^,~, &lt;&lt;, &gt;&gt; ,&amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=)是GLSL保留的操作符，将来可能会被使用。还有求模操作（%，%=)也是保留的。</p><h4 id="数组访问"><a href="#数组访问" class="headerlink" title="数组访问"></a>数组访问</h4><p>数组的下标从0开始。合理的范围是[0, size - 1]。跟C语言一样。如果数组访问越界了，那行为是未定义的。如果着色器的编译器在编译时知道数组访问越界了，就会提示编译失败。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">vec4</span> myColor<span class="token punctuation">,</span> ambient<span class="token punctuation">,</span> diffuse<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> specular<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myColor <span class="token operator">=</span> ambient <span class="token operator">+</span> diffuse<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> specular<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>构造函数可以用于初始化包含多个成员的变量，包括数组和结构体。构造函数也可以用在表达式中。调用方式如下：</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">vec3</span> myNormal <span class="token operator">=</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>greenTint <span class="token operator">=</span> myColor <span class="token operator">+</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ivec4</span> myColor <span class="token operator">=</span> <span class="token keyword">ivec4</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用混合标量和向量的方式来构造，只要你的元素足以填满该向量。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">vec4</span> color <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">vec3</span> v <span class="token operator">=</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">vec3</span> v1 <span class="token operator">=</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">vec2</span> fv <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span>fv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用x值2.5构造，y值被舍弃</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于矩阵，OpenGL中矩阵是列主顺序的。如果只传了一个值，则会构造成对角矩阵，其余的元素为0.</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">mat3</span> m3 <span class="token operator">=</span> <span class="token keyword">mat3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造出来的矩阵：</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token number">1.0</span> <span class="token number">0.0</span> <span class="token number">0.0</span><span class="token number">0.0</span> <span class="token number">1.0</span> <span class="token number">0.0</span><span class="token number">0.0</span> <span class="token number">0.0</span> <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">mat2</span> matrix1 <span class="token operator">=</span> <span class="token keyword">mat2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">mat2</span> matrix2 <span class="token operator">=</span> <span class="token keyword">mat2</span><span class="token punctuation">(</span><span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">mat2</span> matrix3 <span class="token operator">=</span> <span class="token keyword">mat2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">mat2</span> matrix4 <span class="token operator">=</span> <span class="token keyword">mat2</span><span class="token punctuation">(</span><span class="token keyword">mat4</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//会取 4×4矩阵左上角的2×2矩阵。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数可以用于标量数据类型的转换。GLSL不支持隐式或显示的转换，只能通过构造函数来转。其中int转为float值是一样的。float转为int则小数部分被丢弃。int或float转为bool，0和0.0转为false，其余的值转为true. bool转为int或float，false值转为0和0.0，true转为1和1.0.</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">1.7</span><span class="token punctuation">;</span><span class="token keyword">int</span> I <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// I = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>数组的初始化，可以在构造函数中传入值来初始化数组中对应的每一个值。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">ivec2</span> position<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">ivec2</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ivec2</span> pos2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">ivec2</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>构造函数也可以对结构体进行初始化。其中顺序和类型要一一对应。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">struct</span> <span class="token class-name">surface</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span>  index<span class="token punctuation">;</span>   <span class="token keyword">vec3</span> color<span class="token punctuation">;</span>  <span class="token keyword">float</span> rotate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>surface mySurface <span class="token operator">=</span> <span class="token function">surface</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="成分选择"><a href="#成分选择" class="headerlink" title="成分选择"></a>成分选择</h4><p>向量中单独的成分可以通过{x,y,z,w},{r,g,b,a}或者{s,t,p,q}的记法来表示。这些不同的记法用于顶点，颜色，纹理坐标。在成分选择中，你不可以混合使用这些记法。其中{s,t,p,q}中的p替换了纹理的r坐标，因为与颜色r重复了。下面是用法举例：</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">vec3</span> myVec <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.35</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">float</span> r <span class="token operator">=</span> myVec<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token keyword">float</span> myYz <span class="token operator">=</span> myVec<span class="token punctuation">.</span>yz<span class="token punctuation">;</span><span class="token keyword">float</span> myQ <span class="token operator">=</span> myVec<span class="token punctuation">.</span>q<span class="token punctuation">;</span><span class="token comment">//出错，数组越界访问，q代表第四个元素</span><span class="token keyword">float</span> myRY <span class="token operator">=</span> myVec<span class="token punctuation">.</span>ry<span class="token punctuation">;</span> <span class="token comment">//不合法，混合使用记法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>较特殊的使用方式，你可以重复向量中的元素，或者颠倒其顺序。如：</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"> <span class="token comment">//调换顺序</span><span class="token keyword">vec3</span> yxz <span class="token operator">=</span> myVec<span class="token punctuation">.</span>yxz<span class="token punctuation">;</span> <span class="token comment">//重复其中的值</span><span class="token keyword">vec4</span> mySSTT <span class="token operator">=</span> myVec<span class="token punctuation">.</span>sstt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在赋值是，也可以选择你想要的顺序，但是不能重复其中的成分。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">vec4</span> myColor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>myColor<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">;</span>myColor<span class="token punctuation">.</span>yz <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myColor<span class="token punctuation">.</span>wx <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myColor<span class="token punctuation">.</span>zz <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不合法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以通过使用下标来访问向量或矩阵中的元素。如果越界那行为将是未定义的。</p><p>float myY = myVec[1];</p><p>在矩阵中，可以通过一维的下标来获得该列的向量(OpenGL的矩阵是列主顺序的)。二维的小标来获得向量中的元素。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">mat3</span> myMat <span class="token operator">=</span> <span class="token keyword">mat3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">vec3</span> myVec <span class="token operator">=</span> myMat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//获得第一列向量    1.0, 0.0, 0.0</span><span class="token keyword">float</span> f <span class="token operator">=</span> myMat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 第一列的第一个向量。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="1-循环"><a href="#1-循环" class="headerlink" title="1.循环"></a>1.循环</h4><p>与C和C++相似，GLSL语言也提供了for, while, do/while的循环方式。使用continue跳入下一次循环，break结束循环。</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">//for循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> NUMCount<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ary<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    a<span class="token operator">+=</span> ary<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//while</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    sum <span class="token operator">+=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//do while</span><span class="token keyword">do</span><span class="token punctuation">{</span>    color <span class="token operator">+=</span> light<span class="token punctuation">[</span>lightNum<span class="token punctuation">]</span><span class="token punctuation">;</span>    lightNum<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>lightNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if-else控制语句"><a href="#if-else控制语句" class="headerlink" title="if/else控制语句"></a>if/else控制语句</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    a<span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h4><p>片段着色器中有一种特殊的控制流成为discard。使用discard会退出片段着色器，不执行后面的片段着色操作。片段也不会写入帧缓冲区。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">if <span class="token punctuation">(</span>color.a &lt; 0.9<span class="token punctuation">)</span> discard<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>在每个shader中必须有一个main函数。main函数中的void参数是可选的，但返回值是void时必须的。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>GLSL中的函数，必须是在全局范围定义和声明的。不能在函数定义中声明或定义函数。函数必须有返回类型，参数是可选的。参数的修饰符(in, out, inout, const等）是可选的。</strong></p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">//函数声明</span><span class="token keyword">bool</span> <span class="token function">isAnyNegative</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">vec4</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数调用void main(void)</span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> isNegative <span class="token operator">=</span> <span class="token function">isAnyNegative</span><span class="token punctuation">(</span>gl_Color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//定义</span><span class="token keyword">bool</span> <span class="token function">isAnyNegative</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">vec4</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0.0</span> <span class="token operator">||</span> v<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">0.0</span> <span class="token operator">||</span> v<span class="token punctuation">.</span>z <span class="token operator">&lt;</span> <span class="token number">0.0</span> <span class="token operator">||</span> v<span class="token punctuation">.</span>w <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体和数组也可以作为函数的参数。如果是数组作为函数的参数，则必须制定其大小。在调用传参时，只传数组名就可以了。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">vec4</span> <span class="token function">sumVectors</span><span class="token punctuation">(</span><span class="token keyword">int</span> sumSize<span class="token punctuation">,</span> <span class="token keyword">vec4</span> v<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">vec4</span> myColors<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">vec4</span> sumColor <span class="token operator">=</span> <span class="token function">sumVectors</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> myColors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">vec4</span> <span class="token function">sumVectors</span><span class="token punctuation">(</span><span class="token keyword">int</span> sumSize<span class="token punctuation">,</span> <span class="token keyword">vec4</span> v<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">vec4</span> sum <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sumSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GLSL的函数是支持重载的。函数可以同名但其参数类型或者参数个数不同即可。</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">float</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">vec3</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">vec3</span> v1<span class="token punctuation">,</span> <span class="token keyword">vec3</span> v2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th>优先级(越小越高)</th><th>运算符</th><th>说明</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>()</td><td>聚组:a*(b+c)</td><td>N/A</td></tr><tr><td>2</td><td>[] () . ++ –</td><td>数组下标__[],方法参数__fun(arg1,arg2,arg3),属性访问<strong>a.b</strong>,自增/减后缀<strong>a++ a–</strong></td><td>L - R</td></tr><tr><td>3</td><td>++ – + - !</td><td>自增/减前缀**++a –a**,正负号(一般正号不写)a ,-a,取反**!false**</td><td>R - L</td></tr><tr><td>4</td><td>* /</td><td>乘除数学运算</td><td>L - R</td></tr><tr><td>5</td><td>+ -</td><td>加减数学运算</td><td>L - R</td></tr><tr><td>7</td><td>&lt; &gt; &lt;= &gt;=</td><td>关系运算符</td><td>L - R</td></tr><tr><td>8</td><td>== !=</td><td>相等性运算符</td><td>L - R</td></tr><tr><td>12</td><td>&amp;&amp;</td><td>逻辑与</td><td>L - R</td></tr><tr><td>13</td><td>^^</td><td>逻辑排他或(用处基本等于!=)</td><td>L - R</td></tr><tr><td>14</td><td>II</td><td>逻辑或</td><td>L - R</td></tr><tr><td>15</td><td><strong>? :</strong></td><td>三目运算符</td><td>L - R</td></tr><tr><td>16</td><td>= += -= *= /=</td><td>赋值与复合赋值</td><td>L - R</td></tr><tr><td>17</td><td>,</td><td>顺序分配运算</td><td>L - R</td></tr></tbody></table><p>ps 左值与右值:</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">左值:表示一个储存位置,可以是变量,也可以是表达式,但表达式最后的结果必须是一个储存位置.右值:表示一个值, 可以是一个变量或者表达式再或者纯粹的值.操作符的优先级：决定含有多个操作符的表达式的求值顺序，每个操作的优先级不同.操作符的结合性：决定相同优先级的操作符是从左到右计算，还是从右到左计算。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基础类型间的运算"><a href="#基础类型间的运算" class="headerlink" title="基础类型间的运算:"></a>基础类型间的运算:</h3><p>glsl中,没有隐式类型转换,原则上glsl要求任何表达式左右两侧(l-value),(r-value)的类型必须一致 也就是说以下表达式都是错误的:</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">;</span> <span class="token comment">//错误,r-value为float 而 lvalue 为int.</span><span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">float</span> a <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">float</span> a <span class="token operator">=</span><span class="token number">2.0</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">bool</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">vec3</span> a <span class="token operator">=</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>GLSL中函数递归是不被允许的。其行为是未定义的。</strong></p><p>引用：<a href="https://www.jianshu.com/p/66b10062bd67">https://www.jianshu.com/p/66b10062bd67</a></p><h1 id="HLSL的基础语法"><a href="#HLSL的基础语法" class="headerlink" title="HLSL的基础语法"></a>HLSL的基础语法</h1><p>官网文档</p><p><a href="https://docs.microsoft.com/en-my/windows/win32/direct3dhlsl/dx-graphics-hlsl?redirectedfrom=MSDN">https://docs.microsoft.com/en-my/windows/win32/direct3dhlsl/dx-graphics-hlsl?redirectedfrom=MSDN</a></p><p><a href="https://en.wikipedia.org/wiki/High-Level_Shading_Language">HLSL</a>(High-Level Shading Language，<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E7%9D%80%E8%89%B2%E5%99%A8%E8%AF%AD%E8%A8%80">高级着色语言</a>) 是由微软开发的一种着色器语言，D3D9及以上版本使用其作为着色语言（注：D3D8的shader使用是类似于汇编的语言来编写），拥有如下特点：</p><ol><li>基于C语言的语法（如：大小写敏感，每条语句必须以分号结尾），是一门面向过程的强类型语言（type sensitive language）</li><li>除了bool、int、uint、half、float、double基础类型外，还支持数组类型，另外HLSL还内置了适合3D图形操作的向量与矩阵类型，以及采样器（纹理）类型  </li><li>基础类型的隐式转换规则与C语言一致</li><li>变量没有赋初值时，都会被填充为false、0或0.0</li><li>if条件语句和switch条件语句与C语言一致 </li><li>for循环语句和while循环语句与C语言一致</li><li>return、continue和break与C语言一致。另外引入了discard，该关键字只能在ps中使用，表示放弃当前像素，直接处理下一个像素。</li><li>无指针、无字符和字符串类型</li><li>无union、无enum</li><li>向量、矩阵可通过构造函数进行初始化</li></ol><p><strong>通用着色器的核心</strong></p><p>所有的可编程着色器阶段使用通用着色器核心来实现相同的基础功能。此外，顶点着色阶段、几何着色阶段和像素着色阶段则提供了独特的功能。</p><p>例如几何着色阶段可以生成新的图元或删减图元，像素着色阶段可以决定当前像素是否被抛弃等。</p><p>下图展示了数据是怎么流向一个着色阶段，以及通用着色器核心与着色器内存资源之间的关系：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/l" alt="img"> </p><p><strong>Input Data</strong>：顶点着色器从输入装配阶段获取数据；几何着色器则从上一个着色阶段的输出获取等等。通过给形参引入可以使用的系统值可以提供额外的输入</p><p><strong>Output Data</strong>：着色器生成输出的结果然后传递给管线的下一个阶段。有些输出会被通用着色器核心解释成特定用途（如顶点位置、渲染目标对应位置的值），另外一些输出则由应用程序来解释。</p><p><strong>Shader Code</strong>：着色器代码可以从内存读取，然后用于执行代码中所期望的内容。</p><p><strong>Samplers</strong>：采样器决定了如何对纹理进行采样和滤波。</p><p><strong>Textures</strong>：纹理可以使用采样器进行采样，也可以基于索引的方式按像素读取。</p><p><strong>Buffers</strong>：缓冲区可以使用读取相关的内置函数，在内存中按元素直接读取。</p><p><strong>Constant Buffers</strong>：常量缓冲区对常量值的读取有所优化。他们被设计用于CPU对这些数据的频繁更新，因此他们有额外的大小、布局和访问限制。</p><p><strong>注释</strong></p><p>单行注释</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Hello HLSL.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多行注释</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/********************************* This is my first HLSL. Let's take a look.*********************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>预处理</strong></p><p>#if #elif [defined(), !defined()]  #else  #ifdef  #ifndef   #endif  // 条件编译</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST1</span>  <span class="token comment">// 定义为空的宏</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TEST1  </span><span class="token comment">// 条件成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST1</span> <span class="token expression"><span class="token number">1</span> </span><span class="token comment">// 定义TEST1宏为1  注：可以不用先undef TEST1宏 但会报warning X1519: 'TEST1' : macro redefinition</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">TEST1  </span><span class="token comment">// 取消TEST1宏</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">TEST1  </span><span class="token comment">// 条件不成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">TEST1  </span><span class="token comment">// 条件成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST1</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span>  </span><span class="token comment">// 定义为int的宏</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST2</span> <span class="token comment">// 定义为空的宏</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">TEST1 <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>TEST2<span class="token punctuation">)</span> </span><span class="token comment">// 条件成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST3</span> <span class="token expression"><span class="token boolean">true</span> </span><span class="token comment">// 定义为bool的宏</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">TEST3  </span><span class="token comment">// 条件不成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>TEST3  </span><span class="token comment">// 条件成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">TEST3<span class="token operator">==</span><span class="token boolean">true</span>  </span><span class="token comment">// 条件成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>TEST0<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> TEST1 <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>TEST2<span class="token punctuation">)</span> </span><span class="token comment">// 条件成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST4</span> <span class="token expression"><span class="token number">100</span>  </span><span class="token comment">// 定义为int的宏</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">TEST4  </span><span class="token comment">// 条件成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">TEST4 <span class="token operator">&gt;</span> <span class="token number">150</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token punctuation">(</span>TEST4 <span class="token operator">&gt;</span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token operator">||</span> TEST1 </span><span class="token comment">// 进入elif分支</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">TEST4 <span class="token operator">&gt;</span> <span class="token number">160</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">// 进入else分支</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XX2</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>TEST4</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token punctuation">(</span>TEST4 <span class="token operator">&gt;</span> <span class="token number">110</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">// 进入else分支</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST5</span> <span class="token expression"><span class="token number">2.0</span>  </span><span class="token comment">// 定义为float的宏</span></span><span class="token comment">//#if TEST5  //float不能进行条件判断  编译失败</span><span class="token comment">//#endif</span><span class="token comment">//#if TEST5&gt;0.0  //float不能进行条件判断  编译失败</span><span class="token comment">//#endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#define  #undef   // 宏定义、宏取消</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST1</span> <span class="token expression"><span class="token number">100</span>  </span><span class="token comment">// 定义TEST1宏为100</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TEST1  </span><span class="token comment">// 条件成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">TEST1   </span><span class="token comment">// 取消TEST1宏的定义</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>TEST1<span class="token punctuation">)</span> </span><span class="token comment">// 条件成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SQUARE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">// 宏必须在一行写完，多行写时必须带上 \行连接符，但要注意\后不要有空格，否则会编译失败</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MERGE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> a</span><span class="token punctuation">##</span><span class="token expression">b </span><span class="token comment">// ## 字符拼接符</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#line  // 指示下一行的行号，及当前所在的文件；该命令会修改__FILE__、__LINE__的值</p><p>该命令是提供给编译器使用的，程序员最好不要使用该命令</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token constant">__LINE__</span><span class="token operator">==</span><span class="token number">10</span>  </span><span class="token comment">// 判断当前行号是否为10</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token constant">__FILE__</span><span class="token operator">==</span><span class="token number">0</span>  </span><span class="token comment">// 条件成立  __FILE__始终为0</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">line</span> <span class="token expression"><span class="token number">116</span> </span><span class="token comment">// 指定下一行的行号为116</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token constant">__LINE__</span><span class="token operator">==</span><span class="token number">116</span>  </span><span class="token comment">// 条件成立</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">line</span> <span class="token expression"><span class="token number">200</span> </span><span class="token string">"test.hlsl"</span>  <span class="token comment">// 指定下一行的行号为200，当前文件的ID标识为5</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token constant">__FILE__</span><span class="token operator">==</span><span class="token number">0</span>  </span><span class="token comment">// 条件成立   __FILE__始终为0</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">// test.hlsl(204,2): error: This is an error!</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token expression">This is an error<span class="token operator">!</span> </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#error // error命令被执行，会导致当前文件编译失败</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// E:\ModenD3D\HLSL-Development-Cookbook\book_sample\Chpater 1 - Forward Light\Ambient Light\ForwardLight.hlsl(40,2): error: This is an error! </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token expression">This is an error<span class="token operator">!</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>#pragma  // 用来控制编译器的一些行为</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span> disable <span class="token operator">:</span> <span class="token number">1519</span><span class="token punctuation">;</span> once <span class="token operator">:</span> <span class="token number">3205</span><span class="token punctuation">;</span> error <span class="token operator">:</span> <span class="token number">3206</span> <span class="token punctuation">)</span> </span><span class="token comment">// 忽略1519 warning，只报一次3205 warning，3206 warning视为error</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST1</span>  <span class="token comment">// 定义为空的宏</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST1</span> <span class="token expression"><span class="token number">1</span> </span><span class="token comment">// 定义TEST1宏为1  注：可以不用先undef TEST1宏 但会报warning X1519: 'TEST1' : macro redefinition</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">message</span><span class="token punctuation">(</span></span><span class="token string">"Hello HLSL."</span><span class="token expression"><span class="token punctuation">)</span> </span><span class="token comment">//Hello HLSL.</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack_matrix</span><span class="token punctuation">(</span> column_major <span class="token punctuation">)</span> </span><span class="token comment">// 将uniform参数的matrix设置成列主序（缺省）  注1：列主序生成的指令数更少，因此其效率比行主序的效率要高  注2：构造matrix时不受#pragma pack_matrix影响，始终为行主序</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack_matrix</span><span class="token punctuation">(</span> row_major <span class="token punctuation">)</span> </span><span class="token comment">// 将uniform参数的matrix设置成行主序</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token expression">This is an error<span class="token operator">!</span> </span><span class="token comment">// hlsl中出现error时，才会打印pragma message和warning信息</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注1：需要注意的是，hlsl中出现error时（#error或语法错误），才会打印pragma message和warning信息</p><p>注2：更多error、warning number说明，详见：<a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/hlsl-errors-and-warnings">https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/hlsl-errors-and-warnings</a></p><p>注3：在C++代码层中，DirectXMath数学库创建的矩阵都是行矩阵，但当矩阵从C++传递给HLSL时，HLSL默认是列矩阵的，因此传递前要进行了一次转置。如果希望不发生转置操作的话，可以添加修饰关键字row_major </p><p>#include // 引用其他hlsl文件 与c/c++语言用法一致</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"common.hlsl"</span> <span class="token comment">// 引用其他的hlsl文件</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>typedef</strong></p><p>用于类型的别名，用法与C语言一致</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> POINT<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">const</span> <span class="token keyword">float</span> CFLOAT<span class="token punctuation">;</span>POINT pt<span class="token punctuation">;</span>CFLOAT cf1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运算符</strong></p><p>除了没有指针相关的运算符外，其他的与c语言完全一致</p><p>注1：对于向量、矩阵类型，运算符会在各个分量上进行</p><p>注2：支持浮点数取模%</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 取模即求余数，结果为2</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">3.3</span> <span class="token operator">%</span> <span class="token number">1.6</span><span class="token punctuation">;</span> <span class="token comment">// 3.3-(int)(3.3/1.6)*1.6 = 3.3-2*1.6 = 0.1</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3.3</span> <span class="token operator">%</span> <span class="token number">1.6</span><span class="token punctuation">;</span> <span class="token comment">// -3.3-(int)(-3.3/1.6)*1.6 = -3.3-(-2*1.6) = -0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注3：二元运算中变量类型的提升规则：</p><p>​     ① 对于二元运算来说，如果运算符左右操作数的维度不同，那么维度较小的变量类型将会被隐式提升为维度较大的变量类型。但是这种提升仅限于标量到向量的提升，即x会变为(x, x, x)。但是不支持像float2到float3的提升。</p><p>​     ② 对于二元运算来说，如果运算符左右的操作数类型不同，那么低精度变量的类型将被隐式提升为高精度变量的类型，这点和C/C++是类似的。</p><p><strong>控制流</strong></p><p><strong>条件语句</strong></p><p>HLSL也支持<code>if</code>, <code>else</code>, <code>continue</code>, <code>break</code>, <code>switch</code>关键字，此外<code>discard</code>关键字用于像素着色阶段抛弃该像素。</p><p>条件的判断使用一个布尔值进行，通常由各种逻辑运算符或者比较运算符操作得到。注意向量之间的比较或者逻辑操作是得到一个存有布尔值的向量，不能够直接用于条件判断，也不能用于<code>switch</code>语句。</p><h2 id="判断与动态分支"><a href="#判断与动态分支" class="headerlink" title="判断与动态分支"></a>判断与动态分支</h2><p>基于值的条件分支只有在程序执行的时候被编译好的着色器汇编成两种方式：**判断(predication)<strong>和</strong>动态分支(dynamic branching)**。</p><p>如果使用的是判断的形式，编译器会提前计算两个不同分支下表达式的值。然后使用比较指令来基于比较结果来”选择”正确的值。</p><p>而动态分支使用的是跳转指令来避免一些非必要的计算和内存访问。</p><p>着色器程序在同时执行的时候应当选择相同的分支，以防止硬件在分支的两边执行。通常情况下，硬件会同时将一系列连续的顶点数据传入到顶点着色器并行计算，或者是一系列连续的像素单元传入到像素着色器同时运算等。</p><p>动态分支会由于执行分支指令所带来的开销而导致一定的性能损失，因此要权衡动态分支的开销和可以跳过的指令数目。</p><p>通常情况下编译器会自行选择使用判断还是动态分支，但我们可以通过重写某些属性来修改编译器的行为。我们可以在条件语句前可以选择添加下面两个属性之一：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[branch]</td><td align="left">缺省。根据条件值的结果，只计算其中一边的内容，会产生跳转指令。</td></tr><tr><td align="left">[flatten]</td><td align="left">两边的分支内容都会计算，然后根据条件值选择其中一边。可以避免跳转指令的产生。</td></tr></tbody></table><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span>flatten<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    x <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>循环语句</strong></p><p>HLSL也支持<code>for</code>, <code>while</code>和<code>do while</code>循环。和条件语句一样，它可能也会在基于运行时的条件值判断而产生动态分支，从而影响程序性能。用法如下：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[loop]</td><td align="left">缺省。默认不加属性的循环语句为loop型。</td></tr><tr><td align="left">[unroll]</td><td align="left">如果循环次数较小，我们可以使用属性<code>[unroll]</code>来展开循环，代价是产生更多的汇编指令。</td></tr></tbody></table><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">times <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> times<span class="token punctuation">;</span><span class="token punctuation">[</span>unroll<span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token punctuation">(</span>times<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sum <span class="token operator">+=</span> times<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>寄存器（register）</strong></p><p>用于在C++与HLSL之间传递数据，包括如下4种：</p><table><thead><tr><th><strong>寄存器</strong></th><th><strong>说明</strong></th><th><strong>上限</strong></th></tr></thead><tbody><tr><td>b</td><td>常量缓冲区视图 (CBV)，用于从C++传递只读数据给HLSL</td><td>15个常量缓冲区（共16个，系统内部保留1个）</td></tr><tr><td>t</td><td>着色器资源视图 (SRV)，用于从C++传递只读内存块或纹理数据给HLSL</td><td>128个</td></tr><tr><td>u</td><td>无序访问视图 (UAV)，用于可读写数据的传递</td><td></td></tr><tr><td>s</td><td>用于从C++传递采样器设置给HLSL</td><td>128个</td></tr></tbody></table><p>参见：<a href="https://docs.microsoft.com/en-us/windows/win32/direct3d12/resource-binding-in-hlsl">Resource binding in HLSL</a>（<a href="https://docs.microsoft.com/zh-cn/windows/win32/direct3d12/resource-binding-in-hlsl">HLSL 中的资源绑定</a>） </p><p><strong>变量</strong></p><p>变量名需要符合以下规则：</p><p>① 只能包括大小写字母、数字和下划线</p><p>② 变量名不能以数字开头</p><p>③ 不能是关键字或预留的关键字</p><p>全局变量：定义在函数体外的变量。作用域规则与c语言全局变量一致。</p><p>局部变量：定义在函数内的变量。作用域规则与c语言局部变量一致。</p><p>const变量</p><p>该变量为一常量，需要被初始化，在运行时不能被修改，与c/c++用法一致</p><p>static变量</p><p>进一步可分为static局部变量和static全局变量，与c/c++用法一致</p><p>static局部变量需要在HLSL中自己初始化，否则使用默认初始化，初始化操作仅执行一次（首次被访问时）</p><p>只在着色器内部可见</p><p>extern变量</p><p>在全局变量上可用，非静态的全局变量默认是extern类型</p><p>可在着色器外被访问，比如被C++应用程序</p><p>uniform变量</p><p>在D3D代码中初始化，然后再作为输入传给着色器</p><p>允许在C++应用层中修改，但在着色器执行的过程中，其值始终保持不变（运行前可变，运行时不变）。着色器程序中的全局变量默认为既uniform又extern</p><p>volatile变量</p><p>在全局变量上可用，提示效果框架该变量经常被修改</p><p>shared变量</p><p>在全局变量上可用，提示效果框架该变量可在多个效果之间共享</p><p>nointerpolation – 修饰的变量，在将顶点着色器的输出传递到像素着色器之前，请勿对其进行插值</p><p>groupshared – 将一个变量标记为用于计算着色器的线程组共享内存</p><p>precise – 用于保证该变量在计算时，是严格精确的</p><p>row_major – 标记一个可在单个行中存储4个成分的变量，以便可以将它们存储在单个常量寄存器中</p><p>column_major – 标记一个可在单个列中存储4个成分的变量，以优化矩阵数学 （缺省）</p><h2 id="语义"><a href="#语义" class="headerlink" title="语义"></a><strong>语义</strong></h2><p><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-semantics">语义</a>通常是附加在着色器输入/输出参数上的字符串。它在着色器程序的用途如下：</p><ol><li>用于描述传递给着色器程序的变量参数的含义</li><li>允许着色器程序接受由渲染管线生成的特殊系统值</li><li>允许着色器程序传递由渲染管线解释的特殊系统值</li></ol><h3 id="vs语义"><a href="#vs语义" class="headerlink" title="vs语义"></a>vs语义</h3><table><thead><tr><th align="left">语义</th><th align="left">描述</th><th align="left">是否可作为输入关联</th><th align="left">是否可作为输出关联</th><th align="left">类型</th></tr></thead><tbody><tr><td align="left">BINORMAL[n]</td><td align="left">副法线（副切线）向量</td><td align="left">Yes</td><td align="left"></td><td align="left">float4</td></tr><tr><td align="left">BLENDINDICES[n]</td><td align="left">混合索引</td><td align="left">Yes</td><td align="left"></td><td align="left">uint</td></tr><tr><td align="left">BLENDWEIGHT[n]</td><td align="left">混合权重</td><td align="left">Yes</td><td align="left"></td><td align="left">float</td></tr><tr><td align="left">COLOR[n]</td><td align="left">漫反射/镜面反射颜色</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">float4</td></tr><tr><td align="left">NORMAL[n]</td><td align="left">法向量</td><td align="left">Yes</td><td align="left"></td><td align="left">float4</td></tr><tr><td align="left">POSITION[n]</td><td align="left">物体坐标系下的顶点坐标</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">float4</td></tr><tr><td align="left">PSIZE[n]</td><td align="left">点的大小</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">float</td></tr><tr><td align="left">TANGENT[n]</td><td align="left">切线向量</td><td align="left">Yes</td><td align="left"></td><td align="left">float4</td></tr><tr><td align="left">TEXCOORD[n]</td><td align="left">纹理坐标</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">float4</td></tr><tr><td align="left">FOG</td><td align="left">顶点雾</td><td align="left"></td><td align="left">Yes</td><td align="left">float</td></tr></tbody></table><p>注1：n是一个可选的整数，从0开始。比如POSITION0, TEXCOORD1等等。 注2：vs的输出关联将其运算得到的结果经过光栅化插值后链接到ps的输入关联上.</p><h3 id="ps语义"><a href="#ps语义" class="headerlink" title="ps语义"></a><strong>ps语义</strong></h3><table><thead><tr><th align="left">语义</th><th align="left">描述</th><th align="left">是否可作为输入关联</th><th align="left">是否可作为输出关联</th><th align="left">类型</th></tr></thead><tbody><tr><td align="left">COLOR[n]</td><td align="left">漫反射/镜面反射颜色</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">float4</td></tr><tr><td align="left">TEXCOORD[n]</td><td align="left">纹理坐标</td><td align="left">Yes</td><td align="left"></td><td align="left">float4</td></tr><tr><td align="left">VFACE</td><td align="left">负数表示为背面正数表示为正面</td><td align="left">Yes</td><td align="left"></td><td align="left">float</td></tr><tr><td align="left">VPOS</td><td align="left">像素所在坐标</td><td align="left">Yes</td><td align="left"></td><td align="left">float2</td></tr><tr><td align="left">DEPTH[n]</td><td align="left">深度值</td><td align="left"></td><td align="left">Yes</td><td align="left">float</td></tr></tbody></table><p>注： ps输出关联将其输出颜色绑定给正确的RT上（渲染目标）。其中颜色输出被连接到alpha混合阶段，DEPTH输出关联用于改变当前光栅化位置的目标深度值</p><h2 id="系统值语义"><a href="#系统值语义" class="headerlink" title="系统值语义"></a><strong>系统值语义</strong></h2><p>所有的系统值都包含前缀<code>SV_</code>，后面的部分大小写不敏感，例如：SV_Positon和SV_POSITION是一样的。这些系统值将用于某些着色器的特定用途。</p><table><thead><tr><th align="left">系统值</th><th align="left">描述</th><th align="left">类型</th></tr></thead><tbody><tr><td align="left">SV_Depth</td><td align="left">深度缓冲区数据，可以被任何着色器写入/读取</td><td align="left">float</td></tr><tr><td align="left">SV_InstanceID</td><td align="left">每个实例都会在运行期间自动生成一个ID。在任何着色器阶段都能读取</td><td align="left">uint</td></tr><tr><td align="left">SV_IsFrontFace</td><td align="left">指定该三角形是否为正面。可以被几何着色器写入，以及可以被像素着色器读取</td><td align="left">bool</td></tr><tr><td align="left">SV_Position</td><td align="left">若被声明用于输入到着色器，它描述的是像素位置，在所有着色器中都可用，可能会有0.5的偏移值</td><td align="left">float4</td></tr><tr><td align="left">SV_PrimitiveID</td><td align="left">每个原始拓扑都会在运行期间自动生成一个ID。可用在几何/像素着色器中写入，也可以在像素/几何/外壳/域着色器中读取</td><td align="left">uint</td></tr><tr><td align="left">SV_StencilRef</td><td align="left">代表当前像素着色器的模板引用值。只可以被像素着色器写入</td><td align="left">uint</td></tr><tr><td align="left">SV_VertexID</td><td align="left">每个实例都会在运行期间自动生成一个ID。仅允许作为顶点着色器的输入</td><td align="left">uint</td></tr><tr><td align="left">SV_TARGET</td><td align="left">SV_TARGET即Color缓存区（帧缓存，FrameBuffer）</td><td align="left"></td></tr><tr><td align="left">SV_TARGET[n] 0 &lt;= n &lt;= 7</td><td align="left">MRT有多个RenderTarget输出</td><td align="left"></td></tr><tr><td align="left">SV_ClipDistance0</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">SV_RenderTargetArrayIndex</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">SV_TessFactor</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">SV_InsideTessFactor</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">SV_DomainLocation</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">SV_GroupID</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">SV_GroupIndex</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">SV_GroupThreadID</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">SV_DispatchThreadID</td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="着色器常量"><a href="#着色器常量" class="headerlink" title="着色器常量"></a><strong>着色器常量</strong></h2><p><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-constants">着色器常量</a>存在内存中的一个或多个缓冲区资源当中。他们可以被组织成两种类型的缓冲区：常量缓冲区（cbuffers）和纹理缓冲区（tbuffers）。</p><h2 id="常量缓冲区-Constant-Buffer"><a href="#常量缓冲区-Constant-Buffer" class="headerlink" title="常量缓冲区(Constant Buffer)"></a><strong>常量缓冲区(Constant Buffer)</strong></h2><p>常量缓冲区允许C++端将数据传递给HLSL中使用，在HLSL中，这些传递过来的数据不可更改，因而是常量。常量缓冲区对这种使用方式有所优化，表现为低延迟的访问和允许来自CPU的频繁更新，因此他们有额外的大小、布局和访问限制。</p><p>① 每个着色器阶段最多允许15个常量缓冲区（共16个，系统内部保留1个），并且每个缓冲区最多可以容纳4096个标量（每个vector最多包含4个float类型）。HLSL的cbuffer需要指定register(b#), #的范围为0到14</p><p>② 在C++创建常量缓冲区时大小必须为16字节的倍数，因为HLSL的常量缓冲区本身以及对它的读写操作需要严格按16字节对齐</p><p>③ 对常量缓冲区的成员使用packoffset修饰符可以指定起始向量和分量位置</p><p>④ 在更新常量缓冲区时由于数据是提交完整的字节流数据到GPU，会导致HLSL中cbuffer的所有成员都被更新。为了减少不必要的更新，可以根据这些参数的更新频率划分出多个常量缓冲区以节省带宽资源</p><p>⑤ 一个着色器在使用了多个常量缓冲区的情况下，这些常量缓冲区相互间都不能出现同名成员</p><p>⑥ 单个常量缓冲区可以同时绑定到不同的可编程着色器阶段，因为这些缓冲区都是只读的，不会导致内存访问冲突。</p><p>   一个包含常量缓冲区的*.hlsli文件同时被多个着色器文件引用，只是说明这些着色器使用相同的常量缓冲区布局，如果该缓冲区需要在多个着色器阶段使用，你还需要在C++同时将相同的常量缓冲区绑定到各个着色器阶段上</p><p>当我们在HLSL中声明常量缓冲区时，还<strong>需要在HLSL的声明中使用关键字<code>register</code>手动指定对应的寄存器索引</strong>，然后编译器会为对应的着色器阶段自动将其映射到15个常量缓冲寄存器的其中一个位置。这些寄存器的名字为<code>b0</code>到<code>b14</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/****************************** C++ ******************************/</span><span class="token keyword">struct</span> <span class="token class-name">VS_CONSTANT_BUFFER</span><span class="token punctuation">{</span>    D3DXMATRIX mWorldViewProj<span class="token punctuation">;</span>    D3DXVECTOR4 vSomeVectorThatMayBeNeededByASpecificShader<span class="token punctuation">;</span>    <span class="token keyword">float</span> fSomeFloatThatMayBeNeededByASpecificShader<span class="token punctuation">;</span>        <span class="token keyword">float</span> fTime<span class="token punctuation">;</span>    <span class="token keyword">float</span> fSomeFloatThatMayBeNeededByASpecificShader2<span class="token punctuation">;</span>    <span class="token keyword">float</span> fSomeFloatThatMayBeNeededByASpecificShader3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/***************************** HLSL *****************************/</span><span class="token comment">// 在cb0中，第一个 mWorldViewProj : packoffset(c0)表示将会在这个cbuffer中的c0位置开始存储 mWorldViewProj,共使用c0,c1,c2,c3</span><span class="token comment">// 由于D3DXVECTOR4 vSomeVectorThatMayBeNeededByASpecificShader占据了c4，float fSomeFloatThatMayBeNeededByASpecificShader占据了c5.x，所以float fTime就是c5.y了</span><span class="token comment">// 在C++代码层中，D3DXMATRIX矩阵是行矩阵，但当矩阵从C++传递给HLSL时，HLSL默认是列矩阵的，因此传递前要进行了一次转置。如果希望不发生转置操作的话，则需要添加修饰关键字row_major </span>cbuffer cb0<span class="token punctuation">{</span>    row_major float4x4 mWorldViewProj <span class="token operator">:</span> <span class="token function">packoffset</span><span class="token punctuation">(</span>c0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> fTime <span class="token operator">:</span> <span class="token function">packoffset</span><span class="token punctuation">(</span>c5<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注1：常量缓冲区（constant buffer views，CBV）用b寄存器来传递 </p><p>注2：packoffset(c0)表示起始位置为c0，其中c为一个float4的向量(x,y,z,w)</p><p>在C++端是通过ID3D11DeviceContext::VSSetConstantBuffers、ID3D11DeviceContext::PSSetConstantBuffers指定特定的槽(slot)来给某一着色器阶段对应的寄存器索引提供常量缓冲区的数据。</p><p>如果是存在多个不同的着色器阶段使用同一个常量缓冲区，那就需要分别给这两个着色器阶段设置好相同的数据。</p><p>综合前面几节内容，下面演示了顶点着色器和常量缓冲区的用法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cbuffer ConstantBuffer <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span><span class="token punctuation">{</span>    float4x4 g_WorldViewProj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">VS_Main</span><span class="token punctuation">(</span>    in float4 inPos <span class="token operator">:</span> POSITION<span class="token punctuation">,</span>         <span class="token comment">// 绑定变量到输入装配器</span>    in uint VID <span class="token operator">:</span> SV_VertexID<span class="token punctuation">,</span>          <span class="token comment">// 绑定变量到系统生成值</span>    out float4 outPos <span class="token operator">:</span> SV_Position<span class="token punctuation">)</span>    <span class="token comment">// 告诉管线将该值解释为输出的顶点位置</span><span class="token punctuation">{</span>    outPos <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>inPos<span class="token punctuation">,</span> g_WorldViewProj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码也可以写成：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cbuffer ConstantBuffer <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span><span class="token punctuation">{</span>    float4x4 g_WorldViewProj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">VertexIn</span><span class="token punctuation">{</span>    float4 inPos <span class="token operator">:</span> POSITION<span class="token punctuation">;</span>    <span class="token comment">// 源自输入装配器</span>    uint VID <span class="token operator">:</span> SV_VertexID<span class="token punctuation">;</span>        <span class="token comment">// 源自系统生成值</span><span class="token punctuation">}</span><span class="token punctuation">;</span>float4 <span class="token function">VS_Main</span><span class="token punctuation">(</span>VertexIn vIn<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Position<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">mul</span><span class="token punctuation">(</span>vIn<span class="token punctuation">.</span>inPos<span class="token punctuation">,</span> g_WorldViewProj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>纹理缓冲区（Texture Buffer）</strong></p><p>纹理缓冲区（tbuffer）并不是用来存储纹理的，而是指可以像纹理那样来访问其中的数据，对于索引类数据有更好的性能。这些数据也是只读的。vs、ps阶段分别最多可以绑定128个tbuffer。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">tbuffer mytb <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> weight<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 可以从CPU更新，只读</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>有类型的缓冲区(Typed Buffer)</strong></p><p>这是一种创建和使用起来最简单的缓冲区，其数据可以在HLSL被解释成基本HLSL类型的数组形式。</p><p><strong>Buffer（只读的缓冲区类型）</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Buffer<span class="token operator">&lt;</span>float4<span class="token operator">&gt;</span> g_Buffer <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>RWBuffer（可读写的缓冲区类型）</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">RWBuffer<span class="token operator">&lt;</span>float4<span class="token operator">&gt;</span> g_RWBuffer <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>u0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>结构化缓冲区（Struct Buffer）</strong></p><p>StructuredBuffer（只读的结构化缓冲区）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">TBokeh</span><span class="token punctuation">{</span>    float2 Pos<span class="token punctuation">;</span>    <span class="token keyword">float</span> Radius<span class="token punctuation">;</span>    float4 Color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>StructuredBuffer<span class="token operator">&lt;</span>TBokeh<span class="token operator">&gt;</span> Bokeh <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span> t0 <span class="token punctuation">)</span><span class="token punctuation">;</span>StructuredBuffer<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span> AvgLum <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span> t1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RWStructuredBuffer（可读写的结构化缓冲区）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Single raindrop structure</span><span class="token keyword">struct</span> <span class="token class-name">RainDrop</span><span class="token punctuation">{</span>    float3 Pos<span class="token punctuation">;</span>    float3 Vel<span class="token punctuation">;</span>    <span class="token keyword">float</span> State<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// Raindrop buffer</span>RWStructuredBuffer<span class="token operator">&lt;</span>RainDrop<span class="token operator">&gt;</span> RainData <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span> u0 <span class="token punctuation">)</span><span class="token punctuation">;</span>RWStructuredBuffer<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span> AverageLum <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span> u1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>追加/消耗缓冲区(Append/Consume Buffer)</strong></p><p>追加缓冲区和消耗缓冲区类型实际上是结构化缓冲区的特殊变体资源。因为涉及到修改操作，它们只能使用乱序访问视图（unordered access view，UAV）来绑定，用u寄存器来传递。</p><p>如果你只是希望这些结构体数据经过着色器变换并且不需要考虑最终的输出顺序要一致，那么使用这两个缓冲区是一种不错的选择。</p><p>AppendStructuredBuffer</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">TBokeh</span><span class="token punctuation">{</span>    float2 Pos<span class="token punctuation">;</span>    <span class="token keyword">float</span> Radius<span class="token punctuation">;</span>    float4 Color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>AppendStructuredBuffer<span class="token operator">&lt;</span>TBokeh<span class="token operator">&gt;</span> BokehStack <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span> u0 <span class="token punctuation">)</span><span class="token punctuation">;</span>AppendStructuredBuffer<span class="token operator">&lt;</span>float3<span class="token operator">&gt;</span> g_VertexOut <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ConsumeStructuredBuffer</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ConsumeStructuredBuffer<span class="token operator">&lt;</span>float3<span class="token operator">&gt;</span> g_VertexIn <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>u0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>字节地址缓冲区(Byte Address Buffer)</strong></p><p>字节地址缓冲区为HLSL程序提供了一种更为原始的内存块，程序员自己负责解析内存块的内容</p><p>ByteAddressBuffer（只读的字节地址缓冲区）</p><p>使用着色器资源视图（shader resource views，SRV）来绑定，用t寄存器来传递</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ByteAddressBuffer g_ByteAddressBuffer <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>RWByteAddressBuffer（可读写的结构化缓冲区）</p><p>不仅支持写入，还支持原子操作。使用乱序访问视图（unordered access view，UAV）来绑定，用u寄存器来传递。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">RWByteAddressBuffer g_RWByteAddressBuffer <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>u0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>基础类型</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 布尔型</span><span class="token keyword">bool</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">bool</span> b2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// b2=true</span><span class="token comment">// 32位有符号整型</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n4 <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span> <span class="token comment">// 取整数部分  n4=0</span><span class="token keyword">int</span> n5 <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span> <span class="token comment">// n5=3</span><span class="token keyword">int</span> n6 <span class="token operator">=</span> <span class="token number">0x14</span><span class="token punctuation">;</span> <span class="token comment">// 16进制 n6=20</span><span class="token keyword">int</span> n7 <span class="token operator">=</span> <span class="token number">027</span><span class="token punctuation">;</span> <span class="token comment">// 8进制 n7=23</span><span class="token keyword">int</span> n8 <span class="token operator">=</span> b1<span class="token punctuation">;</span> <span class="token comment">// n8=1</span><span class="token comment">// 32位无符号整型</span>uint u1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>uint u2 <span class="token operator">=</span> <span class="token number">1u</span><span class="token punctuation">;</span>uint u3 <span class="token operator">=</span> <span class="token number">100L</span><span class="token punctuation">;</span>uint u4 <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">;</span><span class="token comment">// 取整数部分  u4=1</span>uint u5 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3.2</span><span class="token punctuation">;</span><span class="token comment">// 赋值为负数时  u5=0</span>uint u6 <span class="token operator">=</span> b1<span class="token punctuation">;</span><span class="token comment">// u6=1</span><span class="token comment">// dword类型与uint类型等价</span>dword dw1 <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>dword dw2 <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span><span class="token comment">// 取整数部分  dw2=0</span>dword dw3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.8f</span><span class="token punctuation">;</span><span class="token comment">// 赋值为负数时  dw3=0</span><span class="token comment">// 64位双精度浮点型</span><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">200UL</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> dw1<span class="token punctuation">;</span><span class="token keyword">double</span> d3 <span class="token operator">=</span> <span class="token number">20.8f</span><span class="token punctuation">;</span><span class="token keyword">double</span> d4 <span class="token operator">=</span> <span class="token number">320.5</span><span class="token punctuation">;</span><span class="token comment">// 32位单精度浮点型</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">250.6</span><span class="token punctuation">;</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> <span class="token number">130.0f</span><span class="token punctuation">;</span><span class="token keyword">float</span> f3 <span class="token operator">=</span> d3<span class="token punctuation">;</span><span class="token comment">// 16位单精度浮点型</span>half h1 <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>half h2 <span class="token operator">=</span> n6<span class="token punctuation">;</span> <span class="token comment">// h2=20</span>half h3 <span class="token operator">=</span> d4<span class="token punctuation">;</span> <span class="token comment">// h3=320.5</span>half h4 <span class="token operator">=</span> f2<span class="token punctuation">;</span> <span class="token comment">// h4=130.0f</span>half h5 <span class="token operator">=</span> f1 <span class="token operator">+</span> d1<span class="token punctuation">;</span> <span class="token comment">// h5=-50.6</span><span class="token comment">// 基础类型强制转换</span><span class="token keyword">bool</span> b3 <span class="token operator">=</span> <span class="token keyword">bool</span><span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b3=false  支持c类型的转换方式</span><span class="token keyword">int</span> n9 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// n9=-250  支持c类型的转换方式</span>uint u7 <span class="token operator">=</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>f1<span class="token punctuation">;</span> <span class="token comment">// u7=0</span>uint u8 <span class="token operator">=</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>d3<span class="token punctuation">;</span> <span class="token comment">// u8=20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：有些平台可能不支持int、half和double，这种情况下，这些类型将用float来模拟</p><p><strong>数组</strong></p><p>除了一维数组外，允许有多维数组</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> fa1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// fa1 = {0.0, 0.0, 0.0, 0.0, 0.0}</span><span class="token keyword">int</span> ia1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>uint ua1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>vector va1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.13</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>float1x2 ma1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结构体（struct）</strong></p><p>① 可从其他结构体上派生</p><p>② 与C语言结构体一样，不允许有构造函数和析构函数</p><p>③ 不能直接对2个结构体变量进行比较</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">base</span> <span class="token punctuation">{</span> <span class="token keyword">float</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">light</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">base</span> <span class="token comment">// 可从另外一个结构体上继承</span></span><span class="token punctuation">{</span>    vector color<span class="token punctuation">;</span>    float3 position<span class="token punctuation">;</span>    <span class="token comment">//light(){} // 与C语言一样，不允许有构造函数</span>    <span class="token comment">//~light(){} // 与C语言一样，不允许有析构函数</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        param <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>        color<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//base s1 = base(2.5); //编译错误 error X3037: constructors only defined for numeric base types</span><span class="token comment">//light s2 = light(2.1, vector(1.0, 1.0, 0.0, 1.0), float3(10.0, 10.0, 0.0));//编译错误 error X3037: constructors only defined for numeric base types</span>light s3<span class="token punctuation">,</span> s4<span class="token punctuation">;</span><span class="token comment">//if (s3 == s4) {}// 结构体不能直接比较  编译错误 error X3020 : type mismatch</span>s3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>向量</strong></p><p>向量的分量可以为：</p><p>① {x,y,z,w} ： 用来获取顶点坐标分量</p><p>② {r,g,b,a} ： 用来获取颜色分量</p><p>从向量中可以同时抽取多个分量，这个过程称作混合（swizzle，或重组、重排）。但要注意地是，以上两种不能相互混着使用，如：xyr、rgyz等</p><table><thead><tr><th><strong>分量类型</strong></th><th><strong>1维</strong></th><th><strong>2维</strong></th><th><strong>3维</strong></th><th><strong>4维</strong></th></tr></thead><tbody><tr><td>bool</td><td>bool1 // vector&lt;bool,1&gt;</td><td>bool2 // vector&lt;bool,2&gt;</td><td>bool3 // vector&lt;bool,3&gt;</td><td>bool4 // vector&lt;bool,4&gt;</td></tr><tr><td>int</td><td>int1 // vector&lt;int,1&gt;</td><td>int2 // vector&lt;int,2&gt;</td><td>int3 // vector&lt;int,3&gt;</td><td>int4 // vector&lt;int,4&gt;</td></tr><tr><td>uint</td><td>uint1 // vector&lt;uint,1&gt;</td><td>uint2 // vector&lt;uint,2&gt;</td><td>uint3 // vector&lt;uint,3&gt;</td><td>uint4 // vector&lt;uint,4&gt;</td></tr><tr><td>half</td><td>half1 // vector&lt;half,1&gt;</td><td>half2 // vector&lt;half,2&gt;</td><td>half3 // vector&lt;half,3&gt;</td><td>half4 // vector&lt;half,4&gt;</td></tr><tr><td>float</td><td>float1 // vector&lt;float,1&gt;</td><td>float2 // vector&lt;float,2&gt;</td><td>float3 // vector&lt;float,3&gt;</td><td>float4 // vector&lt;float,4&gt; 即vector</td></tr><tr><td>double</td><td>double1 // vector&lt;double,1&gt;</td><td>double2 // vector&lt;double,2&gt;</td><td>double3 // vector&lt;double,3&gt;</td><td>double4 // vector&lt;double,4&gt;</td></tr></tbody></table><p>注1：vector为一个4维向量，各元素的类型为float</p><p>注2：vector&lt;T, n&gt;为一个n维向量（n必须介于1~4之间），各元素的类型为T</p><p>注3：当N&gt;n时，可裁剪降维后自动隐式转换  N –&gt; n</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 向量 vector为4维float类型向量</span>vector v1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>vector v2<span class="token punctuation">;</span> <span class="token comment">// v2 = { 0.0, 0.0, 0.0, 0.0 }</span>v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token comment">// v2 = { 1.0, 0.0, 0.0, 0.0 }</span>v2<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token comment">// v2 = { 1.0, 0.0, 1.0, 0.0 }</span>v2<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token comment">// v2 = { 1.0, 1.0, 1.0, 0.0 }</span><span class="token comment">// 混合（swizzle）</span>vector v3 <span class="token operator">=</span> v1<span class="token punctuation">.</span>yzwx<span class="token punctuation">;</span> <span class="token comment">// v3 = { 1.0, 0.0, 0.0, 0.0 } 等价于 v3.x=v1.y; v3.y=v1.z; v3.z=v1.w; v3.w=v1.x;</span>vector v4 <span class="token operator">=</span> v1<span class="token punctuation">.</span>rbga<span class="token punctuation">;</span> <span class="token comment">// v4 = { 0.0, 0.0, 1.0, 0.0 }  等价于 v4.x=v1.r; v4.y=v1.b; v4.z=v1.g; v4.w=v1.a;</span>vector v5 <span class="token operator">=</span> <span class="token function">vector</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// v5 = { 0.5, 0.2, 1.0, 0.0 }  新构造方法</span>v5<span class="token punctuation">.</span>xz <span class="token operator">=</span> v1<span class="token punctuation">;</span> <span class="token comment">// v5 = { 0.0, 0.2, 0.0, 0.0 }  只将v1的xz分量赋值给v5，等价于 v5.x=v1.x; v5.z=v1.z;</span><span class="token comment">//vector v6 = vector(0.95); // 编译错误  error X3014: incorrect number of arguments to numeric-type constructor</span>vector v6 <span class="token operator">=</span> <span class="token punctuation">(</span>vector<span class="token punctuation">)</span><span class="token number">0.95</span><span class="token punctuation">;</span> <span class="token comment">// v6 = { 0.95, 0.95, 0.95, 0.95 }</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> v7 <span class="token operator">=</span> v1<span class="token punctuation">;</span> <span class="token comment">// vector&lt;float, 4&gt;即vector类型  v7 = { 0.0, 1.0, 0.0, 0.0 }</span><span class="token comment">// 向量运算</span>vector v8 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>vector v9 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>vector v10 <span class="token operator">=</span> v8 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// v10 = {0.4, -1.6, 0.6, 1.2}</span>vector v11 <span class="token operator">=</span> v8 <span class="token operator">+</span> <span class="token number">0.6</span><span class="token punctuation">;</span> <span class="token comment">// v11 = {0.8, -0.2, 0.9, 1.2}</span>vector v12 <span class="token operator">=</span> v8 <span class="token operator">+</span> v9<span class="token punctuation">;</span> <span class="token comment">// v12 = { 0.2, -0.3, 1.3, 0.8 }</span>vector v13 <span class="token operator">=</span> v8 <span class="token operator">*</span> v9<span class="token punctuation">;</span> <span class="token comment">// v13 = {0.0, -0.4, 0.3, 0.12}</span><span class="token comment">// 逐分量进行比较</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> v14 <span class="token operator">=</span> <span class="token punctuation">(</span>v8 <span class="token operator">&gt;</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// v14 = {true, false, false, true}</span><span class="token comment">// 点乘(内积)</span><span class="token keyword">float</span> ret1 <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.2*0.0+(-0.8)*0.5+0.3*1.0+0.6*0.2 = 0.02</span><span class="token comment">// 叉乘(外积)  3维向量特有</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> vf3Ret <span class="token operator">=</span> <span class="token function">cross</span><span class="token punctuation">(</span>v8<span class="token punctuation">.</span>xyz<span class="token punctuation">,</span> v9<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// vf3Ret.x=v8.y*v9.z-v8.z*v9.y = -0.8*1.0-0.3*0.5   = -0.95</span>                                                 <span class="token comment">// vf3Ret.y=v8.z*v9.x-v8.x*v9.z = 0.3*0.0-0.2*1.0    = -0.2</span>                                                 <span class="token comment">// vf3Ret.z=v8.x*v9.y-v8.y*v9.x = 0.2*0.5-(-0.8)*0.0 = 0.1</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> vi3a<span class="token punctuation">;</span> <span class="token comment">// vi3a = {0, 0, 0}</span>vi3a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// vi3a = {0, 0, 10}</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> vb2a<span class="token punctuation">;</span> <span class="token comment">// vb2a = {false, false}</span>vb2a<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// vb2a = {true, false}</span><span class="token comment">// float4即vector</span>float4 vf4a<span class="token punctuation">;</span> <span class="token comment">// vf4a = { 0.0, 0.0, 0.0, 0.0 }</span>vf4a <span class="token operator">=</span> v2<span class="token punctuation">;</span> <span class="token comment">// vf4a = { 1.0, 1.0, 1.0, 0.0 }</span>float1 vf1a <span class="token operator">=</span> <span class="token number">0.75</span><span class="token punctuation">;</span> <span class="token comment">// float3即vector&lt;float,1&gt; 即float类型</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> vf1a<span class="token punctuation">;</span> <span class="token comment">// f1为0.75</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> vf1a<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">// f2为0.75</span><span class="token keyword">float</span> f3 <span class="token operator">=</span> vf1a<span class="token punctuation">.</span>r<span class="token punctuation">;</span> <span class="token comment">// f3为0.75</span>float2 vf2a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// float2即vector&lt;float,2&gt;</span>float3 vf3a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.35</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// float3即vector&lt;float,3&gt;</span>float3 vf3b<span class="token punctuation">;</span> <span class="token comment">// vf3b = { 0.0, 0.0, 0.0 }</span><span class="token comment">//vf3b = vf2a; // error 编译错误  低维向量不允许赋值给高维向量</span>float2 vf2b <span class="token operator">=</span> vf3a<span class="token punctuation">;</span> <span class="token comment">// vf2b = { 0.2, 0.35 } 当N&gt;n时，可裁剪降维后自动隐式转换   N --&gt; n</span>vf3b <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span>vf2a<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// vf3b = { 0.8, 0.9, 1.0 }</span>vf3b <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> vf2a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// vf3b = { 0.3, 0.8, 0.9 }</span>vf3b <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span>vf1a<span class="token punctuation">,</span> vf2a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// vf3b = { 0.75, 0.8, 0.9 }</span>vf3b <span class="token operator">=</span> v1<span class="token punctuation">;</span>  <span class="token comment">// vf3b = { 0.0, 1.0, 0.0 };  高维向量可赋值给低维向量  后面的部分会被截断</span>float4 vf4b <span class="token operator">=</span> <span class="token punctuation">{</span> vf2a<span class="token punctuation">,</span> vf2a <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// vf4b = { 0.8, 0.9, 0.8, 0.9 }</span>float4 vf4c <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.7</span><span class="token punctuation">,</span> vf2a<span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// vf4c = { 0.7, 0.8, 0.9, 0.5 }</span>float4 vf4d <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.7</span><span class="token punctuation">,</span> vf3a <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// vf4d = { 0.7, 0.2, 0.35, 0.5 }</span>bool2 vb2b<span class="token punctuation">;</span> <span class="token comment">// bool2即vector&lt;bool,2&gt;</span>int2 vi2a<span class="token punctuation">;</span> <span class="token comment">// int2即vector&lt;int,2&gt;</span>uint2 vu2a<span class="token punctuation">;</span> <span class="token comment">// uint2即vector&lt;uint,2&gt;</span><span class="token comment">// dword2 vdw2a; // error 编译错误  不存在dword2类型</span>half2 vh2a<span class="token punctuation">;</span> <span class="token comment">// half2即vector&lt;half,2&gt;</span>double2 vd2a<span class="token punctuation">;</span> <span class="token comment">// double2即vector&lt;double,2&gt;</span>vf2a <span class="token operator">=</span> vb2b<span class="token punctuation">;</span>vf2a <span class="token operator">=</span> vi2a<span class="token punctuation">;</span>vf2a <span class="token operator">=</span> vu2a<span class="token punctuation">;</span>vf2a <span class="token operator">=</span> vh2a<span class="token punctuation">;</span>vf2a <span class="token operator">=</span> vd2a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>矩阵</strong></p><p>按照行优先顺序来存储（行主序）</p><table><thead><tr><th><strong>分量类型</strong></th><th><strong>matrix类型</strong></th><th><strong>m x n // m行n列</strong></th></tr></thead><tbody><tr><td>bool</td><td>matrix&lt;bool, m, n&gt;</td><td>bool1x1、bool1x2、bool1x3、bool1x4bool2x1、bool2x2、bool2x3、bool2x4bool3x1、bool3x2、bool3x3、bool3x4bool4x1、bool4x2、bool4x3、bool4x4</td></tr><tr><td>int</td><td>matrix&lt;int, m, n&gt;</td><td>int1x1、int1x2、int1x3、int1x4int2x1、int2x2、int2x3、int2x4int3x1、int3x2、int3x3、int3x4　　int4x1、int4x2、int4x3、int4x4</td></tr><tr><td>uint</td><td>matrix&lt;uint, m, n&gt;</td><td>uint1x1、uint1x2、uint1x3、uint1x4uint2x1、uint2x2、uint2x3、uint2x4uint3x1、uint3x2、uint3x3、uint3x4uint4x1、uint4x2、uint4x3、uint4x4</td></tr><tr><td>half</td><td>matrix&lt;half, m, n&gt;</td><td>half1x1、half1x2、half1x3、half1x4half2x1、half2x2、half2x3、half2x4half3x1、half3x2、half3x3、half3x4half4x1、half4x2、half4x3、half4x4</td></tr><tr><td>float</td><td>matrix&lt;float, m, n&gt;</td><td>float1x1、float1x2、float1x3、float1x4float2x1、float2x2、float2x3、float2x4float3x1、float3x2、float3x3、float3x4float4x1、float4x2、float4x3、float4x4 注：matrix即为float4x4</td></tr><tr><td>double</td><td>matrix&lt;double, m, n&gt;</td><td>double1x1、double1x2、double1x3、double1x4double2x1、double2x2、double2x3、double2x4double3x1、double3x2、double3x3、double3x4double4x1、double4x2、double4x3、double4x4</td></tr></tbody></table><p>注1：matrix为一个4x4 float矩阵</p><p>注2：matrix&lt;T, m, n&gt;为一个m x n（m、n必须介于1~4之间），各元素的类型为T</p><p>注3：当M&gt;m且N&gt;n时，可裁剪降维后自动隐式转换  M x N –&gt; m x n</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">float2 f2a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1.6</span><span class="token punctuation">,</span> <span class="token number">1.8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>float3 f3a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>float2x2 m2x2a<span class="token punctuation">;</span> <span class="token comment">// m2x2a = {0.0, 0.0, 0.0, 0.0}</span>float2x2 m2x2b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">0.9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// m2x2b = {0.8, 0.6, 2.0, 0.9}</span>                                         <span class="token comment">//          | 0.8  0.6 |</span>                                         <span class="token comment">//          | 2.0  0.9 |</span>float2x2 m2x2c <span class="token operator">=</span> <span class="token function">float2x2</span><span class="token punctuation">(</span> f3a<span class="token punctuation">,</span> <span class="token number">0.1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m2x2c = {0.0, -1.0, 3.0, 0.1}</span>                                       <span class="token comment">//          | 0.0  -1.0 |</span>                                       <span class="token comment">//          | 3.0   0.1 |</span><span class="token comment">//float2x2 m2x2d = float2x2(f2a, f3a);  // 编译出错  error X3014: incorrect number of arguments to numeric-type constructor</span>float2x2 m2x2e <span class="token operator">=</span> <span class="token function">float2x2</span><span class="token punctuation">(</span>f2a<span class="token punctuation">,</span> f3a<span class="token punctuation">.</span>xz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m2x2e = {1.6, 1.8, 0.0, 3.0}</span>                                        <span class="token comment">//          | 1.6  1.8 |</span>                                        <span class="token comment">//          | 0.0  3.0 |</span><span class="token comment">//float2x2 m2x2f = float2x2(5.0); // 编译出错  error X3014: incorrect number of arguments to numeric-type constructor</span>float2x2 m2x2g <span class="token operator">=</span> <span class="token punctuation">(</span>float2x2<span class="token punctuation">)</span><span class="token number">5.0</span><span class="token punctuation">;</span> <span class="token comment">// m2x2g = {5.0, 5.0, 5.0, 5.0}</span>                                <span class="token comment">//          | 5.0  5.0 |</span>                                <span class="token comment">//          | 5.0  5.0 |</span>float2 f2b <span class="token operator">=</span> m2x2b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取m2x2b的第1个行向量  f2b = {0.8  0.6}</span>float2 f2c <span class="token operator">=</span> m2x2b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取m2x2b的第2个行向量  f2c = {2.0  0.9}</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> m2x2b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取m2x2b的第1行第2列元素 f1 = 0.6</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> m2x2b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span> <span class="token comment">// 获取m2x2b的第1行第2列元素 f2 = 0.6</span><span class="token keyword">float</span> f3 <span class="token operator">=</span> m2x2b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>g<span class="token punctuation">;</span> <span class="token comment">// 获取m2x2b的第1行第2列元素 f3 = 0.6</span><span class="token keyword">float</span> f4 <span class="token operator">=</span> m2x2b<span class="token punctuation">.</span>_m01<span class="token punctuation">;</span> <span class="token comment">// 获取m2x2b的第1行第2列元素 f4 = 0.6</span><span class="token keyword">float</span> f5 <span class="token operator">=</span> m2x2b<span class="token punctuation">.</span>_12<span class="token punctuation">;</span> <span class="token comment">// 获取m2x2b的第1行第2列元素 f5 = 0.6</span>float2 f2d <span class="token operator">=</span> m2x2e<span class="token punctuation">.</span>_11_22 <span class="token comment">// 获取m2x2e的第1行第1列元素及第2行第2列元素 Swizzle f2d = {1.6  3.0}</span>m2x2e<span class="token punctuation">.</span>_12_21 <span class="token operator">=</span> m2x2e<span class="token punctuation">.</span>_21_12<span class="token punctuation">;</span> <span class="token comment">// 交换m2x2e[0][1]和m2x2e[1][0] Swizzle</span>                             <span class="token comment">// m2x2e = {1.6, 0.0, 1.8, 3.0}</span>                             <span class="token comment">//          | 1.6  0.0 |</span>                             <span class="token comment">//          | 1.8  3.0 |    </span>m2x2e<span class="token punctuation">.</span>_m00_m11 <span class="token operator">=</span> m2x2e<span class="token punctuation">.</span>_m11_m00<span class="token punctuation">;</span>    <span class="token comment">// 交换M[0][0]和M[1][1]     Swizzle                         </span>                             <span class="token comment">// m2x2e = {3.0, 0.0, 1.8, 1.6}</span>                             <span class="token comment">//          | 3.0  0.0 |</span>                             <span class="token comment">//          | 1.8  1.6 |</span>                             float2x2 m2x2h <span class="token operator">=</span> m2x2b <span class="token operator">+</span> m2x2c<span class="token punctuation">;</span> <span class="token comment">// m2x2h = {0.8, -0.4, 5.0, 1.0}</span>float2x2 m2x2i <span class="token operator">=</span> m2x2b <span class="token operator">*</span> m2x2c<span class="token punctuation">;</span> <span class="token comment">// m2x2i = {0.0, -0.6, 6.0, 0.09}</span>float2x2 m2x2j <span class="token operator">=</span> m2x2b <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span> <span class="token comment">// m2x2j = {1.0, 0.8, 2.2, 1.1}</span>float2x2 m2x2k <span class="token operator">=</span> m2x2b <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// m2x2k = {1.6, 1.2, 4.0, 1.8}</span><span class="token comment">//float2x2 m2x2l = f2a + m2x2b; // 编译错误  error X3020: type mismatch</span><span class="token comment">//float2x2 m2x2m = f2a * m2x2b; // 编译错误  error X3020: type mismatch</span>float2x1 m2x1a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// m2x1a = { 1.0, 0.2 }</span>                               <span class="token comment">//          | 1.0 |</span>                               <span class="token comment">//          | 0.2 |</span>float1x2 m1x2a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// m1x2a = { 0.3, 1.0 }    </span>                               <span class="token comment">//         | 0.3  1.0 |</span><span class="token comment">// 矩阵算术运算  M x N --&gt; m x n   注：当M&gt;m且N&gt;n时，可裁剪降维后自动隐式转换</span>float2x1 m2x1b <span class="token operator">=</span> f2a <span class="token operator">+</span> m2x1a<span class="token punctuation">;</span> <span class="token comment">// float2向量可与float2x1矩阵进行算术运算  </span>                              <span class="token comment">// m1x2b = { 2.6, 2.0 }    </span>                              <span class="token comment">//           | 2.6 |</span>                              <span class="token comment">//           | 2.0 |</span>float1x1 m1x1a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// | 0.2 |</span>float3x3 m3x3a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.15</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token comment">// | 0.1   0.0  0.2 |</span>                   <span class="token comment">// | 0.15 -0.1  0.0 |</span>                   <span class="token comment">// | -0.2  0.0  0.3 |</span><span class="token comment">//float2x2 m2x2n = m2x2b + m2x1a; // 编译错误  error X3017: cannot implicitly convert from 'const float2x1' to 'float2x2'</span>float2x1 m2x1c <span class="token operator">=</span> m2x2b <span class="token operator">+</span> m2x1a<span class="token punctuation">;</span> <span class="token comment">// m1x2c = { 1.8, 0.8 } </span>float2x2 m2x2o <span class="token operator">=</span> m2x2b <span class="token operator">+</span> m1x1a<span class="token punctuation">;</span> <span class="token comment">// m2x2o = {1.0, 0.8, 2.2, 1.1}  注：m1x1a退化为float</span>float2x2 m2x2p <span class="token operator">=</span> m2x2b <span class="token operator">+</span> m3x3a<span class="token punctuation">;</span> <span class="token comment">// m2x2p = {0.9, 0.6, 2.15, 0.8}</span><span class="token comment">//float3x3 m3x3b = m3x3a + m2x2b; // 编译错误 error X3017 : cannot implicitly convert from 'const float2x2' to 'float3x3'</span><span class="token comment">//float3x3 m3x3c = m2x2b + m3x3a; // 编译错误 error X3017 : cannot implicitly convert from 'const float2x2' to 'float3x3'</span><span class="token comment">// 矩阵-矩阵乘法</span>float1x1 m1x1b <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>m1x2a<span class="token punctuation">,</span> m2x1a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//                  | 1.0 |</span>                                    <span class="token comment">// | 0.3  1.0 | mul | 0.2 | = 0.5</span>float2x2 m2x2r <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>m2x1a<span class="token punctuation">,</span> m1x2a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  | 1.0 |                    | 0.3  1.0 |</span>                                    <span class="token comment">// | 0.2 | mul | 0.3  1.0 | = | 0.06 0.2 |</span><span class="token comment">// 矩阵右乘向量</span>float2x1 m2x1d <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>m2x2b<span class="token punctuation">,</span> f2a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// f2a被当成列向量</span>                                   <span class="token comment">//  | 0.8  0.6 |     | 1.6 |   | 2.36 |</span>                                    <span class="token comment">// | 2.0  0.9 | mul | 1.8 | = | 4.82 |</span><span class="token comment">// 矩阵左乘向量</span>float1x2 m1x2b <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>f2a<span class="token punctuation">,</span> m2x2b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// f2a被当成行向量</span>                                   <span class="token comment">//                   | 0.8  0.6 | </span>                                   <span class="token comment">//  | 1.6  1.8 | mul | 2.0  0.9 | = | 4.88 2.58 |</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>纹理（texture）</strong></p><p>在glsl、CG或Effects Framework（效果框架）中引用纹理，只需要声明一个sampler2D。</p><p>而在HLSL中，sampler2D这个对象则被拆分为两部分：即Texture2D（纹理）和SamplerState（采样器），需要同时声明两个变量来保存它们。</p><p><strong>纹理</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>Texture1D</td><td>1D纹理</td><td>RWTexture1D<float> tex;</float></td></tr><tr><td>Texture1DArray</td><td>1D纹理数组</td><td>RWTexture1DArray<float> tex;</float></td></tr><tr><td>Texture2D</td><td>2D纹理</td><td><code>Texture2D DiffuseTexture    : register( t0 ); Texture2D&lt;float&gt; DepthTexture         : register( t1 ); Texture2D&lt;float4&gt; ColorSpecIntTexture : register( t2 ); Texture2D&lt;float3&gt; NormalTexture       : register( t3 ); Texture2D&lt;float4&gt; SpecPowTexture      : register( t4 ); RWTexture2D&lt;float4&gt; MyTexture : register( u0 );</code></td></tr><tr><td>Texture2DArray</td><td>2D纹理数组</td><td>Texture2DArray<float> CascadeShadowMapTexture : register( t4 );RWTexture2DArray<float> tex;</float></float></td></tr><tr><td>Texture3D</td><td>3D纹理</td><td>RWTexture3D<float> tex;</float></td></tr><tr><td>Texture2DMS</td><td></td><td></td></tr><tr><td>Texture2DMSArray</td><td></td><td></td></tr><tr><td>TextureCube</td><td></td><td><code>TextureCube&lt;float&gt; PointShadowMapTexture : register( t4 );</code></td></tr><tr><td>TextureCubeArray</td><td></td><td></td></tr></tbody></table><p>注1：只读纹理使用着色器资源视图（shader resource views，SRV）来绑定，用t寄存器来传递</p><p>注2：可读写纹理使用乱序访问视图（unordered access view，UAV）来绑定，用u寄存器来传递 UnorderedAccessView</p><p><strong>采样器</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>SamplerState</td><td>贴图采样器</td><td><code>SamplerState LinearSampler    : register( s0 );</code></td></tr><tr><td>SamplerComparisonState</td><td>阴影贴图采样器</td><td><code>///////////////////////////////////////////////////////////////////////////// // Shadow sampler ///////////////////////////////////////////////////////////////////////////// SamplerComparisonState PCFSampler : register( s2 );</code></td></tr></tbody></table><p>注：采样器（sampler）用s寄存器来传递</p><p><strong>示例</strong></p><p>在C++端是通过ID3D11DeviceContext::VSSetShaderResources、ID3D11DeviceContext::PSSetShaderResources指定特定的槽(slot)来给某一着色器阶段对应的寄存器索引提供纹理数据。</p><p>在C++端是通过ID3D11DeviceContext::VSSetSamplers、ID3D11DeviceContext::PSSetSamplers指定特定的槽(slot)来给某一着色器阶段对应的寄存器索引提供SamplerState数据。</p><p>当SamplerState不需要C++动态传入时，也可以在hlsl内部定义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/****************************** C++ ******************************/</span>ID3D11ShaderResourceView<span class="token operator">*</span>   g_pTexture1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>ID3D11ShaderResourceView<span class="token operator">*</span>   g_pTexture2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>ID3D11SamplerState<span class="token operator">*</span>         g_pSampLinear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">// PCF sampler state for shadow mapping</span>ID3D11SamplerState<span class="token operator">*</span>         g_pPCFSamplerState <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">// Create Shader Resouce View (Texture2D)</span>WCHAR str<span class="token punctuation">[</span>MAX_PATH<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">V_RETURN</span><span class="token punctuation">(</span> <span class="token function">DXUTFindDXSDKMediaFileCch</span><span class="token punctuation">(</span> str<span class="token punctuation">,</span> MAX_PATH<span class="token punctuation">,</span> L<span class="token string">"..\\Media\\Bokeh1.dds"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">V_RETURN</span><span class="token punctuation">(</span> <span class="token function">D3DX11CreateShaderResourceViewFromFile</span><span class="token punctuation">(</span> g_pDevice<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_pTexture1<span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ID3D11Device* g_pDevice;</span><span class="token function">V_RETURN</span><span class="token punctuation">(</span> <span class="token function">DXUTFindDXSDKMediaFileCch</span><span class="token punctuation">(</span> str<span class="token punctuation">,</span> MAX_PATH<span class="token punctuation">,</span> L<span class="token string">"..\\Media\\Bokeh2.dds"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">V_RETURN</span><span class="token punctuation">(</span> <span class="token function">D3DX11CreateShaderResourceViewFromFile</span><span class="token punctuation">(</span> g_pDevice<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_pTexture2<span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ID3D11Device* g_pDevice;</span><span class="token comment">// Set Shader Resources</span>ID3D11ShaderResourceView<span class="token operator">*</span> arrViews<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> g_pTexture1<span class="token punctuation">,</span> g_pTexture2<span class="token punctuation">}</span><span class="token punctuation">;</span>pd3dImmediateContext<span class="token operator">-&gt;</span><span class="token function">PSSetShaderResources</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> arrViews<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ID3D11DeviceContext* pd3dImmediateContext</span><span class="token comment">// --------------------------------------------------------------</span><span class="token comment">// Create sampler</span>D3D11_SAMPLER_DESC samDesc<span class="token punctuation">;</span><span class="token function">ZeroMemory</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>samDesc<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>samDesc<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>samDesc<span class="token punctuation">.</span>Filter <span class="token operator">=</span> D3D11_FILTER_MIN_MAG_MIP_LINEAR<span class="token punctuation">;</span>samDesc<span class="token punctuation">.</span>AddressU <span class="token operator">=</span> samDesc<span class="token punctuation">.</span>AddressV <span class="token operator">=</span> samDesc<span class="token punctuation">.</span>AddressW <span class="token operator">=</span> D3D11_TEXTURE_ADDRESS_WRAP<span class="token punctuation">;</span>samDesc<span class="token punctuation">.</span>MaxAnisotropy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>samDesc<span class="token punctuation">.</span>ComparisonFunc <span class="token operator">=</span> D3D11_COMPARISON_ALWAYS<span class="token punctuation">;</span>samDesc<span class="token punctuation">.</span>MaxLOD <span class="token operator">=</span> D3D11_FLOAT32_MAX<span class="token punctuation">;</span><span class="token function">V_RETURN</span><span class="token punctuation">(</span> pd3dDevice<span class="token operator">-&gt;</span><span class="token function">CreateSamplerState</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>samDesc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_pSampLinear <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Create the PCF sampler state</span>D3D11_SAMPLER_DESC samDesc2<span class="token punctuation">;</span><span class="token function">ZeroMemory</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>samDesc2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>samDesc2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>samDesc2<span class="token punctuation">.</span>Filter <span class="token operator">=</span> D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR<span class="token punctuation">;</span>samDesc2<span class="token punctuation">.</span>AddressU <span class="token operator">=</span> samDesc2<span class="token punctuation">.</span>AddressV <span class="token operator">=</span> samDesc2<span class="token punctuation">.</span>AddressW <span class="token operator">=</span> D3D11_TEXTURE_ADDRESS_CLAMP<span class="token punctuation">;</span>samDesc2<span class="token punctuation">.</span>MaxAnisotropy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>samDesc2<span class="token punctuation">.</span>ComparisonFunc <span class="token operator">=</span> D3D11_COMPARISON_LESS_EQUAL<span class="token punctuation">;</span>samDesc2<span class="token punctuation">.</span>MaxLOD <span class="token operator">=</span> D3D11_FLOAT32_MAX<span class="token punctuation">;</span><span class="token function">V_RETURN</span><span class="token punctuation">(</span> g_pDevice<span class="token operator">-&gt;</span><span class="token function">CreateSamplerState</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>samDesc2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_pPCFSamplerState <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Set render resources</span>pd3dImmediateContext<span class="token operator">-&gt;</span><span class="token function">PSSetSamplers</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_pSampLinear <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ID3D11DeviceContext* pd3dImmediateContext</span><span class="token comment">// Set the shadowmapping PCF sampler</span>pd3dImmediateContext<span class="token operator">-&gt;</span><span class="token function">PSSetSamplers</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_pPCFSamplerState <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ID3D11DeviceContext* pd3dImmediateContext</span><span class="token comment">/***************************** HLSL *****************************/</span><span class="token comment">/////////////////////////////////////////////////////////////////////////////</span><span class="token comment">// Diffuse texture and linear sampler</span><span class="token comment">/////////////////////////////////////////////////////////////////////////////</span>Texture2D    Diffuse1Texture <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span> t0 <span class="token punctuation">)</span><span class="token punctuation">;</span>Texture2D    Diffuse2Texture <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span> t1 <span class="token punctuation">)</span><span class="token punctuation">;</span>SamplerState LinearSampler <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span> s0 <span class="token punctuation">)</span><span class="token punctuation">;</span>SamplerComparisonState PCFSampler <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span> s2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// sampler define in shader code</span>SamplerState MeshTextureSampler<span class="token punctuation">{</span>    Filter <span class="token operator">=</span> MIN_MAG_MIP_LINEAR<span class="token punctuation">;</span>    AddressU <span class="token operator">=</span> Wrap<span class="token punctuation">;</span>    AddressV <span class="token operator">=</span> Wrap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>float4 <span class="token function">AmbientLightPS</span><span class="token punctuation">(</span> VS_OUTPUT In <span class="token punctuation">)</span> <span class="token operator">:</span> SV_TARGET0  <span class="token comment">// VS_OUTPUT In：VS的输出经过光栅化插值后，会作为输入传入PS</span><span class="token punctuation">{</span>     <span class="token comment">// Sample the texture and convert to linear space</span>    float4 Diffuse1Color <span class="token operator">=</span>  Diffuse1Texture<span class="token punctuation">.</span><span class="token function">Sample</span><span class="token punctuation">(</span> LinearSampler<span class="token punctuation">,</span> In<span class="token punctuation">.</span>UV <span class="token punctuation">)</span><span class="token punctuation">;</span>    float4 Diffuse2Color <span class="token operator">=</span>  Diffuse2Texture<span class="token punctuation">.</span><span class="token function">Sample</span><span class="token punctuation">(</span> LinearSampler<span class="token punctuation">,</span> In<span class="token punctuation">.</span>UV <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ... ...</span>    <span class="token keyword">return</span> <span class="token function">float4</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Diffuse1Color<span class="token operator">+</span>Diffuse2Color<span class="token punctuation">)</span><span class="token punctuation">.</span>rgb<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数</strong></p><p>函数用法和C语言一样</p><p>函数参数限定词说明：</p><table><thead><tr><th><strong>限定词</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>in</td><td>缺省限定词，可以省略不写</td></tr><tr><td>const</td><td>当前参数为常量，不可在函数内被修改</td></tr><tr><td>out</td><td>① 在函数内使用前必须先初始化② 在函数内修改后，对外可见</td></tr><tr><td>inout</td><td>① 接受函数外传入的初始值② 在函数内修改后，对外可见</td></tr></tbody></table><p>① 参数限定词只需要用在函数上，函数调用时不用带。</p><p>② 不允许函数递归  这一限制的原因是编译器会把函数都内联展开，以支持没有堆栈的GPU</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">float</span> value<span class="token punctuation">)</span> <span class="token comment">// 求平方</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> value <span class="token operator">*</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fuc1</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">float</span> value<span class="token punctuation">)</span> <span class="token comment">// const参数不能在函数内部修改</span><span class="token punctuation">{</span>    <span class="token comment">//value = 0.2; // assignment to const variable value  编译错误</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fuc2</span><span class="token punctuation">(</span>out <span class="token keyword">float</span> value<span class="token punctuation">)</span>  <span class="token comment">// value在函数内使用前必须先初始化；在函数内修改，对外可见</span><span class="token punctuation">{</span>    value <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span> <span class="token comment">// 注：在函数内使用out参数之前，必须先初始化，否则会编译错误</span>    value <span class="token operator">+=</span> <span class="token number">0.5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fuc3</span><span class="token punctuation">(</span>inout <span class="token keyword">float</span> value<span class="token punctuation">)</span> <span class="token comment">// value的初始值从函数外传入；在函数内修改，对外可见</span><span class="token punctuation">{</span>    value <span class="token operator">+=</span> <span class="token number">0.5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token comment">// 直接或间接调用fun4函数，会编译报错：recursive call to function</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">fun4</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fun4</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内置函数（Intrinsic Functions）</strong></p><p>HLSL提供了一些<a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-intrinsic-functions">内置全局函数</a>，它通常直接映射到指定的着色器汇编指令集。这里只列出一些比较常用的函数：</p><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th><th><strong>最小支持的着色器版本</strong></th></tr></thead><tbody><tr><td>abs(x)</td><td>求x的绝对值　注：x为向量或矩阵时，表示求各分量的abs</td><td>1.1</td></tr><tr><td>acos(x)</td><td>求x的反余弦值</td><td>1.1</td></tr><tr><td>ceil(x)</td><td>返回不小于x的最小整数</td><td>1.1</td></tr><tr><td>clamp(x, a, b)</td><td>把x夹钳在[a, b]内</td><td>1.1</td></tr><tr><td>cos(x)</td><td>计算x的余弦值。x的单位为弧度</td><td>1.1</td></tr><tr><td>cross(u,v)</td><td>计算u、v向量的叉乘（外积）</td><td>1.1</td></tr><tr><td>degrees(x)</td><td>将x从弧度转成角度</td><td>1.1</td></tr><tr><td>determinant(M)</td><td>返回矩阵的行列式det(M)</td><td>1.1</td></tr><tr><td>distance(u, v)</td><td>返回两点u和v之间的距离 || u - v ||</td><td>1.1</td></tr><tr><td>dot(u, v)</td><td>返回向量u和v的点乘（内积）</td><td>1.1</td></tr><tr><td>dst(u, v)</td><td>计算距离向量</td><td>5.0</td></tr><tr><td>floor(x)</td><td>返回不大于x的最大整数</td><td>1.1</td></tr><tr><td>length(v)</td><td>返回向量v的模 || v ||</td><td>1.1</td></tr><tr><td>lerp(u, v, t)</td><td>在u和v之间做线性插值，并返回t所在比例的值 注：t在[0,1]之间</td><td>1.1</td></tr><tr><td>log(x)</td><td>返回ln(x) 注：以e为底数的对数值</td><td>1.1</td></tr><tr><td>log10(x)</td><td>返回以10为底数的对数值</td><td>1.1</td></tr><tr><td>log2(x)</td><td>返回以2为底数的对数值</td><td>1.1</td></tr><tr><td>max(x, y)</td><td>返回x，y中的较大的一个</td><td>1.1</td></tr><tr><td>min(x, y)</td><td>返回x，y中的较小的一个</td><td>1.1</td></tr><tr><td>mul(M, N)</td><td>矩阵乘法若M为向量，被视为行向量；若N为向量，被视为列向量</td><td>1.1</td></tr><tr><td>normalize(v)</td><td>对向量v归一化，返回v / || v ||</td><td>1.1</td></tr><tr><td>pow(b, n)</td><td>返回b的n次幂</td><td>1.1</td></tr><tr><td>radians(x)</td><td>将x从角度转为弧度</td><td>1</td></tr><tr><td>reflect(v, n)</td><td>给定入射向量v和表面法线n时，求出反射向量</td><td>1</td></tr><tr><td>refract(v, n, eta)</td><td>给定折射向量v、表面法线n及两种材质的折射度索引的比率eta，求出折射向量详见：斯涅耳定律（Snell’s Law）</td><td>1.1</td></tr><tr><td>rsqrt(x)</td><td>返回1/sqrt(x)</td><td>1.1</td></tr><tr><td>saturate(x)</td><td>返回clamp(x, 0.0, 1.0)</td><td>1</td></tr><tr><td>sin(x)</td><td>计算x的正弦值。x的单位为弧度</td><td>1.1</td></tr><tr><td>sincos(in x, out s, out c)</td><td>计算x的正弦值s和余弦值c。x的单位为弧度</td><td>1.1</td></tr><tr><td>sqrt(x)</td><td>对x开根号</td><td>1.1</td></tr><tr><td>tan(x)</td><td>返回x的正切值。x的单位为弧度</td><td>1.1</td></tr><tr><td>transpose(M)</td><td>返回矩阵M的转置矩阵</td><td>1</td></tr></tbody></table><p>引用：<a href="https://www.icode9.com/content-4-1054045.html">https://www.icode9.com/content-4-1054045.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形硬件 </tag>
            
            <tag> GPU架构 </tag>
            
            <tag> ShaderLanguage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Color_LUT制作</title>
      <link href="/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/hou-chu-li/color-lut-zhi-zuo/"/>
      <url>/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/hou-chu-li/color-lut-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<h3 id="一、准备未经处理的-LUT贴图"><a href="#一、准备未经处理的-LUT贴图" class="headerlink" title="一、准备未经处理的 LUT贴图"></a>一、准备未经处理的 LUT贴图</h3><p>256x16</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/LUT_256x16.png" alt="LUT_256x16"> </p><p>1024x32</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/LUT_1024x32.png" alt="LUT_1024x32"> </p><h3 id="二、在PS中进行图片颜色调整"><a href="#二、在PS中进行图片颜色调整" class="headerlink" title="二、在PS中进行图片颜色调整"></a>二、在PS中进行图片颜色调整</h3><p>调整前：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120126555.png" alt="image-20211112120126555" style="zoom:67%;"> <p>调整后：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120048748.png" alt="image-20211112120048748" style="zoom:50%;"> <h3 id="三、将调整应用到-LUT上"><a href="#三、将调整应用到-LUT上" class="headerlink" title="三、将调整应用到 LUT上"></a>三、将调整应用到 LUT上</h3><p>选中上面的图片，将应用直接拖拽的下面的 LUT 上即可</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120329164.png" alt="image-20211112120329164" style="zoom:67%;"> <p>修改前：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120504081.png" alt="image-20211112120504081"></p><p>修改后：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120523799.png" alt="image-20211112120523799"></p><h3 id="四、在Unity中使用"><a href="#四、在Unity中使用" class="headerlink" title="四、在Unity中使用"></a>四、在Unity中使用</h3><p>使用 Color Lookup 效果，将贴图附上即可</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112120631890.png" alt="image-20211112120631890" style="zoom: 80%;"> <p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/400119440">https://zhuanlan.zhihu.com/p/400119440</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 后处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPOS-VFACE-SV_VertexID</title>
      <link href="/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/vpos-vface-sv-vertexid/"/>
      <url>/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/vpos-vface-sv-vertexid/</url>
      
        <content type="html"><![CDATA[<h3 id="SV-VertexID"><a href="#SV-VertexID" class="headerlink" title="SV_VertexID"></a>SV_VertexID</h3><p><strong>uint vid : SV_VertexID</strong></p><p>表示第几个顶点，依次从第0开始…</p><p>这样在进行顶点动画时，可以对指定顶点进行采样</p><p>v2f vert (appdata v, uint vid : SV_VertexID)</p><p>{</p><p>float x = vid;</p><p>…</p><p>此特性仅存在于DX10（ShaderModel4.0）、GLCore、OpenGL ES 3中</p><p>所以需要添加以下编译指令：</p><p>#pragma target 3.5</p><h3 id="VPOS"><a href="#VPOS" class="headerlink" title="VPOS"></a>VPOS</h3><p><strong>VPOS</strong>：屏幕像素坐标，用于片段着色器，需要添加#pragma target 3.0编译指令。</p><p>fixed4 frag (v2f i, UNITY_VPOS_TYPE screenPos : VPOS) : SV_Target</p><p>{</p><p>screenPos.xy = floor(screenPos.xy * 0.25) * 0.5;</p><p>…</p><p>大多数平台，VPOS类型是float4，但是对于Direct3D9为float2，所以要使用UNITY_VPOS_TYPE这个宏来作为screenPos的类型。</p><h3 id="VFACE"><a href="#VFACE" class="headerlink" title="VFACE"></a>VFACE</h3><p><strong>VFACE</strong>：被渲染的面是否朝向摄像机，用于片段着色器，需要添加#pragma target 3.0编译指令。</p><p>如果渲染表面朝向摄像机，则Face节点输出正值1，如果远离摄像机，则输出负值-1。</p><p>fixed4 frag (fixed facing : VFACE) : SV_Target</p><p>{</p><p>return facing &gt; 0 ? fixed4(0,0,0,0) : fixed4(1,1,1,1);</p><p>}</p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip:"></a>Tip:</h3><p>TEXCOORD</p><p>以下为手机平台的常见规则：</p><ul><li>OpenGL     ES2.0支持最多8个</li><li>OpenGL     ES3.0支持最多16个</li></ul><p>从性能优化角度来讲，数量越少性能越好。</p><p>另外，每个语义是4维向量，利用好这一点，可以大大节省总数量。</p><p>参考：</p><p><a href="http://blog.coolcoding.cn/?p=798">http://blog.coolcoding.cn/?p=798</a></p><p><a href="https://zhuanlan.zhihu.com/p/50492287">https://zhuanlan.zhihu.com/p/50492287</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形硬件 </tag>
            
            <tag> 图形渲染管线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity渲染RT的几种方式</title>
      <link href="/BloodSoul.github.io/2021/11/12/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/unityrt/unity-xuan-ran-rt-de-ji-chong-fang-shi/"/>
      <url>/BloodSoul.github.io/2021/11/12/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/unityrt/unity-xuan-ran-rt-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="第一种：使用Camera"><a href="#第一种：使用Camera" class="headerlink" title="第一种：使用Camera"></a>第一种：使用Camera</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112111253569.png" alt="image-20211112111253569"></p><h3 id="第二种：使用-GL-和-Graphics-DrawXXX"><a href="#第二种：使用-GL-和-Graphics-DrawXXX" class="headerlink" title="第二种：使用 GL 和 Graphics.DrawXXX"></a>第二种：使用 GL 和 Graphics.DrawXXX</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112111310640.png" alt="image-20211112111310640"> </p><h3 id="第三种：使用-Graphics-Blit"><a href="#第三种：使用-Graphics-Blit" class="headerlink" title="第三种：使用 Graphics.Blit"></a>第三种：使用 Graphics.Blit</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112111351801.png" alt="image-20211112111351801"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112111357232.png" alt="image-20211112111357232"> </p><h3 id="第四种：使用-CommandBuffer"><a href="#第四种：使用-CommandBuffer" class="headerlink" title="第四种：使用 CommandBuffer"></a>第四种：使用 CommandBuffer</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112111717713.png" alt="image-20211112111717713"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> UnityRT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matcap技巧</title>
      <link href="/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/xuan-ran-ji-qiao/matcap/matcap-ji-qiao/"/>
      <url>/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/xuan-ran-ji-qiao/matcap/matcap-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h4 id="Cheapest-PBR-Shader-EVER"><a href="#Cheapest-PBR-Shader-EVER" class="headerlink" title="Cheapest PBR Shader EVER!!!!"></a>Cheapest PBR Shader EVER!!!!</h4><p>摘取自：<a href="https://blog.csdn.net/ndsc_dw/article/details/50700201">https://blog.csdn.net/ndsc_dw/article/details/50700201</a></p><p>一提到Physically based rendering, 就感觉跟手游搭不上边，总有种十分高端的感觉吧，可是我现在就是要在手游上用PBR，而且还是高效率的用！！！</p><p>这里提到的高效包括Shader执行高效，Shader鲁棒以及美术和程序的学习成本极低！！！</p><p>不知道大家是否知道matcap，美术用ZBrush的时候的一个shader，主要模拟向光面受光的反射情况</p><p>根据Unreal在Siggraph 2013上做的关于实时PBR的讲座，实时PBR其实就是两个参数，光滑度和金属度。具体可以去下论文，不要钱的也不用翻墙就能看，看完这个再看下面的会觉得恍然大悟，至少了解一下这篇文章怎么做PBR的思路就行，具体公式啊怎么做随机采样都可以跳过。</p><p>那么如我们用一张2D Texture作为madcap贴图，计算材质在各个角度反射的结果，用这个texture的mipmap保存不同粗糙度的情况下的反射情况，那么我们就有了粗糙度</p><p>我们用两张而不是一张matcap贴图，一张保存金属材质的效果，一张保存废金属材质的效果，这样我们有了金属度（根据Unreal说，金属度只有在取完全金属和完全非金属时美术才觉得不是trivial的效果）。</p><p>这样，我们就用MAX，选一个吊炸天的离线PBR的shader，弄个材质球，把光打好，从最光滑渲染到最粗糙保存成mipmap chain，金属非金属一样一个弄好，好了，我们有了PBR的matcap贴图了。</p><p>然后就是madcap的shader少改一下，多接受一张贴图，r通道保存粗糙度，g通道保存金属度，然后在PS里面根据这个贴图指定的每个像素的材质除了用normal选位置再选一下mipmap层和用哪张贴图就完了。</p><p>说到这里完全没说到采样，模糊，PBR理论。。。。。。我觉得稍微用心想一想两天能明白过来，然后你就是next next generation的手游开发者了</p><p>不过这个shader有个问题，摄像机角度不能动，光照角度不能动，但是角色可以随便动！！！！！我觉得大多数手游如果做上帝视角等等视角没问题哦</p><h4 id="基于MatCap实现适于移动平台的“次时代”车漆Shader"><a href="#基于MatCap实现适于移动平台的“次时代”车漆Shader" class="headerlink" title="基于MatCap实现适于移动平台的“次时代”车漆Shader"></a>基于MatCap实现适于移动平台的“次时代”车漆Shader</h4><p><a href="https://zhuanlan.zhihu.com/p/25314364">https://zhuanlan.zhihu.com/p/25314364</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染技巧 </tag>
            
            <tag> Matcap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualTexture_虚拟纹理</title>
      <link href="/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/zi-chan/wen-li/virtualtexture-xu-ni-wen-li/"/>
      <url>/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/zi-chan/wen-li/virtualtexture-xu-ni-wen-li/</url>
      
        <content type="html"><![CDATA[<h3 id="浅谈Virtual-Texture"><a href="#浅谈Virtual-Texture" class="headerlink" title="浅谈Virtual Texture"></a>浅谈Virtual Texture</h3><p><a href="https://zhuanlan.zhihu.com/p/138484024">https://zhuanlan.zhihu.com/p/138484024</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112110312403.png" alt="image-20211112110312403" style="zoom:50%;"> <h3 id="UE4虚拟纹理学习笔记（一）基础知识"><a href="#UE4虚拟纹理学习笔记（一）基础知识" class="headerlink" title="UE4虚拟纹理学习笔记（一）基础知识"></a>UE4虚拟纹理学习笔记（一）基础知识</h3><p><a href="https://zhuanlan.zhihu.com/p/162934135">https://zhuanlan.zhihu.com/p/162934135</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112110336611.png" alt="image-20211112110336611" style="zoom: 67%;">  <p><a href="https://www.cnblogs.com/wujianming-110117/p/12908545.html">https://www.cnblogs.com/wujianming-110117/p/12908545.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112110410372.png" alt="image-20211112110410372" style="zoom:67%;"> <h3 id="Github-开源项目："><a href="#Github-开源项目：" class="headerlink" title="Github 开源项目："></a>Github 开源项目：</h3><p>View-Independent Procedural Virtual Texture with Unity Terrain</p><p><a href="https://github.com/ACskyline/PVTUT">https://github.com/ACskyline/PVTUT</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112110509117.png" alt="image-20211112110509117" style="zoom:67%;"> <p>Runtime Procedural Virtual Texture for UnityTerrain in Universal Render Pipeline(URP)</p><p><a href="https://github.com/haolange/InfinityTexture">https://github.com/haolange/InfinityTexture</a></p><p>Virtual texture for unity</p><p><a href="https://github.com/jintiao/VirtualTexture">https://github.com/jintiao/VirtualTexture</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112110618004.png" alt="image-20211112110618004" style="zoom: 80%;">  ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资产 </tag>
            
            <tag> 纹理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grass</title>
      <link href="/BloodSoul.github.io/2021/11/07/demogallery/demo1/grass/"/>
      <url>/BloodSoul.github.io/2021/11/07/demogallery/demo1/grass/</url>
      
        <content type="html"><![CDATA[<p>视频链接： <a href="https://www.bilibili.com/video/BV1jR4y147aW?share_source=copy_web">https://www.bilibili.com/video/BV1jR4y147aW?share_source=copy_web</a></p><p>一、涵盖技术</p><ul><li><p><input checked="" disabled="" type="checkbox">  全局风浪</p></li><li><p><input checked="" disabled="" type="checkbox">  风模拟</p><ol><li>弯曲</li><li>在世界空间中计算弯曲的角度</li><li>必须在模型空间中实际进行弯曲计算，避免旋转对齐造成的影响</li><li>也就是说在世界空间中旋转物体，物体始终朝向一个方向弯曲，不会改变；不然会跟着旋转弯向不同的方向</li><li>单个物体的Pivot不会变，所以没有问题，多个模型合并后的Pivot在整个合并后的中心，不在单个物体脚时下，需要对模型进行特殊处理（将单个物体的Pivot提前计算到UV通道中去）</li><li>颤动</li><li>旋转</li></ol></li><li><p><input checked="" disabled="" type="checkbox">  地表颜色融合</p></li><li><p><input checked="" disabled="" type="checkbox">  可交互</p><ul><li><input checked="" disabled="" type="checkbox"> Mesh交互</li><li><input checked="" disabled="" type="checkbox"> Trail交互</li><li><input checked="" disabled="" type="checkbox"> Particles交互</li><li><input checked="" disabled="" type="checkbox"> LineRender交互</li></ul><p>camera orthographicSize 为 half 宽度，1代表2米的正方体</p><p>假设RT大小为 512x512 则代表着： 1米用256个像素去表示</p><p>bounds 的 extend 是从中心点向 center 外计算的，是总共大小 size 的一半</p></li><li><p><input checked="" disabled="" type="checkbox">  随机颜色控制</p><ul><li><input checked="" disabled="" type="checkbox"> Mesh 控制</li><li><input disabled="" type="checkbox"> Trail 控制</li><li><input disabled="" type="checkbox"> Particle 控制</li><li><input disabled="" type="checkbox"> LineRender控制</li></ul></li><li><p><input checked="" disabled="" type="checkbox">  细节控制（ClipThreshold、Size)</p><p>  //Global Clip 0代表不变，1代表完全裁剪</p><p>  //Global Size 0代表不变，1代表完全去除</p><ul><li><input checked="" disabled="" type="checkbox"> Mesh 控制</li><li><input disabled="" type="checkbox"> Trail 控制</li><li><input disabled="" type="checkbox"> Particle 控制</li><li><input disabled="" type="checkbox"> LineRender控制</li></ul></li><li><p><input checked="" disabled="" type="checkbox">  透视矫正</p></li><li><p><input checked="" disabled="" type="checkbox">  距离衰减</p></li><li><p><input checked="" disabled="" type="checkbox">  透射表现</p></li><li><p><input checked="" disabled="" type="checkbox">  草摆放工具</p></li><li><p><input disabled="" type="checkbox">  GPU实例化 + Cell裁剪优化</p></li><li><p><input checked="" disabled="" type="checkbox">  积雪（可使用颜色控制实现）</p></li><li><p><input checked="" disabled="" type="checkbox">  燃烧（可使用细节控制+颜色控制实现）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> DemoGallery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity中实现PS的混合效果</title>
      <link href="/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/unityblend/unity-zhong-shi-xian-ps-de-hun-he-xiao-guo/"/>
      <url>/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/unityblend/unity-zhong-shi-xian-ps-de-hun-he-xiao-guo/</url>
      
        <content type="html"><![CDATA[<p>PS 中的图层效果在ASE 中的对应的精确实现</p><p><a href="http://wiki.amplify.pt/index.php?title=Unity_Products:Amplify_Shader_Editor/Blend_Operations">http://wiki.amplify.pt/index.php?title=Unity_Products:Amplify_Shader_Editor/Blend_Operations</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211020144313761.png" alt="image-20211020144313761" style="zoom:80%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029184638792.png" alt="image-20211029184638792" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029184647030.png" alt="image-20211029184647030" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> UnityBlend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取屏幕坐标</title>
      <link href="/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/huo-qu-ping-mu-zuo-biao/huo-qu-ping-mu-zuo-biao/"/>
      <url>/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/huo-qu-ping-mu-zuo-biao/huo-qu-ping-mu-zuo-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="获取屏幕坐标"><a href="#获取屏幕坐标" class="headerlink" title="获取屏幕坐标"></a>获取屏幕坐标</h1><h3 id="SV-POSITION-语义获取"><a href="#SV-POSITION-语义获取" class="headerlink" title="SV_POSITION 语义获取"></a>SV_POSITION 语义获取</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183714526.png" alt="image-20211029183714526" style="zoom:80%;"> <p>在 片元着色器中的 SV_Positon, x，y 表示代表屏幕像素，z代表非线性的深度[0,1]，w坐标视空间下的 z 坐标的绝对值，是正数</p><h3 id="VPOS-语义获取"><a href="#VPOS-语义获取" class="headerlink" title="VPOS 语义获取"></a>VPOS 语义获取</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183722863.png" alt="image-20211029183722863" style="zoom:80%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183958183.png" alt="image-20211029183958183"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029184005127.png" alt="image-20211029184005127"></p><h3 id="ComputeScreenPos-方式获取"><a href="#ComputeScreenPos-方式获取" class="headerlink" title="ComputeScreenPos 方式获取"></a>ComputeScreenPos 方式获取</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183731703.png" alt="image-20211029183731703" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183758678.png" alt="image-20211029183758678" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183822488.png" alt="image-20211029183822488" style="zoom:80%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029184142849.png" alt="image-20211029184142849"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029184148741.png" alt="image-20211029184148741"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 获取屏幕坐标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从深度图重建世界坐标</title>
      <link href="/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/cong-shen-du-tu-chong-jian-shi-jie-zuo-biao/cong-shen-du-tu-chong-jian-shi-jie-zuo-biao/"/>
      <url>/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/cong-shen-du-tu-chong-jian-shi-jie-zuo-biao/cong-shen-du-tu-chong-jian-shi-jie-zuo-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="一、从深度图重建世界坐标"><a href="#一、从深度图重建世界坐标" class="headerlink" title="一、从深度图重建世界坐标"></a>一、从深度图重建世界坐标</h1><h3 id="1-1-从-NDC-重建、在世界空间中重建"><a href="#1-1-从-NDC-重建、在世界空间中重建" class="headerlink" title="1.1 从 NDC 重建、在世界空间中重建"></a>1.1 从 NDC 重建、在世界空间中重建</h3><p><a href="https://zhuanlan.zhihu.com/p/92315967">https://zhuanlan.zhihu.com/p/92315967</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029181934081.png" alt="image-20211029181934081" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029181942318.png" alt="image-20211029181942318" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182009054.png" alt="image-20211029182009054" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182022381.png" alt="image-20211029182022381" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182034664.png" alt="image-20211029182034664" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182048549.png" alt="image-20211029182048549" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182108920.png" alt="image-20211029182108920" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182121096.png" alt="image-20211029182121096" style="zoom:80%;"> <h3 id="1-2-屏幕射线插值方式重建世界坐标"><a href="#1-2-屏幕射线插值方式重建世界坐标" class="headerlink" title="1.2 屏幕射线插值方式重建世界坐标"></a>1.2 屏幕射线插值方式重建世界坐标</h3><p><a href="https://www.jianshu.com/p/3f3a3911a824">https://www.jianshu.com/p/3f3a3911a824</a></p><p>这种方式的重建，可以参考Secrets of CryENGINE 3 Graphics Technology这个CryTech 2011年的PPT。借用一张图：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182829614.png" alt="image-20211029182829614" style="zoom:80%;"> <p>然后偶再画个平面的图：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182856277.png" alt="image-20211029182856277" style="zoom:80%;"> <p>上图中，A为相机位置，G为空间中我们要重建的一点，那么该点的世界坐标为A（worldPos） + 向量AG，我们要做的就是求得向量AG即可。根据三角形相似的原理，三角形AGH相似于三角形AFC，则得到AH / AC = AG / AF。由于三角形相似就是比例关系，所以我们可以把AH / AC看做01区间的比值，那么AC就相当于远裁剪面距离，即为1，AH就是我们深度图采样后变换到01区间的深度值，即Linear01Depth的结果d。那么，AG = AF * d。所以下一步就是求AF，即求出相机到屏幕空间每个像素点对应的射线方向。看到上面的立体图，其实我们可以根据相机的各种参数，求得视锥体对应四个边界射线的值，这个操作在vertex阶段进行，由于我们的后处理实际上就是渲染了一个Quad，上下左右四个顶点，把这个射线传递给pixel阶段时，就会自动进行插值计算，也就是说在顶点阶段的方向值到pixel阶段就变成了逐像素的射线方向。</p><p>那么我们要求的其实就相当于AB这条向量的值，以上下平面为例，三维向量只比二维多一个维度，我们已知远裁剪面距离F，相机的三个方向（相机transform.forward，.right，.up），AB = AC + CB，|BC| = tan(0.5fov) * |AC|，|AC| = Far，AC = transorm.forward * Far，CB = transform.up * tan(0.5fov) * Far。</p><p>我直接使用了远裁剪面对应的位置计算了三个方向向量，进而组合得到最终四个角的向量。用远裁剪面的计算代码比较简单（恩，我懒），不过《ShaderLab入门精要》中使用的是近裁剪面+比例计算，不确定是否有什么考虑（比如精度，没有测出来，如果有大佬知道，还望不吝赐教）。</p><p>shader代码如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182921974.png" alt="image-20211029182921974" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182933590.png" alt="image-20211029182933590" style="zoom:80%;"> <p>C#代码如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182950558.png" alt="image-20211029182950558" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183002341.png" alt="image-20211029183002341" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183022334.png" alt="image-20211029183022334" style="zoom:80%;"> <h3 id="1-2-1-屏幕射线插值方式重建视空间坐标"><a href="#1-2-1-屏幕射线插值方式重建视空间坐标" class="headerlink" title="1.2.1 屏幕射线插值方式重建视空间坐标"></a>1.2.1 屏幕射线插值方式重建视空间坐标</h3><p>补充一条屏幕空间深度重建坐标的Tips。如果我们要求视空间的位置的话，有一种更简便并且性能更好的方式。这种方式与上面的屏幕射线插值的方式重建世界坐标的原理一致。只需要输入一个投影矩阵的逆矩阵，即在vertex阶段，从NDC坐标系的四个远裁剪面边界（+-1，+-1，1，1）乘以逆投影矩阵，得到视空间的四个远裁剪面坐标位置，然后除以齐次坐标转化到普通坐标下。这样的四个点的位置也就是视空间下从相机到该点的射线方向，经过插值到fragment阶段直接乘以01区间深度就得到了该像素点的视空间位置了。</p><p>那么就只有一个问题没有解决，在于应该如何获得NDC坐标系下的边界点。上面推导中提到过，在后处理阶段，实际上就是绘制了一个Quad，对应整个屏幕。这个Quad的四个边界点刚好对应屏幕的四个边界点，uv是（0,1）区间的，刚好对应屏幕空间，我们通过*2 - 1将其转化到（-1,1）区间就可以得到四个边界对应NDC坐标系下的xy坐标了。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183122686.png" alt="image-20211029183122686" style="zoom:80%;"> <p><strong>此处的InverseProjectionMatrix与上文中一样，也需要自己传入，因为在后处理阶段，内置矩阵已经被替换了。</strong></p><h3 id="1-3-证明世界坐标重建正确的方法"><a href="#1-3-证明世界坐标重建正确的方法" class="headerlink" title="1.3 证明世界坐标重建正确的方法"></a>1.3 证明世界坐标重建正确的方法</h3><p>k神方法</p><p><a href="https://github.com/keijiro/DepthInverseProjection">https://github.com/keijiro/DepthInverseProjection</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182315315.png" alt="image-20211029182315315" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182359614.png" alt="image-20211029182359614" style="zoom:67%;"> <p>其他方法</p><p><a href="https://www.jianshu.com/p/3f3a3911a824">https://www.jianshu.com/p/3f3a3911a824</a></p><p>首先，得先找到一种证明反推回世界空间位置正确的方法。这里，我在相机前摆放几个物体，尽量使之在世界坐标下的位置小于1，方便判定颜色如下图：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182601446.png" alt="image-20211029182601446" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182614103.png" alt="image-20211029182614103" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029182627015.png" alt="image-20211029182627015" style="zoom:80%;"> <h1 id="二、一些重建世界坐标的代码"><a href="#二、一些重建世界坐标的代码" class="headerlink" title="二、一些重建世界坐标的代码"></a>二、一些重建世界坐标的代码</h1><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">//Reconstruct view-space position from depth.</span>float3 <span class="token function">ReconstructViewPos</span><span class="token punctuation">(</span>float4 screenPos<span class="token punctuation">,</span> float3 viewDir<span class="token punctuation">,</span> SceneDepth sceneDepth<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">UNITY_REVERSED_Z</span></span>        real rawDepth <span class="token operator">=</span> sceneDepth<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>        <span class="token comment">// Adjust z to match NDC for OpenGL</span>        real rawDepth <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span>UNITY_NEAR_CLIP_VALUE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> sceneDepth<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ORTHOGRAPHIC_SUPPORT<span class="token punctuation">)</span></span></span>        <span class="token comment">//View to world position</span>        float4 viewPos <span class="token operator">=</span> <span class="token function">float4</span><span class="token punctuation">(</span><span class="token punctuation">(</span>screenPos<span class="token punctuation">.</span>xy <span class="token operator">/</span> screenPos<span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">-</span> <span class="token number">1.0</span><span class="token punctuation">,</span> rawDepth<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        float4x4 viewToWorld <span class="token operator">=</span> UNITY_MATRIX_I_VP<span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">UNITY_REVERSED_Z </span><span class="token comment">//Wrecked since 7.3.1 "fix" and causes warping, invert second row https://issuetracker.unity3d.com/issues/shadergraph-inverse-view-projection-transformation-matrix-is-not-the-inverse-of-view-projection-transformation-matrix</span></span>            <span class="token comment">//Commit https://github.com/Unity-Technologies/Graphics/pull/374/files</span>            viewToWorld<span class="token punctuation">.</span>_12_22_32_42 <span class="token operator">=</span> <span class="token operator">-</span>viewToWorld<span class="token punctuation">.</span>_12_22_32_42<span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        float4 viewWorld <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>viewToWorld<span class="token punctuation">,</span> viewPos<span class="token punctuation">)</span><span class="token punctuation">;</span>        float3 viewWorldPos <span class="token operator">=</span> viewWorld<span class="token punctuation">.</span>xyz <span class="token operator">/</span> viewWorld<span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token comment">//Projection to world position</span>    float3 camPos <span class="token operator">=</span> _WorldSpaceCameraPos<span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>    float3 worldPos <span class="token operator">=</span> sceneDepth<span class="token punctuation">.</span>eye <span class="token operator">*</span> <span class="token punctuation">(</span>viewDir <span class="token operator">/</span> screenPos<span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token operator">-</span> camPos<span class="token punctuation">;</span>    float3 perspWorldPos <span class="token operator">=</span> <span class="token operator">-</span>worldPos<span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ORTHOGRAPHIC_SUPPORT<span class="token punctuation">)</span></span></span>        <span class="token keyword">return</span> <span class="token function">lerp</span><span class="token punctuation">(</span>perspWorldPos<span class="token punctuation">,</span> viewWorldPos<span class="token punctuation">,</span> unity_OrthoParams<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>        <span class="token keyword">return</span> perspWorldPos<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> <span class="token function">lerp</span><span class="token punctuation">(</span>perspWorldPos<span class="token punctuation">,</span> viewWorldPos<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SceneDepth <span class="token function">SampleDepth</span><span class="token punctuation">(</span>float4 screenPos<span class="token punctuation">)</span><span class="token punctuation">{</span>    SceneDepth depth <span class="token operator">=</span> <span class="token punctuation">(</span>SceneDepth<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_DISABLE_DEPTH_TEX</span></span>        screenPos<span class="token punctuation">.</span>xyz <span class="token operator">/=</span> screenPos<span class="token punctuation">.</span>w<span class="token punctuation">;</span>                depth<span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token function">SampleSceneDepth</span><span class="token punctuation">(</span>screenPos<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>        depth<span class="token punctuation">.</span>eye <span class="token operator">=</span> <span class="token function">LinearEyeDepth</span><span class="token punctuation">(</span>depth<span class="token punctuation">.</span>raw<span class="token punctuation">,</span> _ZBufferParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        depth<span class="token punctuation">.</span>linear01 <span class="token operator">=</span> <span class="token function">LinearDepth</span><span class="token punctuation">(</span>screenPos<span class="token punctuation">.</span>z<span class="token punctuation">,</span> depth<span class="token punctuation">.</span>eye<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>        depth<span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        depth<span class="token punctuation">.</span>eye <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        depth<span class="token punctuation">.</span>linear01 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token keyword">return</span> depth<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029183312317.png" alt="image-20211029183312317" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 深度图重建世界坐标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性深度</title>
      <link href="/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/xian-xing-shen-du/xian-xing-shen-du/"/>
      <url>/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/xian-xing-shen-du/xian-xing-shen-du/</url>
      
        <content type="html"><![CDATA[<h1 id="线性深度"><a href="#线性深度" class="headerlink" title="线性深度"></a>线性深度</h1><p>LinearEyeDepth 负责把深度纹理的采样结果转换到视角空间下的深度值</p><p>Linear01Depth 这会返回一个范围在视角空间下的【0,1】的线性深度值</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029175145080.png" alt="image-20211029175145080"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029175157242.png" alt="image-20211029175157242"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029175205372.png" alt="image-20211029175205372"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029175214963.png" alt="image-20211029175214963"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029175223664.png" alt="image-20211029175223664"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 线性深度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shader真机调试</title>
      <link href="/BloodSoul.github.io/2021/10/29/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/zhen-ji-diao-shi/shader-zhen-ji-diao-shi/"/>
      <url>/BloodSoul.github.io/2021/10/29/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/zhen-ji-diao-shi/shader-zhen-ji-diao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p><strong>渲染逆向工程：打造一台调试任意Android游戏的设备</strong></p><p><a href="https://zhuanlan.zhihu.com/p/100583752">https://zhuanlan.zhihu.com/p/100583752</a></p><p>CSV模型转换工具：</p><p>链接：<a href="https://pan.baidu.com/s/1ktY0INxI6fsS98GE2iVGmw,%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Ac5c6">https://pan.baidu.com/s/1ktY0INxI6fsS98GE2iVGmw,提取码：c5c6</a> </p><p>CSV模型转换工具源码地址：</p><p><a href="https://github.com/Alunice/TaTa">https://github.com/Alunice/TaTa</a></p><h1 id="二、RenderDoc"><a href="#二、RenderDoc" class="headerlink" title="二、RenderDoc"></a>二、RenderDoc</h1><p>官网文档 <a href="https://renderdoc.org/docs/window/event_browser.html">https://renderdoc.org/docs/window/event_browser.html</a></p><h1 id="三、华为官方图形调试器（魔改的RenderDoc）"><a href="#三、华为官方图形调试器（魔改的RenderDoc）" class="headerlink" title="三、华为官方图形调试器（魔改的RenderDoc）"></a>三、华为官方图形调试器（魔改的RenderDoc）</h1><p> 官网</p><p><a href="https://developer.huawei.com/consumer/cn/huawei-graphics-profiler/">https://developer.huawei.com/consumer/cn/huawei-graphics-profiler/</a></p><p> 文档</p><p><a href="https://developer.huawei.com/consumer/cn/doc/development/Tools-Guides/overview-0000001050741459">https://developer.huawei.com/consumer/cn/doc/development/Tools-Guides/overview-0000001050741459</a></p><p>在调试真机时，需要在 Tools — settings — Android 填写 jdk、sdk</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029173232789.png" alt="image-20211029173232789" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029173315923.png" alt="image-20211029173315923" style="zoom:80%;"> <h1 id="四、Intel-GPA"><a href="#四、Intel-GPA" class="headerlink" title="四、Intel GPA"></a>四、Intel GPA</h1><p>Intel GPA 可以在 Android 上分析渲染流程</p><p><a href="https://zhuanlan.zhihu.com/p/68741433">https://zhuanlan.zhihu.com/p/68741433</a></p><p>GPA下载地址:</p><p><a href="https://software.intel.com/content/www/us/en/develop/tools/graphics-performance-analyzers.html">https://software.intel.com/content/www/us/en/develop/tools/graphics-performance-analyzers.html</a></p><p>GPA截帧教程:</p><p><a href="https://zhuanlan.zhihu.com/p/68741433">https://zhuanlan.zhihu.com/p/68741433</a></p><p>竞品游戏模型破解流程：</p><p><a href="https://blog.csdn.net/weixin_42198546/article/details/110387643#comments_15889636">https://blog.csdn.net/weixin_42198546/article/details/110387643#comments_15889636</a></p><p>GPA 模拟器抓帧：</p><p><a href="https://zhuanlan.zhihu.com/p/68741433">https://zhuanlan.zhihu.com/p/68741433</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029174130369.png" alt="image-20211029174130369" style="zoom: 50%;"> <p>GPA截下来模型，不带UV，所以改用ninjaripper用来提取游戏内的模型</p><p><a href="https://zhuanlan.zhihu.com/p/76979718">https://zhuanlan.zhihu.com/p/76979718</a> </p><p>ninja 官网教程</p><p><a href="https://cgig.ru/2012/10/ninja-ripper/">https://cgig.ru/2012/10/ninja-ripper/</a></p><p>ninja ripper 抓夜神模拟器使用方式</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029174411978.png" alt="image-20211029174411978" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029174431488.png" alt="image-20211029174431488" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029174445329.png" alt="image-20211029174445329" style="zoom:67%;"> <h1 id="五、Snapdragon-Profiler"><a href="#五、Snapdragon-Profiler" class="headerlink" title="五、Snapdragon Profiler"></a>五、Snapdragon Profiler</h1><p> AdrenoProfiler替代品，支持 Vulkan <a href="https://blog.csdn.net/weixin_38498942/article/details/89333185">https://blog.csdn.net/weixin_38498942/article/details/89333185</a> </p><h1 id="六、Mali-Graphics-Debugger（ARM®-Mali™-GPU的Android）"><a href="#六、Mali-Graphics-Debugger（ARM®-Mali™-GPU的Android）" class="headerlink" title="六、Mali Graphics Debugger（ARM® Mali™ GPU的Android）"></a>六、Mali Graphics Debugger（ARM® Mali™ GPU的Android）</h1><p><a href="https://gameinstitute.qq.com/community/detail/103636">https://gameinstitute.qq.com/community/detail/103636</a></p><h1 id="七、GAPID-OpenGL-ES-和-Vulkan"><a href="#七、GAPID-OpenGL-ES-和-Vulkan" class="headerlink" title="七、GAPID ( OpenGL ES 和 Vulkan)"></a>七、GAPID ( OpenGL ES 和 Vulkan)</h1><p>GAPID (Graphics API Debugger)是 Google 的一款开源且跨平台的图形开发调试工具，用于记录和检查应用程序对图形驱动程序的调用，支持 OpenGL ES 和 Vulkan 调试。</p><p><a href="https://www.zhihu.com/search?type=content&amp;q=%E5%AE%89%E5%8D%93GPU%E8%B0%83%E8%AF%95">https://www.zhihu.com/search?type=content&amp;q=%E5%AE%89%E5%8D%93GPU%E8%B0%83%E8%AF%95</a></p><h1 id="八、Xcode"><a href="#八、Xcode" class="headerlink" title="八、Xcode"></a>八、Xcode</h1><h1 id="九、Arm-Mobile-Studio"><a href="#九、Arm-Mobile-Studio" class="headerlink" title="九、Arm Mobile Studio"></a>九、Arm Mobile Studio</h1><p>GDC 上的介绍：</p><p> <a href="https://www.gdcvault.com/play/1026742/Arm-Mobile-Studio-Providing-Insights">https://www.gdcvault.com/play/1026742/Arm-Mobile-Studio-Providing-Insights</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112114137272.png" alt="image-20211112114137272" style="zoom:67%;"> <p>官网：</p><p><a href="https://developer.arm.com/tools-and-software/graphics-and-gaming/arm-mobile-studio">https://developer.arm.com/tools-and-software/graphics-and-gaming/arm-mobile-studio</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112114250837.png" alt="image-20211112114250837" style="zoom:67%;"> <p>支持的手机设备：</p><p><a href="https://developer.arm.com/mobile-studio/devices">https://developer.arm.com/mobile-studio/devices</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112114348397.png" alt="image-20211112114348397" style="zoom: 50%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112114413430.png" alt="image-20211112114413430" style="zoom:50%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分析工具 </tag>
            
            <tag> 真机调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zbrush学习</title>
      <link href="/BloodSoul.github.io/2021/10/29/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/jian-mo-gong-ju/fei-cheng-xu-hua-gong-ju/zbrush/zbrush-xue-xi/"/>
      <url>/BloodSoul.github.io/2021/10/29/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/jian-mo-gong-ju/fei-cheng-xu-hua-gong-ju/zbrush/zbrush-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="ZB-官网教程"><a href="#ZB-官网教程" class="headerlink" title="ZB 官网教程"></a>ZB 官网教程</h1><p><a href="https://zbrush.mairuan.com/jichu/zbrush-eisd.html">https://zbrush.mairuan.com/jichu/zbrush-eisd.html</a></p><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><p>ZB 新建项目需要从灯箱中选择一个双击创建</p><p>保存工程在顶部中间的 File 中</p><h3 id="ZB-视角移动"><a href="#ZB-视角移动" class="headerlink" title="ZB 视角移动"></a>ZB 视角移动</h3><p><a href="https://zbrush.mairuan.com/jichu/zb-ydysf.html">https://zbrush.mairuan.com/jichu/zb-ydysf.html</a></p><p>平移：鼠标左键点击空白处进行旋转，按住alt+ 鼠标左键进行</p><p>缩放：平移的过程中取消alt键</p><p>缩放：Crtl + 鼠标右键 也可实现</p><h3 id="ZB-细分模型"><a href="#ZB-细分模型" class="headerlink" title="ZB 细分模型"></a>ZB 细分模型</h3><p><a href="https://zbrush.mairuan.com/jinjie/zbrush-4r7-moxing-xifen.html">https://zbrush.mairuan.com/jinjie/zbrush-4r7-moxing-xifen.html</a></p><p>Geometry — Divide</p><p>Crtl + D 增加一级细分</p><p>Shift + D 减少一级细分</p><h3 id="ZB-删除物体"><a href="#ZB-删除物体" class="headerlink" title="ZB 删除物体"></a>ZB 删除物体</h3><p>Zbrush 4R7中如何添加和删除一个SubTool</p><p> <a href="https://zbrush.mairuan.com/jichu/tianjia-shanchu-SubTool.html">https://zbrush.mairuan.com/jichu/tianjia-shanchu-SubTool.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172748930.png" alt="image-20211029172748930" style="zoom: 80%;"> <p>ZB 如何删除模型部分</p><p><a href="https://zbrush.mairuan.com/changjian/shandiao-bufen.html">https://zbrush.mairuan.com/changjian/shandiao-bufen.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172832146.png" alt="image-20211029172832146" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> ArtResource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 角色 </tag>
            
            <tag> 3D </tag>
            
            <tag> 模型 </tag>
            
            <tag> 建模工具 </tag>
            
            <tag> 非程序化工具 </tag>
            
            <tag> Zbrush </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maya学习</title>
      <link href="/BloodSoul.github.io/2021/10/29/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/jian-mo-gong-ju/fei-cheng-xu-hua-gong-ju/maya/maya-xue-xi/"/>
      <url>/BloodSoul.github.io/2021/10/29/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/jian-mo-gong-ju/fei-cheng-xu-hua-gong-ju/maya/maya-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="设置-UI-大小"><a href="#设置-UI-大小" class="headerlink" title="设置 UI 大小"></a>设置 UI 大小</h1><p>窗口–首选项–界面–DPI</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172333953.png" alt="image-20211029172333953" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172343971.png" alt="image-20211029172343971" style="zoom:80%;"> <h1 id="显示统计信息"><a href="#显示统计信息" class="headerlink" title="显示统计信息"></a>显示统计信息</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172404289.png" alt="image-20211029172404289" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172413143.png" alt="image-20211029172413143" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> ArtResource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 角色 </tag>
            
            <tag> 3D </tag>
            
            <tag> 模型 </tag>
            
            <tag> 建模工具 </tag>
            
            <tag> 非程序化工具 </tag>
            
            <tag> Maya </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高度图转法线</title>
      <link href="/BloodSoul.github.io/2021/10/25/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/gao-du-tu-zhuan-fa-xian/gao-du-tu-zhuan-fa-xian/"/>
      <url>/BloodSoul.github.io/2021/10/25/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/gao-du-tu-zhuan-fa-xian/gao-du-tu-zhuan-fa-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="有限差分—-前向差异法"><a href="#有限差分—-前向差异法" class="headerlink" title="有限差分—-前向差异法"></a>有限差分—-前向差异法</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194313147.png" alt="image-20211025194313147" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194325049.png" alt="image-20211025194325049" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194342910.png" alt="image-20211025194342910" style="zoom:80%;"> <h3 id="在高度图中使用（u方向）"><a href="#在高度图中使用（u方向）" class="headerlink" title="在高度图中使用（u方向）"></a>在高度图中使用（u方向）</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194439110.png" alt="image-20211025194439110" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194450296.png" alt="image-20211025194450296" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194504494.png" alt="image-20211025194504494" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194517918.png" alt="image-20211025194517918" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194533518.png" alt="image-20211025194533518" style="zoom:80%;"> <h3 id="中心差法"><a href="#中心差法" class="headerlink" title="中心差法"></a>中心差法</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194559118.png" alt="image-20211025194559118" style="zoom:80%;"> <h3 id="同时使用高度图的-U-和-V"><a href="#同时使用高度图的-U-和-V" class="headerlink" title="同时使用高度图的 U 和 V"></a>同时使用高度图的 U 和 V</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194634207.png" alt="image-20211025194634207" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194645518.png" alt="image-20211025194645518" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194656695.png" alt="image-20211025194656695" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194709688.png" alt="image-20211025194709688" style="zoom:80%;"> <p><strong>叉乘简写</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194738328.png" alt="image-20211025194738328" style="zoom:80%;"> <p>对于高度图如下，可以直接写出，而不必进行计算</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194810031.png" alt="image-20211025194810031" style="zoom:80%;"> <p><a href="https://zhuanlan.zhihu.com/p/143069698">https://zhuanlan.zhihu.com/p/143069698</a></p><h3 id="高度图（灰度图）转法线贴图"><a href="#高度图（灰度图）转法线贴图" class="headerlink" title="高度图（灰度图）转法线贴图"></a>高度图（灰度图）转法线贴图</h3><p>默认高度图如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025195327077.png" alt="image-20211025195327077" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025195426476.png" alt="image-20211025195426476" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025195444540.png" alt="image-20211025195444540" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 高度图转法线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三平面映射</title>
      <link href="/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/xuan-ran-ji-qiao/san-ping-mian-ying-she/san-ping-mian-ying-she/"/>
      <url>/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/xuan-ran-ji-qiao/san-ping-mian-ying-she/san-ping-mian-ying-she/</url>
      
        <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>三平面映射（任意表面纹理化）：使用物体坐标的的 xy、zy、yz 三个平面视作UV，进行贴图采样的方法。</p><p>因为不受物体本身 UV 的影响，可以用在无法获取 UV，或者物体本地的 UV 不适用的情况下。</p><h1 id="二、映射普通贴图"><a href="#二、映射普通贴图" class="headerlink" title="二、映射普通贴图"></a>二、映射普通贴图</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182414872.png" alt="image-20211025182414872" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182431003.png" alt="image-20211025182431003" style="zoom:80%;"> <p>使用YZ平面进行映射时，纹理会旋转90度，需要使用 <strong>ZY</strong> 进行校正</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182518387.png" alt="image-20211025182518387" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182534331.png" alt="image-20211025182534331" style="zoom:80%;"> <p><strong>Tip：</strong> 使用法线作为三平面混合因子时，会有一半贴图镜像显示如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182658641.png" alt="image-20211025182658641" style="zoom:80%;"> <p><strong>另外三个面全镜像</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182718929.png" alt="image-20211025182718929" style="zoom: 67%;"> <p><strong>纠正方法：</strong></p><p>如果是X映射，那就是normal.x为负数。同样，对于Y投影，当normal.y为负时。Z则相反。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025182834028.png" alt="image-20211025182834028" style="zoom:80%;"> <h1 id="三、映射法线贴图"><a href="#三、映射法线贴图" class="headerlink" title="三、映射法线贴图"></a>三、映射法线贴图</h1><p>如果使用的是世界坐标，和世界空间下的法线贴图，没有问题</p><p>但是如果使用世界坐标，和切线空间下的法线贴图，则需要如下操作：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025183008194.png" alt="image-20211025183008194" style="zoom:80%;"> <p><strong>Step1</strong> ：需要将映射的法线（现在在切线空间）转换到世界空间中：切线空间定义 <strong>Z</strong> <strong>轴远离表面</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025183632284.png" alt="image-20211025183632284" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025183711818.png" alt="image-20211025183711818" style="zoom:80%;"> <p><strong>Step2</strong> ：防止镜像</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025183740426.png" alt="image-20211025183740426" style="zoom:80%;"> <p><strong>Step3</strong> ：翻转法线向上方向</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025183811523.png" alt="image-20211025183811523" style="zoom:80%;"> <h4 id="平面映射的法线与物体本身法线混合"><a href="#平面映射的法线与物体本身法线混合" class="headerlink" title="平面映射的法线与物体本身法线混合"></a><strong>平面映射的法线与物体本身法线混合</strong></h4><p><strong>Step1</strong> ：在没有切线到世界空间的转换矩阵时，可以使用 <strong>BlendNormlas</strong>（泛白）在切线空间进行混合</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025184257596.png" alt="image-20211025184257596" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025184311908.png" alt="image-20211025184311908" style="zoom:80%;"> <p><strong>Step2</strong> ：去掉 <strong>z</strong> <strong>方向的校正</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025184353627.png" alt="image-20211025184353627" style="zoom:80%;"> <p>参考：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxMzgzMzQxOA==&amp;mid=2247486039&amp;idx=1&amp;sn=4f0cfcce0d1b98f092a237452ab4d055&amp;chksm=97b189f2a0c600e4d819ce004c305a9eb174888c0875aa0782900e14373904c33a9dafeead5e&amp;scene=178&amp;cur_album_id=1745807625885171715#rd">https://mp.weixin.qq.com/s?__biz=MzIxMzgzMzQxOA==&amp;mid=2247486039&amp;idx=1&amp;sn=4f0cfcce0d1b98f092a237452ab4d055&amp;chksm=97b189f2a0c600e4d819ce004c305a9eb174888c0875aa0782900e14373904c33a9dafeead5e&amp;scene=178&amp;cur_album_id=1745807625885171715#rd</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染技巧 </tag>
            
            <tag> 三平面映射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>曲面细分着色器</title>
      <link href="/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/qu-mian-xi-fen-zhao-se-qi/qu-mian-xi-fen-zhao-se-qi/"/>
      <url>/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/qu-mian-xi-fen-zhao-se-qi/qu-mian-xi-fen-zhao-se-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>曲面细分是将事物切成较小部分的艺术。可以把一条边分成多条边，把一个三角形，分多个子三角形</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025140911874.png" alt="image-20211025140911874" style="zoom:80%;"> <p>流程为：Hull 程序和常量方法并行运行确定细分规则 -&gt; 硬件进行细分 -&gt; Domain 程序对细分后的数据进行组合（比如：法线计算、UV计算、坐标计算）</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025141255616.png" alt="image-20211025141255616" style="zoom:80%;"> <h1 id="二、使用规则"><a href="#二、使用规则" class="headerlink" title="二、使用规则"></a>二、使用规则</h1><h4 id="a、渲染限制"><a href="#a、渲染限制" class="headerlink" title="a、渲染限制"></a>a、渲染限制</h4><p>渲染目标最低为 4.6 ：target 4.6</p><p>细分因子最多只能有 64 个细分级别</p><p>Unity 无法同时支持实例化和曲面细分</p><h4 id="b、定义-Hull-程序"><a href="#b、定义-Hull-程序" class="headerlink" title="b、定义 Hull 程序"></a>b、定义 Hull 程序</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">hull MyHullProgram</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="c、定义-Hull-程序控制规则"><a href="#c、定义-Hull-程序控制规则" class="headerlink" title="c、定义 Hull 程序控制规则"></a>c、定义 Hull 程序控制规则</h4><p>SV_OutputControlPointID 为控制点（顶点）定义，每个顶点会调用一次 Hull 程序，并传入控制点 id</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token punctuation">[</span><span class="token function">UNITY_domain</span><span class="token punctuation">(</span><span class="token string">"tri"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//定义处理的数据类型，完整的类型有三角形、四边形、等直线。  unity 只支持三角形</span><span class="token punctuation">[</span><span class="token function">UNITY_partitioning</span><span class="token punctuation">(</span><span class="token string">"fractional_odd"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//告知GPU应该如何分割补丁 integer pow2 fractional_even fractional_odd</span><span class="token punctuation">[</span><span class="token function">UNITY_outputcontrolpoints</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//定义每个 patch 输出三个控制点</span><span class="token punctuation">[</span><span class="token function">UNITY_outputtopology</span><span class="token punctuation">(</span><span class="token string">"triangle_cw"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//告知GPU图元的创建规则  point line triangle_cw triangle_ccw</span><span class="token punctuation">[</span><span class="token function">UNITY_patchconstantfunc</span><span class="token punctuation">(</span><span class="token string">"MyPatchConstantFunc"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//定义每个 patch 分割的具体规则，需要定义一个同名方法</span>v2hd <span class="token function">MyHullProgram</span><span class="token punctuation">(</span>InputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">,</span> <span class="token keyword">uint</span> id<span class="token operator">:</span> SV_OutputControlPointID<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">patch</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//细分规则函数，与 hull 程序并行运行</span>TessllationFactors <span class="token function">MyPatchConstantFunc</span><span class="token punctuation">(</span>InputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TessllationFactors <span class="token keyword">output</span> <span class="token operator">=</span> <span class="token punctuation">(</span>TessllationFactors<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>inside <span class="token operator">=</span> _InsideTesselatLevel<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">output</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d、定义-Domain-程序"><a href="#d、定义-Domain-程序" class="headerlink" title="d、定义 Domain 程序"></a>d、定义 Domain 程序</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">domain MyDomainProgram</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="e、定义-Domain-程序规则"><a href="#e、定义-Domain-程序规则" class="headerlink" title="e、定义 Domain 程序规则"></a>e、定义 Domain 程序规则</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// SV_DomainLocation 为重心坐标定义，可以简单理解为权重</span><span class="token punctuation">[</span><span class="token function">UNITY_domain</span><span class="token punctuation">(</span><span class="token string">"tri"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//指定数据处理类型为三角形</span>d2g <span class="token function">MyDomainProgram</span><span class="token punctuation">(</span>TessllationFactors factors<span class="token punctuation">,</span> OutputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">,</span> float3 barycentricPos<span class="token operator">:</span> SV_DomainLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    d2g <span class="token keyword">output</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d2g<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>        float4 postionOS <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>    half2 uv <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>    half3 normalOS <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>        <span class="token keyword">output</span><span class="token punctuation">.</span>positionCS <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>postionOS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>uv <span class="token operator">=</span> <span class="token function">TRANSFORM_TEX</span><span class="token punctuation">(</span>uv<span class="token punctuation">,</span> _MainTex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>positionWS <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>unity_ObjectToWorld<span class="token punctuation">,</span> postionOS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">output</span><span class="token punctuation">.</span>normalWS <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>unity_WorldToObject<span class="token punctuation">,</span> normalOS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">output</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025143759966.png" alt="image-20211025143759966" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025143821977.png" alt="image-20211025143821977" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025143844762.png" alt="image-20211025143844762" style="zoom:67%;"> <p><strong>完整代码：</strong></p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">Shader <span class="token string">"Custom/TessellationWireframeUnit"</span><span class="token punctuation">{</span>    Properties    <span class="token punctuation">{</span>        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Texture"</span><span class="token punctuation">,</span> <span class="token number">2</span>D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token function">_Roughness</span> <span class="token punctuation">(</span><span class="token string">"_Roughness"</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span>        <span class="token function">_SpecularColor</span> <span class="token punctuation">(</span><span class="token string">"_SpecularColor"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_FresnelPow</span> <span class="token punctuation">(</span><span class="token string">"_FresnelPow"</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token function">_FresnelColor</span> <span class="token punctuation">(</span><span class="token string">"_FresnelColor"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_WireframeSmooth</span> <span class="token punctuation">(</span><span class="token string">"_WireframeSmooth"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token function">_WireframeWidth</span> <span class="token punctuation">(</span><span class="token string">"_WireframeWidth"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token function">_WireframeColor</span> <span class="token punctuation">(</span><span class="token string">"_WireColor"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">[</span><span class="token function">Header</span><span class="token punctuation">(</span>Tessellation<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token function">_EdgeTesselatLevel</span> <span class="token punctuation">(</span><span class="token string">"_TesselatLevel"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token function">_InsideTesselatLevel</span> <span class="token punctuation">(</span><span class="token string">"_InsideTesselatLevel"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    SubShader    <span class="token punctuation">{</span>        Tags <span class="token punctuation">{</span> <span class="token string">"RenderType"</span> <span class="token operator">=</span> <span class="token string">"Opaque"</span> <span class="token punctuation">}</span>        LOD <span class="token number">100</span>                Pass        <span class="token punctuation">{</span>            CGPROGRAM                        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">target <span class="token number">4.6</span></span></span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">vertex vert</span></span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">hull MyHullProgram</span></span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">domain MyDomainProgram</span></span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">geometry MyGeometryProgram</span></span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">fragment frag</span></span>                        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"UnityCG.cginc"</span></span>                        <span class="token keyword">struct</span> <span class="token class-name">TessllationFactors</span>            <span class="token punctuation">{</span>                <span class="token keyword">float</span> edge<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">:</span> SV_TessFactor<span class="token punctuation">;</span>                <span class="token keyword">float</span> inside<span class="token operator">:</span> SV_InsideTessFactor<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token keyword">struct</span> <span class="token class-name">appdata</span>            <span class="token punctuation">{</span>                float4 postionOS<span class="token operator">:</span> POSITION<span class="token punctuation">;</span>                float2 uv<span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>                float3 normalOS<span class="token operator">:</span> NORMAL<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token comment">// vertex to hull/domain</span>            <span class="token keyword">struct</span> <span class="token class-name">v2hd</span>            <span class="token punctuation">{</span>                float4 postionOS<span class="token operator">:</span> INTERNALTESSPOS<span class="token punctuation">;</span>                float2 uv<span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>                float3 normalOS<span class="token operator">:</span> NORMAL<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token comment">//domain to geometry</span>            <span class="token keyword">struct</span> <span class="token class-name">d2g</span>            <span class="token punctuation">{</span>                float4 positionCS<span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>                float2 uv<span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>                float3 positionWS<span class="token operator">:</span> TEXCOORD1<span class="token punctuation">;</span>                float3 normalWS<span class="token operator">:</span> TEXCOORD2<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token comment">// geometry to fragment</span>            <span class="token keyword">struct</span> <span class="token class-name">g2f</span>            <span class="token punctuation">{</span>                float4 positionCS<span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>                float2 uv<span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>                float3 positionWS<span class="token operator">:</span> TEXCOORD1<span class="token punctuation">;</span>                float3 normalWS<span class="token operator">:</span> TEXCOORD2<span class="token punctuation">;</span>                float3 triangleBarycentric<span class="token operator">:</span> TEXCOORD3<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token keyword">sampler2D</span> _MainTex<span class="token punctuation">;</span> float4 _MainTex_ST<span class="token punctuation">;</span>            <span class="token keyword">half</span> _Roughness<span class="token punctuation">,</span> _FresnelPow<span class="token punctuation">;</span>            half4 _SpecularColor<span class="token punctuation">,</span> _FresnelColor<span class="token punctuation">;</span>            <span class="token keyword">half</span> _WireframeWidth<span class="token punctuation">,</span> _WireframeSmooth<span class="token punctuation">;</span>            half4 _WireframeColor<span class="token punctuation">;</span>            <span class="token keyword">half</span> _EdgeTesselatLevel<span class="token punctuation">,</span> _InsideTesselatLevel<span class="token punctuation">;</span>                                    g2f <span class="token function">InitG2fData</span><span class="token punctuation">(</span>d2g <span class="token keyword">input</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                g2f result <span class="token operator">=</span> <span class="token punctuation">(</span>g2f<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span>positionCS <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>positionCS<span class="token punctuation">;</span>                result<span class="token punctuation">.</span>uv <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>uv<span class="token punctuation">;</span>                result<span class="token punctuation">.</span>positionWS <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>positionWS<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                                    v2hd <span class="token function">vert</span><span class="token punctuation">(</span>appdata <span class="token keyword">input</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                v2hd <span class="token keyword">output</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v2hd<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>postionOS <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>postionOS<span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>uv <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>uv<span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>normalOS <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>normalOS<span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token keyword">output</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token punctuation">[</span><span class="token function">UNITY_domain</span><span class="token punctuation">(</span><span class="token string">"tri"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//unity 只支持三角形</span>            <span class="token punctuation">[</span><span class="token function">UNITY_partitioning</span><span class="token punctuation">(</span><span class="token string">"fractional_odd"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//integer pow2 fractional_even fractional_odd</span>            <span class="token punctuation">[</span><span class="token function">UNITY_outputcontrolpoints</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token punctuation">[</span><span class="token function">UNITY_outputtopology</span><span class="token punctuation">(</span><span class="token string">"triangle_cw"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">//point line triangle_cw triangle_ccw</span>            <span class="token punctuation">[</span><span class="token function">UNITY_patchconstantfunc</span><span class="token punctuation">(</span><span class="token string">"MyPatchConstantFunc"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            v2hd <span class="token function">MyHullProgram</span><span class="token punctuation">(</span>InputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">,</span> <span class="token keyword">uint</span> id<span class="token operator">:</span> SV_OutputControlPointID<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">patch</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        TessllationFactors <span class="token function">MyPatchConstantFunc</span><span class="token punctuation">(</span>InputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                TessllationFactors <span class="token keyword">output</span> <span class="token operator">=</span> <span class="token punctuation">(</span>TessllationFactors<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> _EdgeTesselatLevel<span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>inside <span class="token operator">=</span> _InsideTesselatLevel<span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token keyword">output</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token punctuation">[</span><span class="token function">UNITY_domain</span><span class="token punctuation">(</span><span class="token string">"tri"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            d2g <span class="token function">MyDomainProgram</span><span class="token punctuation">(</span>TessllationFactors factors<span class="token punctuation">,</span> OutputPatch <span class="token operator">&lt;</span> v2hd<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token keyword">patch</span><span class="token punctuation">,</span> float3 barycentricPos<span class="token operator">:</span> SV_DomainLocation<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                d2g <span class="token keyword">output</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d2g<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                                float4 postionOS <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>postionOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>                half2 uv <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uv <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>                half3 normalOS <span class="token operator">=</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">patch</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>normalOS <span class="token operator">*</span> barycentricPos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>                                <span class="token keyword">output</span><span class="token punctuation">.</span>positionCS <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>postionOS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>uv <span class="token operator">=</span> <span class="token function">TRANSFORM_TEX</span><span class="token punctuation">(</span>uv<span class="token punctuation">,</span> _MainTex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>positionWS <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>unity_ObjectToWorld<span class="token punctuation">,</span> postionOS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">output</span><span class="token punctuation">.</span>normalWS <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>unity_WorldToObject<span class="token punctuation">,</span> normalOS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token keyword">output</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token punctuation">[</span><span class="token function">maxvertexcount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">void</span> <span class="token function">MyGeometryProgram</span><span class="token punctuation">(</span>triangle d2g <span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">inout</span> TriangleStream <span class="token operator">&lt;</span> g2f <span class="token operator">&gt;</span> outStream<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                g2f output1<span class="token punctuation">,</span> output2<span class="token punctuation">,</span> output3<span class="token punctuation">;</span>                                half3 edge1 <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>positionWS <span class="token operator">-</span> <span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>positionWS<span class="token punctuation">)</span><span class="token punctuation">;</span>                half3 edge2 <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>positionWS <span class="token operator">-</span> <span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>positionWS<span class="token punctuation">)</span><span class="token punctuation">;</span>                half3 normalWS <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>edge1<span class="token punctuation">,</span> edge2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                output1 <span class="token operator">=</span> <span class="token function">InitG2fData</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output2 <span class="token operator">=</span> <span class="token function">InitG2fData</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output3 <span class="token operator">=</span> <span class="token function">InitG2fData</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                output1<span class="token punctuation">.</span>normalWS <span class="token operator">=</span> normalWS<span class="token punctuation">;</span>                output2<span class="token punctuation">.</span>normalWS <span class="token operator">=</span> normalWS<span class="token punctuation">;</span>                output3<span class="token punctuation">.</span>normalWS <span class="token operator">=</span> normalWS<span class="token punctuation">;</span>                                output1<span class="token punctuation">.</span>triangleBarycentric <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output2<span class="token punctuation">.</span>triangleBarycentric <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output3<span class="token punctuation">.</span>triangleBarycentric <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                outStream<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span><span class="token punctuation">;</span>                outStream<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token punctuation">;</span>                outStream<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>output3<span class="token punctuation">)</span><span class="token punctuation">;</span>                                outStream<span class="token punctuation">.</span><span class="token function">RestartStrip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        half4 <span class="token function">frag</span><span class="token punctuation">(</span>g2f <span class="token keyword">input</span><span class="token punctuation">)</span><span class="token operator">:</span> SV_Target            <span class="token punctuation">{</span>                half4 col <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> <span class="token keyword">input</span><span class="token punctuation">.</span>uv<span class="token punctuation">)</span><span class="token punctuation">;</span>                                half3 normalWS <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token keyword">input</span><span class="token punctuation">.</span>normalWS<span class="token punctuation">)</span><span class="token punctuation">;</span>                half3 viewDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceCameraPos<span class="token punctuation">.</span>xyz <span class="token operator">-</span> <span class="token keyword">input</span><span class="token punctuation">.</span>positionWS<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span>                half3 lightDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceLightPos0<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span>                half3 Hdir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>viewDir <span class="token operator">+</span> lightDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">half</span> NdotH <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>normalWS<span class="token punctuation">,</span> Hdir<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">half</span> NdotV <span class="token operator">=</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>normalWS<span class="token punctuation">,</span> viewDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">half</span> NdotL <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>normalWS<span class="token punctuation">,</span> lightDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                                half3 diffuseColor <span class="token operator">=</span> NdotL <span class="token operator">*</span> col<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>                                half3 specularColor <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">saturate</span><span class="token punctuation">(</span>NdotH<span class="token punctuation">)</span><span class="token punctuation">,</span> _Roughness<span class="token punctuation">)</span> <span class="token operator">*</span> _SpecularColor<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>                                half3 fresnelColor <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> NdotV<span class="token punctuation">)</span><span class="token punctuation">,</span> _FresnelPow<span class="token punctuation">)</span> <span class="token operator">*</span> _FresnelColor<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>                                half3 triangleB <span class="token operator">=</span> <span class="token keyword">input</span><span class="token punctuation">.</span>triangleBarycentric<span class="token punctuation">;</span>                half3 deltaTriangleB <span class="token operator">=</span> <span class="token function">fwidth</span><span class="token punctuation">(</span>triangleB<span class="token punctuation">)</span><span class="token punctuation">;</span>                deltaTriangleB <span class="token operator">*=</span> _WireframeWidth<span class="token punctuation">;</span>                triangleB <span class="token operator">=</span> <span class="token function">smoothstep</span><span class="token punctuation">(</span>deltaTriangleB<span class="token punctuation">,</span> deltaTriangleB <span class="token operator">*</span> _WireframeSmooth<span class="token punctuation">,</span> triangleB<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">half</span> wireframeMask <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>triangleB<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>triangleB<span class="token punctuation">.</span>y<span class="token punctuation">,</span> triangleB<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                half3 finalColor <span class="token operator">=</span> diffuseColor <span class="token operator">+</span> specularColor <span class="token operator">+</span> fresnelColor<span class="token punctuation">;</span>                finalColor <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span>finalColor<span class="token punctuation">,</span> _WireframeColor<span class="token punctuation">.</span>rgb<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> wireframeMask<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token function">half4</span><span class="token punctuation">(</span>finalColor<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        ENDCG                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/XjU6Ujgmtt33aZRM8mTJOw">https://mp.weixin.qq.com/s/XjU6Ujgmtt33aZRM8mTJOw</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形硬件 </tag>
            
            <tag> 图形渲染管线 </tag>
            
            <tag> 曲面细分着色器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑白图转法线</title>
      <link href="/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/xuan-ran-ji-qiao/hei-bai-tu-zhuan-fa-xian/hei-bai-tu-zhuan-fa-xian/"/>
      <url>/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/xuan-ran-ji-qiao/hei-bai-tu-zhuan-fa-xian/hei-bai-tu-zhuan-fa-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、ddx、ddy"><a href="#一、ddx、ddy" class="headerlink" title="一、ddx、ddy"></a>一、ddx、ddy</h1><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p> ddx，ddy 获取屏幕空间中任何两个片段之间的变化率，需要在片段着色器中使用</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025134830981.png" alt="image-20211025134830981" style="zoom:80%;"> <h3 id="1-2-获取同一个三角面"><a href="#1-2-获取同一个三角面" class="headerlink" title="1.2 获取同一个三角面"></a>1.2 获取同一个三角面</h3><p>三角形内是法线相同</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025135020614.png" alt="image-20211025135020614" style="zoom:80%;"> <h3 id="1-3-利用曲率转法线"><a href="#1-3-利用曲率转法线" class="headerlink" title="1.3 利用曲率转法线"></a>1.3 利用曲率转法线</h3><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">float3 <span class="token function">heightToNormal</span><span class="token punctuation">(</span><span class="token keyword">float</span> height<span class="token punctuation">,</span> <span class="token keyword">float</span> intensity<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> dU <span class="token operator">=</span> <span class="token function">ddx</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> dV <span class="token operator">=</span> <span class="token function">ddy</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    float3 n <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">float3</span><span class="token punctuation">(</span>dU<span class="token punctuation">,</span> dV<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> intensity<span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025184819525.png" alt="image-20211025184819525" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025184848664.png" alt="image-20211025184848664" style="zoom: 67%;"> <p>在进行一次 Gamma 校正</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">float3 n <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">heightToNormal</span><span class="token punctuation">(</span>Color<span class="token punctuation">,</span> _Intensity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025185009161.png" alt="image-20211025185009161" style="zoom: 50%;"> <p>参考： <a href="https://zhuanlan.zhihu.com/p/92939613">https://zhuanlan.zhihu.com/p/92939613</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染技巧 </tag>
            
            <tag> 黑白图转法线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几何着色器</title>
      <link href="/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/ji-he-zhao-se-qi/ji-he-zhao-se-qi/"/>
      <url>/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/ji-he-zhao-se-qi/ji-he-zhao-se-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>位于顶点着色器之后，输入的是图元数据，不但能够获取点、线、面之间的关系，还能够进行新增以及删除的动作。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025102945956.png" alt="image-20211025102945956" style="zoom:80%;"> <h1 id="二、使用规则"><a href="#二、使用规则" class="headerlink" title="二、使用规则"></a>二、使用规则</h1><h4 id="a、渲染目标限制"><a href="#a、渲染目标限制" class="headerlink" title="a、渲染目标限制"></a>a、渲染目标限制</h4><p>渲染目标最低为 4.0 ：target 4.0</p><h4 id="b、属性"><a href="#b、属性" class="headerlink" title="b、属性"></a>b、属性</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token function">maxvertexcount</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>    <span class="token comment">//設定 Geometry Shader 的最大輸出頂點數</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="c、输入"><a href="#c、输入" class="headerlink" title="c、输入"></a>c、输入</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">point <span class="token comment">//点图元数据</span>line <span class="token comment">//线图元数据</span>lineadj <span class="token comment">//线图元数据，包含临近线图元数据</span>triangle <span class="token comment">//面图元数据</span>triangleleadj <span class="token comment">//面图元数据，包含临近面数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d、输出"><a href="#d、输出" class="headerlink" title="d、输出"></a>d、输出</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">PointStream <span class="token comment">//点 stream 数据</span>LineStream <span class="token comment">//线 stream 数据</span>TriangleStream <span class="token comment">//面 stream 数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="e、Stream-方法"><a href="#e、Stream-方法" class="headerlink" title="e、Stream 方法"></a>e、Stream 方法</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">struct</span><span class="token punctuation">)</span> <span class="token comment">//新增 stream 数据</span><span class="token function">RestartStrip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//使用 TriangleStream 时，需要使用这个方法形成面图元数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="f、定义几何着色器"><a href="#f、定义几何着色器" class="headerlink" title="f、定义几何着色器"></a>f、定义几何着色器</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">geometry MyGemometryProgram</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="g、设置输出的顶点数"><a href="#g、设置输出的顶点数" class="headerlink" title="g、设置输出的顶点数"></a>g、设置输出的顶点数</h4><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token punctuation">[</span><span class="token function">maxvertexcount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、案例展示"><a href="#三、案例展示" class="headerlink" title="三、案例展示"></a>三、案例展示</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025104918692.png" alt="image-20211025104918692" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025105041109.png" alt="image-20211025105041109" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025105052631.png" alt="image-20211025105052631" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025105113846.png" alt="image-20211025105113846" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025105125945.png" alt="image-20211025105125945" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025105138318.png" alt="image-20211025105138318" style="zoom:80%;"> <p>DX 的解释</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-geometry-shader">https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-geometry-shader</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221154920509.png" alt="image-20211221154920509" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221154944473.png" alt="image-20211221154944473" style="zoom:67%;"> <p>参考：</p><p><a href="https://mp.weixin.qq.com/s/wutD7y7kGmu0t07Ph4EfhA">https://mp.weixin.qq.com/s/wutD7y7kGmu0t07Ph4EfhA</a></p><p><a href="https://tedsieblog.wordpress.com/2019/04/09/unity-geometry-shader-cookbook/">https://tedsieblog.wordpress.com/2019/04/09/unity-geometry-shader-cookbook/</a></p><p><a href="https://github.com/ted10401/GeometryShaderCookbook">https://github.com/ted10401/GeometryShaderCookbook</a></p><p><a href="https://www.youtube.com/watch?v=7C-mA08mp8o">https://www.youtube.com/watch?v=7C-mA08mp8o</a></p><p><a href="https://gamedevbill.com/geometry-shaders-in-urp/">https://gamedevbill.com/geometry-shaders-in-urp/</a></p><p><a href="https://www.youtube.com/watch?v=beSRCSRS6mI">https://www.youtube.com/watch?v=beSRCSRS6mI</a></p><p><a href="https://github.com/keijiro/StandardGeometryShader">https://github.com/keijiro/StandardGeometryShader</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形硬件 </tag>
            
            <tag> 图形渲染管线 </tag>
            
            <tag> 几何着色器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>材质IOR查询</title>
      <link href="/BloodSoul.github.io/2021/10/24/gamedevelop/gamecontent/artresource/zi-yuan/cai-zhi-ior-cha-xun/"/>
      <url>/BloodSoul.github.io/2021/10/24/gamedevelop/gamecontent/artresource/zi-yuan/cai-zhi-ior-cha-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="IOR-Index-of-Refraction"><a href="#IOR-Index-of-Refraction" class="headerlink" title="IOR(Index of Refraction)"></a>IOR(Index of Refraction)</h1><p>数百种常见材质的折射率值(IOR - Index of Refraction)备忘查询表</p><p>在过去的几年里，大佬一直在收集能找到的，用于 3d 渲染应用程序的 IOR(折射率)值，许多 3d 应用程序支持输入实际 IOR 值，以便在渲染 3d 模型时获得更精确的效果。如果您知道要了解正确 IOR 值是什么，那么这显然是有帮助的。<br>那么支持的常用 3D 程序如下，如 NewTek Lightwave 3d、Blender 3d、Autodesk 3DS Max、Autodesk Maya、Autodesk Softimage、Maxon Cinema 4D、Next Limit Maxwell、Foundry Modo 和 Strata 3d。</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>常见材质 Common Materials</td><td></td><td></td><td></td></tr><tr><td>英文名称</td><td>中文名称</td><td>最小值</td><td>最大值</td></tr><tr><td>Acrylic glass</td><td>有机玻璃(树脂、亚克力)</td><td>1.490</td><td>1.492</td></tr><tr><td>Air</td><td>空气</td><td>1.000</td><td></td></tr><tr><td>Alcohol, Ethyl (grain)</td><td>酒类(酒精、乙醇、含沉淀物颗粒)</td><td>1.360</td><td></td></tr><tr><td>Aluminum</td><td>铝</td><td>1.390</td><td>1.440</td></tr><tr><td>Asphalt</td><td>沥青、柏油</td><td>1.635</td><td></td></tr><tr><td>Beer</td><td>啤酒</td><td>1.345</td><td></td></tr><tr><td>Bronze</td><td>青铜</td><td>1.180</td><td></td></tr><tr><td>Copper</td><td>铜</td><td>1.100</td><td>2.430</td></tr><tr><td>Crystal</td><td>水晶、石英、结晶</td><td>2.000</td><td></td></tr><tr><td>Diamond</td><td>钻石</td><td>2.418</td><td></td></tr><tr><td>Emerald</td><td>翡翠、绿宝石、祖母绿</td><td>1.560</td><td>1.605</td></tr><tr><td>Eye,Lens</td><td>眼睛、镜头</td><td>1.410</td><td></td></tr><tr><td>Glass</td><td>玻璃</td><td>1.500</td><td></td></tr><tr><td>Glass,Pyrex</td><td>耐热玻璃</td><td>1.474</td><td></td></tr><tr><td>Gold</td><td>金</td><td>0.470</td><td></td></tr><tr><td>Ice</td><td>冰</td><td>1.309</td><td></td></tr><tr><td>Iron</td><td>铁</td><td>2.950</td><td></td></tr><tr><td>Ivory</td><td>象牙</td><td>1.540</td><td></td></tr><tr><td>Lead</td><td>铅</td><td>2.010</td><td></td></tr><tr><td>Lucite</td><td>透明的合成树脂</td><td>1.495</td><td></td></tr><tr><td>Mercury(liquid)</td><td>汞、水银(液体)</td><td>1.620</td><td></td></tr><tr><td>Milk</td><td>奶、乳汁</td><td>1.350</td><td></td></tr><tr><td>Nickel</td><td>镍</td><td>1.080</td><td></td></tr><tr><td>Nylon</td><td>尼龙(丝袜)</td><td>1.530</td><td></td></tr><tr><td>Pearl</td><td>珍珠</td><td>1.530</td><td>1.690</td></tr><tr><td>Plastic</td><td>塑料</td><td>1.460</td><td></td></tr><tr><td>Teflon</td><td>特氟隆(不粘涂层、氟碳涂料)</td><td>1.350</td><td>1.380</td></tr><tr><td>Titanium</td><td>钛</td><td>2.160</td><td></td></tr><tr><td>Vodka</td><td>伏特加</td><td>1.363</td><td></td></tr><tr><td>Water (35 deg C)</td><td>水(35°)</td><td>1.325</td><td></td></tr></tbody></table><h3 id="更多折射率"><a href="#更多折射率" class="headerlink" title="更多折射率"></a>更多折射率</h3><p><strong>A - Materials</strong><br>Acetone 丙酮(常温下无色液体) 1.360<br>Acrylic glass 有机玻璃(树脂、亚克力) 1.490 ~ 1.492 ◀<br>Actinolite 阳起石(和田玉) 1.618 ◀<br>Agalmatoite 玛瑙石 1.550<br>Agate 玛瑙 1.544 ~ 1.553<br>Agate, Moss 玛瑙，苔藓 1.540<br>Air 空气 1.000<br>Alcohol 酒精、乙醇 1.329 ◀<br>Alcohol, Ethyl (grain) 酒精、乙基、乙醇、含沉淀物颗粒 1.360<br>Alcohol, Methyl (wood) 酒精、甲基、甲醇、木醇 1.329<br>Alexandrite 翠绿宝石、紫翠玉、亚历山大变色石 1.746 ~ 1.755<br>Almandine 铁铝榴石、石榴子石、贵榴石 1.244<br>Aluminum 铝 1.244<br>Aluminum Chloride 氯化铝 2.700<br>Aluminum Oxide 氧化铝、刚玉砂 1.665<br>Amber 琥珀 1.539 ~ 1.546<br>Amblygonite 琥珀石、锂磷铝石、磷铝石 1.611<br>Amethyst 紫水晶 1.532 ~ 1.554<br>Ammolite 斑彩石 1.520 ~ 1.680<br>Amorphous Selenium 非晶硒(灰色带金属光泽的固体) 2.920<br>Anatase 锐钛矿、锐钛石(四方晶系) 2.490<br>Andalusite 红柱石(斜方晶系) 1.629 ~ 1.650<br>Anhydrite 硬石膏 1.571 ◀<br>Apatite 磷灰石(玻璃状晶体、块体或结核) 1.420 ~ 1.632<br>Apophyllite 鱼眼石(四方晶系) 1.536<br>Aquamarine 海蓝宝石 1.567<br>Aragonite 文石、霰石 1.530<br>Argon 氩气 1.000<br>Argonite 陶粒 1.530 ◀<br>Asphalt 沥青、柏油 1.635 ◀<br>Augelite 光彩石 1.574<br>Axenite 硅质岩 1.674 ~ 1.704<br>Axinite 轴晶岩 1.675<br>Azurite 蓝铜矿、石青 1.730</p><p><strong>B - Materials</strong><br>Barite 重晶石 1.636<br>Barytocalcite 重晶方解石、钡方解石 1.684<br>Beer 啤酒 1.345 ◀<br>Benitoite 贝宁岩、蓝锥石 1.757<br>Benzene 苯 1.501<br>Beryl 绿柱石 1.570 ~ 1.600<br>Beryl, Red 红柱石 1.570 ~ 1.598<br>Beryllonite 绿柱石、磷钠铍石 1.553<br>Borax 硼砂 1.446<br>Brazilianite 磷铝钠石、巴西石 1.603<br>Bromine (liquid) 溴水（液体）1.661<br>Bronze 青铜 1.180 ◀<br>Brownite 钙铁石 1.567</p><p><strong>C - Materials</strong><br>Calcite 方解石、冰洲石、颗石球、霰石 1.486<br>Calspar 火山口 1.486 ~ 1.660<br>Cancrinite 钙霞石、灰霞石 1.491<br>Carbon Dioxide 二氧化碳 1.000<br>Carbon Disulfide 二硫化碳 1.628<br>Carbon Tetrachloride 四氯化碳 1.460<br>Carbonated Beverages 碳酸饮料类 1.340 ◀<br>Cassiterite 锡石 1.997<br>Celestite 天青石 1.622<br>Cerussite 白云石、碳酸铅、白铅 1.804<br>Ceylanite 铁尖晶石 1.770<br>Chalcedony 玉髓、石髓 1.544 ~ 1.553<br>Chalk 粉笔、白垩 1.510 ◀<br>Chalybite 球菱铁矿 1.630<br>Chlorine (gas) 氯（气体） 1.001<br>Chlorine (liquid) 氯（液体）1.385<br>Chrome Green 铬绿 2.400<br>Chrome Red 铬红 2.420<br>Chrome Tourmaline 铬绿碧玺 1.610 ~ 1.640<br>Chrome Yellow 铬黄 2.310<br>Chromium 铬 2.970<br>Chromium Oxide 氧化铬 2.705<br>Chrysoberyl 金绿石 1.745<br>Chrysocolla 孔雀石、凤凰石 1.500<br>Chrysoprase 绿玉髓、澳洲玉 1.534<br>Cinnabar (Mecury Sulfide) 朱砂(硫化亚汞) 3.020<br>Citrine 黄水晶、柠檬黄 1.532<br>Cleaner (all purpose) 清洁剂、去污剂（通用）1.293 ◀<br>Clinohumite 斜辉石 1.625<br>Clinozoisite 斜黝帘石 1.724<br>Cobalt Blue 钴蓝 1.740<br>Cobalt Green 钴绿 1.970<br>Cobalt Violet 钴紫 1.710<br>Colemanite 硼钙石、柯尔曼尼岩 1.586<br>Copper 铜 1.100 ~ 2.430 ◀<br>Copper Oxide 氧化铜 2.705 ◀<br>Coral 珊瑚 1.486<br>Cordierite 堇青石 1.540<br>Corundum 刚玉、金刚砂 1.766<br>Cranberry Juice (25%) 蔓越莓汁 1.351 ◀<br>Crocoite 红宝石 2.310<br>Cromite 铁云母 2.160<br>Crown Glass (impure) 厚玻璃(不纯) 1.485 ~ 1.755 ◀<br>Crown Glass (pure) 厚玻璃(纯) 1.500 ~ 1.540 ◀<br>Cryolite 冰晶石 1.338<br>Crysoberyl, Catseye 猫眼石 1.746 ~ 1.755<br>Crystal 水晶 2.000<br>Cubic Zirconia 立方氧化锆 2.150 ~ 2.180<br>Cuprite 赤铜 2.850 ◀</p><p>**D - Materials<br>**Danburite 赛黄晶 1.627 ~ 1.641<br>Diamond 钻石、金刚石 2.418 ◀<br>Diopside 透辉石 1.680<br>Dolomite 白云石、大理石 1.503 ◀<br>Dumortierite 蓝线石、杜莫铁石 1.686</p><p><strong>E - Materials</strong><br>Ebonite 硬橡胶 1.660 ◀<br>Ekanite 埃卡石 1.600<br>Elaeolite 伊利石、脂光石 1.532<br>Emerald 翡翠、绿宝石、祖母绿 1.560 ~ 1.605 ◀<br>Emerald Catseye 翡翠、绿宝石、祖母绿猫眼 1.560 ~ 1.605<br>Emerald, Synth Flux 翡翠、绿宝石、祖母绿合成 1.561<br>Emerald, Synth Hydro 翡翠、绿宝石、祖母绿合成 1.568<br>Enstatite 顽火岩 1.663<br>Epidote 绿帘石 1.733<br>Ethanol 乙醇、酒精 1.360 ◀<br>Ethyl Alcohol 乙醇、酒精 1.360<br>Euclase 蓝柱石 1.652<br>Eye, Aqueous Humor 眼睛、水样体液 1.330 ◀<br>Eye, Cornea 眼角膜 1.380 ◀<br>Eye, Lens 眼睛晶状体、镜头 1.410 ◀<br>Eye, Vitreous Humor 眼睛、玻璃状体液 1.340 ◀</p><p><strong>F - Materials</strong><br>Fabulite 辉绿岩 2.409<br>Feldspar, Adventurine 长石、外来 1.532<br>Feldspar, Albite 钠长石 1.525<br>Feldspar, Amazonite 长石、亚马逊石 1.525<br>Feldspar, Labrodorite 长石、钠铝榴石 1.565<br>Feldspar, Microcline 长石、微斜长石 1.525<br>Feldspar, Oligoclase 奥长石 1.539<br>Feldspar, Orthoclase 正长石 1.525<br>Flint Glass (impure) 高质量无色玻璃(不纯) 1.523 ~ 1.925 ◀<br>Flint Glass (pure) 高质量无色玻璃(纯) 1.600 ~ 1.620 ◀<br>Flourite 绿萤石 1.433<br>Fluoride 氟化物 1.560<br>Fluorite 萤石 1.434<br>Formica 氟石 1.470<br>Fused Quartz 熔融石英(水晶) 1.460</p><p><strong>G - Materials</strong><br>Gallium(III) Arsenide 砷化镓 3.927<br>Gallium(III) Phosphide 磷化镓 3.500<br>Garnet, Almandine 石榴石、铁铝榴石、贵榴石、石榴子石 1.760<br>Garnet, Almandite 石榴石、铁铝榴石 1.790<br>Garnet, Andradite 石榴石、钙铁榴石 1.820<br>Garnet, Demantiod 石榴石、翠榴石 1.880 ~ 1.900<br>Garnet, Grossular 石榴石、钙铝榴石 1.720 ~ 1.800<br>Garnet, Hessonite 石榴石、钙铝榴石、肉桂石 1.745<br>Garnet, Mandarin 石榴石、芬达石、锰铝榴石 1.790 ~ 1.800<br>Garnet, Pyrope 石榴石、镁铝榴石、红榴石 1.730 ~ 1.760<br>Garnet, Rhodolite 石榴石、玫瑰榴石、红宝石 1.740 ~ 1.770<br>Garnet, Spessartite 石榴石、铁铝榴石 1.810<br>Garnet, Tsavorite 石榴石、沙弗莱石、绿榴石 1.739 ~ 1.744<br>Garnet, Uvarovite 石榴石、钙铬榴石 1.740 ~ 1.870<br>Gaylussite 榴辉石、斜钠钙石 1.517<br>Glass 玻璃 1.500 ◀<br>Glass, Albite 玻璃、钠长石 1.489<br>Glass, Arsenic Trisulfide 玻璃、三硫化砷 2.040<br>Glass, Crown 皇冠玻璃 1.520<br>Glass, Crown, Zinc 锌皇冠玻璃 1.517<br>Glass, Flint, 29% lead 无色玻璃、29%铅 1.569<br>Glass, Flint, 55% lead 无色玻璃、55%铅 1.669<br>Glass, Flint, 71% lead 无色玻璃、71%铅 1.805<br>Glass, Flint, Dense 无色玻璃、密集 1.660<br>Glass, Flint, Heaviest 无色玻璃、最厚重密集 1.890<br>Glass, Flint, Heavy 无色玻璃、厚重的 1.655<br>Glass, Flint, Lanthanum 无色玻璃、镧 1.800<br>Glass, Flint, Light 无色玻璃、轻薄 1.580<br>Glass, Flint, Medium 无色玻璃、中等 1.627<br>Glass, Fused Silica 无色玻璃、熔融石英 1.459<br>Glass, Pyrex 派莱克斯耐高温玻璃 1.474<br>Glycerine 甘油 1.473<br>Glycerol 甘油 1.473<br>Gold 金 0.470 ◀<br>Gypsium 石膏 1.519 ◀</p><p><strong>H - Materials</strong><br>Hambergite 硼铍石 1.559<br>Hauyne 蓝方石 1.490 ~ 1.505<br>Hauynite 蓝方石、辉长岩 1.502<br>Heaviest Flint Glass 最重的火石玻璃 1.890<br>Heavy Flint Glass 重火石玻璃 1.650<br>Helium 氦气 1.000<br>Hematite 赤铁矿、黑胆石 2.940<br>Hemimorphite 异极矿 1.614<br>Hiddenite 辉石、翠绿锂辉石、希登石 1.655<br>Honey, 13% water content 蜂蜜，含水量 13% 1.504 ◀<br>Honey, 17% water content 蜂蜜，含水量 17% 1.494 ◀<br>Honey, 21% water content 蜂蜜，含水量 21% 1.484 ◀<br>Howlite 火山岩、白纹石、白松石 1.586<br>Hydrogen (gas) 氢（气体）1.000<br>Hydrogen (liquid) 氢（液体）1.097<br>Hypersthene 紫苏辉石 1.670</p><p><strong>I - Materials</strong><br>Ice 冰 1.309 ◀<br>Idocrase 符山石 1.713<br>Iodine Crystal 碘晶体 3.340<br>Iolite 堇青石 1.522 ~ 1.578<br>Iron 钢铁 2.950 ◀<br>Ivory 象牙 1.540 ◀</p><p><strong>J - Materials</strong><br>Jade, Jadeite 翡翠、硬玉 1.640 ~ 1.667 ◀<br>Jade, Nephrite 翡翠、软玉、和田玉、白玉 1.600 ~ 1.641 ◀<br>Jadeite 硬玉 1.665<br>Jasper 碧玉 1.540<br>Jet 黑色大理石、黑玉、煤玉 1.660 ◀</p><p><strong>K - Materials</strong><br>Kornerupine 柱晶石 1.665<br>Kunzite 昆石、锂辉石、孔赛石 1.660 ~ 1.676<br>Kyanite 晶石、蓝晶石 1.715</p><p><strong>L - Materials</strong><br>Labradorite 拉长石、拉布拉多岩 1.560 ~ 1.572<br>Lapis Gem 拉皮斯宝石 1.500<br>Lapis Lazuli 拉皮斯青金石、琉璃 1.500 ~ 1.550<br>Lazulite 天青石 1.615<br>Lead 铅 2.010 ◀<br>Lead Nitrate 亚硝酸铅 1.782<br>Leucite 白榴石 1.509<br>Light Flint Glass 薄火石玻璃 1.575<br>Liquid Carbon Dioxide 液态二氧化碳 1.200<br>Liquid Water (20 deg C) 水 20° 1.333<br>Lucite 绿彩石、透明合成树脂、人造荧光树脂 1.495 ◀</p><p><strong>M - Materials</strong><br>Magnesite 菱镁矿、碳酸镁 1.515<br>Malachite 孔雀石 1.655<br>Meerschaum 海泡石 1.530<br>Mercury (liquid) 汞（液体）1.620<br>Methanol 甲醇 1.329<br>Milk 奶、乳汁、白色汁液 1.350 ◀<br>Moissanite 莫桑石、碳硅石、碳矽石 2.650 ~ 2.690<br>Moldavite 玻璃陨石 1.500<br>Moonstone 月光石 1.518 ~ 1.526<br>Moonstone, Adularia 月光石、冰长石 1.525<br>Moonstone, Albite 月光石、钠长石 1.535<br>Morganite 莫甘石、摩根石、半宝石 1.585 ~ 1.594<br>Mylar 聚酯薄膜 1.650 ◀</p><p><strong>N - Materials</strong><br>Natrolite 钠沸石 1.480<br>Nephrite 软玉、和田玉 1.600<br>Nickel 镍 1.080<br>Nitrogen (gas) 氮气（气体）1.000<br>Nitrogen (liq) 氮气（流体）1.205<br>Nylon 尼龙女袜 1.530 ◀</p><p><strong>O - Materials</strong><br>Obsidian 黑曜石 1.486 ~ 1.500<br>Oil of Wintergreen 冬青油 1.536<br>Oil, Clove 丁香精油 1.535<br>Oil, Lemon 柠檬精油 1.481<br>Oil, Neroli 橙花精油 1.482<br>Oil, Orange 橙子精油 1.473<br>Oil, Safflower 红花精油 1.466<br>Oil, vegetable (50deg C) 植物精油 50° 1.470 ◀<br>Olivine 橄榄石 1.670<br>Onyx 玛瑙、文石 1.486<br>Onyx Marble 大理石玛瑙 1.486<br>Opal 猫眼石 1.450<br>Opal, Black 猫眼石、欧珀 1.440 ~ 1.460<br>Opal, Fire 猫眼石、欧珀 1.430 ~ 1.460<br>Opal, White 猫眼石、白 1.440 ~ 1.460<br>Oregon Sunstone 俄勒冈太阳石 1.560 ~ 1.572<br>Oxygen (gas) 氧气(气体) 1.000<br>Oxygen (liquid) 氧气(液体) 1.221</p><p><strong>P - Materials</strong><br>Padparadja 帕德帕拉德杰 1.760 ~ 1.773<br>Painite 白云石、铝硼锆钙石 1.787<br>Pearl 珍珠 1.530 ~ 1.690 ◀<br>Periclase 方镁石 1.740<br>Peristerite 橄榄石 1.525<br>PET 聚酯(食品包装薄膜、碳酸饮料包装、纺织品纤维、胶片、电气绝缘等等) 1.575 ◀<br>Petalite 花瓣岩、叶长石 1.502<br>PETg 聚酯(替代 PET) 1.570 ◀<br>Phenakite 硅铍石 1.650<br>Phosgenite 角铅矿 2.117<br>Plastic 塑料 1.460 ◀<br>Platinum 铂金 2.330 ◀<br>Plexiglas 树脂玻璃、胶质玻璃 1.500 ◀<br>PMMA 压克力、亚克力 1.489 ~ 1.490 ◀<br>Polycarbonate 聚碳酸酯(坚硬透明塑料) 1.584<br>Polystyrene 聚苯乙烯(保丽龙) 1.550<br>Prase 绿玉髓 1.540<br>Prasiolite 橄榄岩、绿水晶、堇云石 1.540<br>Prehnite 橄榄岩、葡萄石 1.610<br>Proustite 淡红银矿 2.790<br>Purpurite 紫水晶 1.840 ◀<br>Pyrite 黄铁、硫铁 1.810<br>Pyrope 镁铝榴石 1.740</p><p><strong>Q - Materials</strong><br>Quartz 石英 1.544 ~ 1.644<br>Quartz, Fused 熔融石英 1.458</p><p><strong>R - Materials</strong><br>Rhodizite 硼锂铍石 1.690<br>Rhodochrisite 红榴石 1.600<br>Rhodonite 褐铁矿、玫瑰石 1.735<br>Rock salt 岩盐、粗盐 1.516 ~ 1.544<br>Rubber, Natural 天然橡胶 1.519 ◀<br>Ruby 深红宝石 1.757 ~ 1.779 ◀<br>Rum, White 朗姆酒白色 1.361 ◀<br>Rutile 金红石 2.620</p><p><strong>S - Materials</strong><br>Salt (NaCl) 食盐 1.544 ◀<br>Sanidine 透长石、玻璃长石 1.522<br>Sapphire 蓝宝石 1.757 ~ 1.779 ◀<br>Sapphire, Star 星光蓝宝石 1.760 ~ 1.773<br>Scapolite 方柱石 1.540<br>Scapolite, Yellow 黄方柱石 1.555<br>Scheelite 灰重石、白钨矿 1.920<br>Selenium, Amorphous 非晶体硒 2.920<br>Serpentine 蛇纹石 1.560<br>Shampoo 洗发剂、香波 1.362 ◀<br>Shell 贝壳 1.530<br>Shower gel 沐浴啫喱、浴乳乳、沐浴露 1.510 ◀<br>Silicon 硅 4.010 ~ 4.240<br>Sillimanite 硅线石、矽线石 1.658<br>Silver 银 0.180 ~ 1.350 ◀<br>Sinhalite 硼铝镁石 1.699<br>Smaragdite 绿闪石 1.608<br>Smithsonite 炉甘石、菱锌矿 1.621<br>Sodalite 苏打石、方钠石 1.483<br>Sodium Chloride 1.544 ~ 1.644<br>Spessarite 白云石 1.790 ~ 1.810<br>Sphalerite 闪锌矿 2.368<br>Sphene 楣石、榍石 1.885<br>Spinel 尖晶石 1.712 ~ 1.717<br>Spinel, Blue 尖晶石蓝 1.7 12 1.747<br>Spinel, Red 尖晶石红 1.708 1.735<br>Spodumene 锂辉石 1.650<br>Star Ruby 星光红宝石 1.760 ~ 1.773<br>Staurolite 十字石 1.739<br>Steatite 滑石、滑石瓷 1.539 ◀<br>Steel 钢 2.500 ◀<br>Stichtite 碳铬镁矿 1.520<br>Strontium Titanate 钛酸锶 2.410<br>Styrofoam 聚苯乙烯泡沫塑料(用于制造器皿) 1.595 ◀<br>Styrene 苯乙烯 1.519<br>Sugar Solution 30% 糖液溶液 1.380<br>Sugar Solution 80% 糖液溶液 1.490<br>Sulphur 硫化铁、硫磺 1.960<br>Synthetic Spinel 人造尖晶石 1.730</p><p><strong>T - Materials</strong><br>Taaffeite 塔菲石、铍镁晶石 1.720<br>Tantalite 钽铁矿 2.240<br>Tanzanite 坦桑石、丹泉石 1.692 ~ 1.700<br>Teflon 特氟隆(不粘涂层、氟碳涂料) 1.350 ~ 1.380<br>Thomsonite 沸石 1.530<br>Tiger eye 虎眼、虎睛石 1.544<br>Tin Iodide 碘化锡 2.106<br>Titanium 钛 2.160 ◀<br>Topaz 黄玉、黄宝石 1.607 ~ 1.627<br>Topaz, Blue 黄宝石 蓝 1.610<br>Topaz, Imperial 黄宝石 特级 1.605 ~ 1.640<br>Topaz, Pink 黄宝石 粉 1.620<br>Topaz, White 黄宝石 白 1.630<br>Topaz, Yellow 黄宝石 黄 1.620<br>Tourmaline 璧玺 1.603 ~ 1.655<br>Tourmaline, Blue 璧玺蓝 1.610 ~ 1.640<br>Tourmaline, Catseye 璧玺猫眼 1.610 ~ 1.640<br>Tourmaline, Green 璧玺绿 1.610 ~ 1.640<br>Tourmaline, Paraiba 璧玺帕赖巴 1.610 ~ 1.650<br>Tourmaline, Red 璧玺红 1.610 ~ 1.640<br>Tremolite 透闪石 1.600<br>Tugtupite 硅铍铝钠石 1.496<br>Turpentine 松节油、松脂、松香 1.472 ◀<br>Turquoise 翠蓝、松石蓝 1.610 ~ 1.650</p><p><strong>U - Materials</strong><br>Ulexite 硼钠钙石 1.490<br>Uvarovite 钙铬榴石 1.870</p><p><strong>V - Materials</strong><br>Vacuum 真空 1.000<br>Variscite 磷铝石 1.550<br>Vivianite 维维安岩 1.580<br>Vodka 伏特加 1.363 ◀</p><p><strong>W - Materials</strong><br>Wardite 水磷铝纳石 1.590<br>Water (0 deg C) 水 0° 1.333 ◀<br>Water ( 100 deg C) 水 100° 1.318 ◀<br>Water (20 deg C) 水 20° 1.333 ◀<br>Water (gas) 水气态 1.000 ◀<br>Water (35 deg C) 水 35° 1.325 ◀<br>Water Ice 水固态 1.310 ◀<br>Whisky 威士忌 1.356 ◀<br>Wulfenite 钼铅矿 2.300</p><p><strong>Z - Materials</strong><br>Zinc Crown Glass 锌冕玻璃 1.517<br>Zincite 红锌矿 2.010<br>Zircon 锆石 1.777 ~ 1.987<br>Zircon, High 锆石高 1.960<br>Zircon, Low 锆石低 1.800<br>Zirconia, Cubic 氧化锆 立方 2.173 ~ 2.210</p>]]></content>
      
      
      <categories>
          
          <category> ArtResource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mathjax使用</title>
      <link href="/BloodSoul.github.io/2021/10/24/gamedevelop/website/blog/hexo/content/mathjax-shi-yong/"/>
      <url>/BloodSoul.github.io/2021/10/24/gamedevelop/website/blog/hexo/content/mathjax-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="语法总结"><a href="#语法总结" class="headerlink" title="语法总结"></a>语法总结</h2><p>官网：<a href="https://www.mathjax.org/">https://www.mathjax.org/</a></p><p><a href="https://blog.csdn.net/ajacker/article/details/80301378">https://blog.csdn.net/ajacker/article/details/80301378</a></p><p><a href="https://blog.csdn.net/jyfu2_12/article/details/79207643">https://blog.csdn.net/jyfu2_12/article/details/79207643</a></p><p><a href="https://qianwenma.cn/2018/05/17/mathjax-yu-fa-can-kao/">https://qianwenma.cn/2018/05/17/mathjax-yu-fa-can-kao/</a></p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>markdown如何打出双下标 <a href="https://blog.csdn.net/u013698770/article/details/55210693>">https://blog.csdn.net/u013698770/article/details/55210693&gt;</a></p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>国内 mathjax CDN <a href="https://www.bootcdn.cn/mathjax/">https://www.bootcdn.cn/mathjax/</a></p><p>国外 mathjax CDN  <a href="https://github.com/mathjax/MathJax-src">https://github.com/mathjax/MathJax-src</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>scriptid<span class="token operator">=</span><span class="token string">"MathJax-script"</span> asyncsrc<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP学习笔记</title>
      <link href="/BloodSoul.github.io/2021/10/24/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/tie-tu-gong-ju/fei-cheng-xu-hua-gong-ju/sp/sp-xue-xi-bi-ji/"/>
      <url>/BloodSoul.github.io/2021/10/24/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/tie-tu-gong-ju/fei-cheng-xu-hua-gong-ju/sp/sp-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>SP 基于模型创建项目</p><p>OpenGL 法线是右手准则 Maya使用 </p><p>DirectX 法线是左手准则 Max使用</p><p>F1,F2,F3 切换三维视图和二维视图，以及同时显示二维和三维</p><p>M 键：显示材质</p><p>Alt+鼠标左右中，视图控制，按住sift可以卡在某个位置</p><p>Shift+鼠标右键更改光影，和八猴一样</p><p>Ctrl+鼠标右键左右调整笔刷大小，上下调整笔刷软硬</p><p>X 键翻转黑白笔刷</p><p>添加 Mask图层 -&gt;然后添加生成器-&gt;选择生成器材质</p><p>添加颜色选择遮罩，通过 ID 贴图选择想要操作的部分</p><h4 id="上色流程"><a href="#上色流程" class="headerlink" title="上色流程"></a>上色流程</h4><p>Step1:选中区块，分底色</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024120549726.png" alt="image-20211024120549726" style="zoom:50%;"> <h4 id="头发流程"><a href="#头发流程" class="headerlink" title="头发流程"></a>头发流程</h4><p>AboutCG 机械少女 头发</p><p> Xgen -&gt; 贴图-&gt;插片</p>]]></content>
      
      
      <categories>
          
          <category> ArtResource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 角色 </tag>
            
            <tag> 3D </tag>
            
            <tag> 模型 </tag>
            
            <tag> 非程序化工具 </tag>
            
            <tag> 贴图工具 </tag>
            
            <tag> SP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八猴渲染</title>
      <link href="/BloodSoul.github.io/2021/10/24/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/hong-bei-gong-ju/marmosettoobag-ba-hou/ba-hou-xuan-ran/"/>
      <url>/BloodSoul.github.io/2021/10/24/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/hong-bei-gong-ju/marmosettoobag-ba-hou/ba-hou-xuan-ran/</url>
      
        <content type="html"><![CDATA[<p>八猴渲染MMD笔记汇总以及材质贴图的介绍</p><p><a href="https://www.bilibili.com/read/cv6708403/">https://www.bilibili.com/read/cv6708403/</a></p>]]></content>
      
      
      <categories>
          
          <category> ArtResource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 角色 </tag>
            
            <tag> 3D </tag>
            
            <tag> 模型 </tag>
            
            <tag> 烘焙工具 </tag>
            
            <tag> 八猴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity小技巧</title>
      <link href="/BloodSoul.github.io/2021/10/24/gamedevelop/gameengine/unity/xiao-ji-qiao/unity-xiao-ji-qiao/"/>
      <url>/BloodSoul.github.io/2021/10/24/gamedevelop/gameengine/unity/xiao-ji-qiao/unity-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h4 id="加快-C-编译速度技巧"><a href="#加快-C-编译速度技巧" class="headerlink" title="加快 C# 编译速度技巧"></a>加快 C# 编译速度技巧</h4><p><a href="https://www.xuanyusong.com/archives/4474">https://www.xuanyusong.com/archives/4474</a></p><h4 id="UnityEditor-到运行游戏耗时分析"><a href="#UnityEditor-到运行游戏耗时分析" class="headerlink" title="UnityEditor 到运行游戏耗时分析"></a>UnityEditor 到运行游戏耗时分析</h4><p><a href="https://github.com/Unity-Technologies/com.unity.editoriterationprofiler">https://github.com/Unity-Technologies/com.unity.editoriterationprofiler</a></p><p><a href="https://thegamedev.guru/unity-developer-performance/editor-iteration-times-profiler-eip/">https://thegamedev.guru/unity-developer-performance/editor-iteration-times-profiler-eip/</a></p><h4 id="《系统重构与迁移指南》"><a href="#《系统重构与迁移指南》" class="headerlink" title="《系统重构与迁移指南》"></a>《系统重构与迁移指南》</h4><p> <a href="https://github.com/phodal/migration">https://github.com/phodal/migration</a> </p><h4 id="游戏开发知识图谱"><a href="#游戏开发知识图谱" class="headerlink" title="游戏开发知识图谱"></a>游戏开发知识图谱</h4><p><a href="http://gamextech.org/">http://gamextech.org/</a></p><h4 id="数据建模案例：葡萄酒的质量分析与评价"><a href="#数据建模案例：葡萄酒的质量分析与评价" class="headerlink" title="数据建模案例：葡萄酒的质量分析与评价"></a>数据建模案例：葡萄酒的质量分析与评价</h4><p>链接：<a href="https://pan.baidu.com/s/19vHzYxofIlqz_c7BRMrgxA">https://pan.baidu.com/s/19vHzYxofIlqz_c7BRMrgxA</a><br>提取码：zlld </p><h4 id="ParrelSync-用于多开Unity编辑器，进行网络同步开发时很好用"><a href="#ParrelSync-用于多开Unity编辑器，进行网络同步开发时很好用" class="headerlink" title="ParrelSync 用于多开Unity编辑器，进行网络同步开发时很好用"></a>ParrelSync 用于多开Unity编辑器，进行网络同步开发时很好用</h4><p><a href="https://github.com/VeriorPies/ParrelSync">https://github.com/VeriorPies/ParrelSync</a></p><h4 id="C-动态修改-SLua-代码"><a href="#C-动态修改-SLua-代码" class="headerlink" title="C# 动态修改 SLua 代码"></a>C# 动态修改 SLua 代码</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222154504465.png" alt="image-20211222154504465" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222154901379.png" alt="image-20211222154901379" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222154610900.png" alt="image-20211222154610900" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222154642957.png" alt="image-20211222154642957" style="zoom:67%;"> <h1 id="资源加载相关"><a href="#资源加载相关" class="headerlink" title="资源加载相关"></a>资源加载相关</h1><h4 id="Unity协程的调用中止及yield-return的使用"><a href="#Unity协程的调用中止及yield-return的使用" class="headerlink" title="Unity协程的调用中止及yield return的使用"></a>Unity协程的调用中止及yield return的使用</h4><p><a href="http://www.javashuo.com/article/p-rleninkz-ge.html">http://www.javashuo.com/article/p-rleninkz-ge.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222155104829.png" alt="image-20211222155104829" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222155118284.png" alt="image-20211222155118284" style="zoom:80%;"> <h4 id="UnityWebRequest的初步使用及常用方法解析"><a href="#UnityWebRequest的初步使用及常用方法解析" class="headerlink" title="UnityWebRequest的初步使用及常用方法解析"></a>UnityWebRequest的初步使用及常用方法解析</h4><p><a href="https://blog.csdn.net/qwe25878/article/details/85051911">https://blog.csdn.net/qwe25878/article/details/85051911</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222155159555.png" alt="image-20211222155159555" style="zoom:80%;"> <h4 id="Unity3D项目Plugins目录组织"><a href="#Unity3D项目Plugins目录组织" class="headerlink" title="Unity3D项目Plugins目录组织"></a>Unity3D项目Plugins目录组织</h4><p>来自 <a href="https://blog.csdn.net/linxinfa/article/details/102978005">https://blog.csdn.net/linxinfa/article/details/102978005</a> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220722205212102.png" alt="image-20220722205212102"></p><h1 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h1><h4 id="Window-连接-Linux服务器方法"><a href="#Window-连接-Linux服务器方法" class="headerlink" title="Window 连接 Linux服务器方法"></a>Window 连接 Linux服务器方法</h4><p>Vscode</p><p>通过 Romote SSH 插件 <a href="https://www.cnblogs.com/tensortensor/p/13973804.html">https://www.cnblogs.com/tensortensor/p/13973804.html</a></p><p>Xshell</p><p><a href="https://blog.csdn.net/weixin_41893060/article/details/80899497">https://blog.csdn.net/weixin_41893060/article/details/80899497</a></p><p>SecureCRT</p><p>来自 <a href="https://blog.csdn.net/weixin_44417508/article/details/105962122">https://blog.csdn.net/weixin_44417508/article/details/105962122</a> </p><p>其他 VNC、cygwin 等</p><p><a href="https://www.cnblogs.com/aiqingqing/p/4581885.html">https://www.cnblogs.com/aiqingqing/p/4581885.html</a></p><h4 id="测试网络端口"><a href="#测试网络端口" class="headerlink" title="测试网络端口"></a>测试网络端口</h4><p><a href="https://blog.csdn.net/xiaoxinshuaiga/article/details/104829166">https://blog.csdn.net/xiaoxinshuaiga/article/details/104829166</a></p><p><a href="https://elifulkerson.com/projects/tcping.php">https://elifulkerson.com/projects/tcping.php</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721231009066.png" alt="image-20220721231009066" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721231046414.png" alt="image-20220721231046414" style="zoom:67%;"> <h4 id="win10怎么开启telnet服务"><a href="#win10怎么开启telnet服务" class="headerlink" title="win10怎么开启telnet服务"></a>win10怎么开启telnet服务</h4><p>来自 <a href="https://jingyan.baidu.com/article/fb48e8bee0d7446e622e143d.html">https://jingyan.baidu.com/article/fb48e8bee0d7446e622e143d.html</a> </p><p>测试 某个地址的端口是否连通</p><p>telnet 10.253.17.135 30051</p><p>手机使用 《网络万用表》应用进行测试</p><h1 id="Shader相关"><a href="#Shader相关" class="headerlink" title="Shader相关"></a>Shader相关</h1><h4 id="Shader-判断是否是纯色纹理"><a href="#Shader-判断是否是纯色纹理" class="headerlink" title="Shader 判断是否是纯色纹理"></a>Shader 判断是否是纯色纹理</h4><p>泊松分布方法 <a href="https://blog.csdn.net/cgy56191948/article/details/108781686">https://blog.csdn.net/cgy56191948/article/details/108781686</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SD学习</title>
      <link href="/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/tie-tu-gong-ju/cheng-xu-hua-gong-ju/sd/sd-xue-xi/"/>
      <url>/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/tie-tu-gong-ju/cheng-xu-hua-gong-ju/sd/sd-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>1.软件安装</p><p>最新版本下载地址：<a href="http://www.gfxcamp.com/substance-3d-designer-v112/">三维贴图材质制作软件 Substance 3D Designer V11.2.1.4934 Win/Mac 中文/英文/破解版 | 龋齿一号GFXCamp</a></p><p>安装：要求大家安装英文版本，中文版本支持不好，而且翻译容易歧义</p><p>初级入门教程</p><p>严美子老师 [（人美声甜技术高）,视频录制交早，使用软件为早期版本，不过影响不大，建议优先 观看与尝试练习制作]<br>    <a href="https://www.bilibili.com/video/av22746446/">Substance      Designer 中文教程_哔哩哔哩_bilibili 2</a>Substance     </p><p>Designer 2021 新手教程 -     [基于最新版本的教程，英文，各个节点讲解]<br>    <a href="https://www.bilibili.com/video/BV1dh411q7Rw?p=1">Substance      Designer 2021 新手教程_哔哩哔哩_bilibili 1</a></p><p>翼虎网 Substance Designer 2020-快速入门到案例实战教学</p><p><a href="https://www.yiihuu.com/a_9548.html">https://www.yiihuu.com/a_9548.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024115732813.png" alt="image-20211024115732813" style="zoom:80%;"> <h3 id="一、资源导入导出"><a href="#一、资源导入导出" class="headerlink" title="一、资源导入导出"></a>一、资源导入导出</h3><p>SD 的 import 只是复制文件，不会实时更新</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026212607282.png" alt="image-20211026212607282" style="zoom:67%;"> <p>Link 会实时跟随原始图片变化</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026212641082.png" alt="image-20211026212641082" style="zoom:67%;"> <p>发布</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026212656997.png" alt="image-20211026212656997" style="zoom: 80%;"> <h3 id="二、节点操控"><a href="#二、节点操控" class="headerlink" title="二、节点操控"></a>二、节点操控</h3><p>选择一个节点，按 返回键 便会删除这个节点，但保留原来的连线</p><p>选择一个线，新建的节点会默认连接</p><p>选择两个线，按 x 键可以交换两个的连接顺序</p><p>按 shift 可以同时移动多个节点到另一个节点上</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030120052053.png" alt="image-20211030120052053" style="zoom:67%;"> <p>灰色的点点代表节点是一个灰色的输入或输出</p><p>黄色的点点代表节点是一个RGB输入或输出</p><p>灰度和RGB相连接时会显示红色虚线，表示连接错误</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026213216446.png" alt="image-20211026213216446" style="zoom:67%;"> <p>可以使用 grayscale conversion 节点进行 RGB 转灰度</p><p>可以使用 gradient map 进行 灰度转 RGB</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026212737639.png" alt="image-20211026212737639" style="zoom:80%;"> <p>线的粗细代表位深度，线越粗，代表越大</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026214136502.png" alt="image-20211026214136502" style="zoom:67%;"> <p>选择一个节点，按D键进行折叠和展开</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026215255103.png" alt="image-20211026215255103" style="zoom:80%;"> <p>可以通过选择节点创建 Graph 节点，使用 input 和 output 进行自定义节点</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026220840199.png" alt="image-20211026220840199" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211026220943677.png" alt="image-20211026220943677" style="zoom:80%;"> <h3 id="三、2D-视图"><a href="#三、2D-视图" class="headerlink" title="三、2D 视图"></a>三、2D 视图</h3><p>节点上的棋盘格图标代表着在2d视图中显示，需要双击</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211028222714547.png" alt="image-20211028222714547" style="zoom:80%;"> <p>文档图标代表属性栏当前显示的节点属性</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211028222837528.png" alt="image-20211028222837528" style="zoom:67%;"> <p>2D窗口</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211028231345241.png" alt="image-20211028231345241"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211028232531579.png" alt="image-20211028232531579"> <h3 id="四、3D-视图"><a href="#四、3D-视图" class="headerlink" title="四、3D 视图"></a>四、3D 视图</h3><p>移动：鼠标中键、Ctrl+鼠标右键</p><p>缩放：鼠标滚轮、鼠标右键上下滑动</p><p>旋转：鼠标左键</p><p>旋转环境：shift+Ctrl+鼠标右键</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030094950556.png" alt="image-20211030094950556" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030094655455.png" alt="image-20211030094655455" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030095138279.png" alt="image-20211030095138279" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030095124178.png" alt="image-20211030095124178" style="zoom:80%;"> <p>在3D窗口中预览视图</p><p>方法一：点击节点右键</p><p>方法二：右键节点图标，然后拖拽到视图</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030095446126.png" alt="image-20211030095446126" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030095522052.png" alt="image-20211030095522052" style="zoom:80%;"> <h3 id="五、基本材质节点"><a href="#五、基本材质节点" class="headerlink" title="五、基本材质节点"></a>五、基本材质节点</h3><p>BaseMaterial</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030113217431.png" alt="image-20211030113217431" style="zoom:67%;"> <p>启用对应输入节点</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030113245264.png" alt="image-20211030113245264" style="zoom:67%;"> <p>一键创建输出节点</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030113355501.png" alt="image-20211030113355501" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211030113517298.png" alt="image-20211030113517298" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> ArtResource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 角色 </tag>
            
            <tag> 3D </tag>
            
            <tag> 模型 </tag>
            
            <tag> 贴图工具 </tag>
            
            <tag> 程序化工具 </tag>
            
            <tag> SD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shader报错集锦</title>
      <link href="/BloodSoul.github.io/2021/10/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-wen-ti-ji-lu/shader-bao-cuo-ji-jin/"/>
      <url>/BloodSoul.github.io/2021/10/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-wen-ti-ji-lu/shader-bao-cuo-ji-jin/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在使用 URP 库文件，但是程序仍然是 CGPROGRAM 会报 _Time 重定义的错误</p></li><li><p>在 URP 的Linear空间中使用 RT 渲染时,默认格式是 R8G8B8A8_SRGB 格式，如果想得到默认的中灰图，需要如下代码，并引入 Color 库</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"</span></span><span class="token function">Gamma22ToLinear</span><span class="token punctuation">(</span><span class="token function">half4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Gamma<span class="token operator">-&gt;</span><span class="token function">Linear</span><span class="token punctuation">(</span>RT Shader 写入时<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">Gamma</span><span class="token punctuation">(</span>系统写入时<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">Linear</span><span class="token punctuation">(</span>其他shader读取时<span class="token punctuation">)</span><span class="token comment">//RT 使用格式为：Gamma-&gt;Linear 然后写入时系统会自动转一次Gamma</span><span class="token comment">//拿到贴图时，需要再次从Gamma转Linear</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 Alpha Cutoff 的贴图，最好不要使用 Mip Maps，在不同层级切换时，会导致 Alpha 精度变动，导致白边和物体密度丢失</p><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211020110702104.png" alt="image-20211020110701185" style="zoom:80%;"> </li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211020111252815.png" alt="image-20211020111252815" style="zoom:80%;"> </li></ol></li><li><p>unity采样unity_SpecCube0得到UnityBlackCube（黑色）的问题，天空盒的贴图需要烘焙之后才有数据，所以要先烘焙才能用。</p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025113724301.png" alt="image-20211025113724301" style="zoom: 50%;"> </p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025113754796.png" alt="image-20211025113754796" style="zoom: 50%;">  </p><p>​    <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025113913172.png" alt="image-20211025113913172" style="zoom:67%;"> </p></li><li><p>模型切线的w记录是构造副法线是是否需要翻转，原因是在建模软件中使用镜像建模时，部分切线需要翻转而部分不需要翻转</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194858229.png" alt="image-20211025194858229" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211025194907116.png" alt="image-20211025194907116" style="zoom:80%;"> </li><li><p>使用抗锯齿时，屏幕UV不同平台的差异会出现，需要手动处理</p></li><li><p>Attributes 中的标签，必须使用全大写，不然的话，在Unity 中是正常的，在真机上会拿不到数据，变黑</p><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211102161546422.png" alt="image-20211102161546422" style="zoom:80%;"> </li></ol></li></ol><p>8.为什么我不能在顶点着色器中采样纹理？</p><ol><li><p><a href="http://www.ufgame.com/9620.html">http://www.ufgame.com/9620.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221151835839.png" alt="image-20211221151835839" style="zoom:67%;"> </li></ol><p>9.当在片元着色器上设定了使用顶点色，但是没有在顶点着色器中赋值，unity默认会填充RGB为0，A为1。 真机表现如下</p><ul><li><p>如果出错，直接不渲染，并不会赋默认值等</p></li><li><p>即使加上了 FallBack “Hidden/Universal     Render Pipeline/FallbackError” 真机不会显示粉色</p></li><li><p>即使直接 return half4(i.vertexCol.aaa,1)，也不会变粉色</p></li><li><p>即使在宏定义中打印对应值，也不会显示，也不会显示打印的内容</p><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221165941146.png" alt="image-20211221165941146" style="zoom:67%;"> </li></ul></li><li><p>但是在宏定义中使用常量打印，会生效</p><ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221170007200.png" alt="image-20211221170007200" style="zoom:80%;"> </li></ul></li></ul><ol start="10"><li><p>不能在顶点数据结构中重复定义，不然在Unity中不会出错，在真机会显示粉色</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221170050847.png" alt="image-20211221170050847" style="zoom:67%;"> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Package </tag>
            
            <tag> 渲染方向 </tag>
            
            <tag> 渲染问题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美术绘画分类</title>
      <link href="/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/artresource/2d/yuan-hua/li-lun-zhi-shi/feng-ge-fen-lei/mei-zhu-hui-hua-fen-lei/"/>
      <url>/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/artresource/2d/yuan-hua/li-lun-zhi-shi/feng-ge-fen-lei/mei-zhu-hui-hua-fen-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="一、风格分类"><a href="#一、风格分类" class="headerlink" title="一、风格分类"></a>一、风格分类</h1><p>轮廓线：勾勒物体形状的线</p><p>固有色：物体原本的颜色（默认是白光下物体呈现的色彩）</p><p>阴影：光照射物体后，没有被光照到的部分所呈现不同程度的黑暗区域</p><p>色光： 带有冷暖色彩倾向的光照射在物体上后，会改变其原本呈现的颜色（例：青苹果被夕阳的橙红光照射会偏向紫色）</p><p>具象塑造：物体的细节，即体现现实物体的详细结构和质感的描绘手法</p><p>抽象肌理：随机纹路，靠绘画材料的特性、笔刷效果等等这种抽象元素制造</p><p>*[具象塑造]与[抽象肌理]两者都是为了增加画面的信息量（精细度）。它们之间可以分开也可以巧妙结合。 </p><p><a href="https://www.douban.com/group/topic/234875985/">https://www.douban.com/group/topic/234875985/</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/p472025324.webp" alt="img"> </p><h1 id="二、职业分类（插画-原画）"><a href="#二、职业分类（插画-原画）" class="headerlink" title="二、职业分类（插画/原画）"></a>二、职业分类（插画/原画）</h1><p><a href="https://www.bilibili.com/read/cv7907297">https://www.bilibili.com/read/cv7907297</a></p><h4 id="插画："><a href="#插画：" class="headerlink" title="插画："></a>插画：</h4><p>一般是我们在一些杂志上、文学作品上所看到的一些插图，它的作用不是为了铺垫设定，而是通过精美的画面来清晰地表达文字中的内容。插画的用途比较广泛，例如广告插画，出版物插画，儿童绘本插画，自然科学插画等等</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017213350396.png" alt="image-20211017213350396" style="zoom:80%;"> <h4 id="原画："><a href="#原画：" class="headerlink" title="原画："></a>原画：</h4><p>主要是针对动画设计和游戏设计的，原画是关键的设计稿，在动画和游戏流程中起到非常重要的作用。原画的用途在人物设定、场景设定等等，这些都需要原画来做承接，游戏原画作为游戏制作前期的一个重要环节，主要内容是场景画面的描绘、人物的造型设计、材质的搭配等</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017213431656.png" alt="image-20211017213431656" style="zoom:80%;"> <h1 id="三、职业技能"><a href="#三、职业技能" class="headerlink" title="三、职业技能"></a>三、职业技能</h1><h4 id="插画技能"><a href="#插画技能" class="headerlink" title="插画技能"></a>插画技能</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%8F%92%E7%94%BB%E5%8E%9F%E7%94%BB%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD.jpg" alt="插画原画职业技能" style="zoom:50%;"> <h4 id="原画职业技能"><a href="#原画职业技能" class="headerlink" title="原画职业技能"></a>原画职业技能</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%8E%9F%E7%94%BB%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD.jpg" alt="原画职业技能" style="zoom:50%;"> <h4 id="厚涂技法"><a href="#厚涂技法" class="headerlink" title="厚涂技法"></a>厚涂技法</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%8E%9A%E6%B6%82%E6%8A%80%E6%B3%95.jpg" alt="厚涂技法" style="zoom:50%;"> ]]></content>
      
      
      <categories>
          
          <category> ArtResource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2D </tag>
            
            <tag> 原画 </tag>
            
            <tag> 风格分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原画学习01_透视原理</title>
      <link href="/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/artresource/2d/yuan-hua/li-lun-zhi-shi/tou-shi/yuan-hua-xue-xi-01-tou-shi-yuan-li/"/>
      <url>/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/artresource/2d/yuan-hua/li-lun-zhi-shi/tou-shi/yuan-hua-xue-xi-01-tou-shi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="透视"><a href="#透视" class="headerlink" title="透视"></a>透视</h1><p>近大远小，越拉伸距离灭点越近</p><h1 id="一点透视"><a href="#一点透视" class="headerlink" title="一点透视"></a>一点透视</h1><p>一个灭点，由摄像机移动产程</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017212005034.png" alt="image-20211017212005034"> </p><h1 id="二点透视"><a href="#二点透视" class="headerlink" title="二点透视"></a>二点透视</h1><p>有两个灭点，由物体旋转造成的</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017212123864.png" alt="image-20211017212123864" style="zoom:80%;"> <h1 id="三点透视"><a href="#三点透视" class="headerlink" title="三点透视"></a>三点透视</h1><p>由物体旋转 + 摄像机旋转产生</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017212335037.png" alt="image-20211017212335037" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017212451979.png" alt="image-20211017212451979" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> ArtResource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2D </tag>
            
            <tag> 原画 </tag>
            
            <tag> 透视 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染效果参考</title>
      <link href="/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/xuan-ran-xiao-guo-can-kao/xuan-ran-xiao-guo-can-kao/"/>
      <url>/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/xuan-ran-xiao-guo-can-kao/xuan-ran-xiao-guo-can-kao/</url>
      
        <content type="html"><![CDATA[<h1 id="一、特效"><a href="#一、特效" class="headerlink" title="一、特效"></a>一、特效</h1><h3 id="Starry-Sky-星空渲染"><a href="#Starry-Sky-星空渲染" class="headerlink" title="Starry Sky (星空渲染)"></a>Starry Sky (星空渲染)</h3><p><a href="https://assetstore.unity.com/publishers/13886">https://assetstore.unity.com/publishers/13886</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017203422188.png" alt="image-20211017203422188"></p><h3 id="Tornado-龙卷风"><a href="#Tornado-龙卷风" class="headerlink" title="Tornado (龙卷风)"></a>Tornado (龙卷风)</h3><p><a href="https://www.shadertoy.com/view/wtf3Wn">https://www.shadertoy.com/view/wtf3Wn</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017203634996.png" alt="image-20211017203634996" style="zoom:80%;"> <p><a href="https://www.shadertoy.com/view/WttcR8">https://www.shadertoy.com/view/WttcR8</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017203727342.png" alt="image-20211017203727342" style="zoom: 80%;"> <p><a href="https://www.shadertoy.com/view/wdfyzN">https://www.shadertoy.com/view/wdfyzN</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017203818994.png" alt="image-20211017203818994" style="zoom:80%;"> <p><a href="https://assetstore.unity.com/packages/vfx/particles/spells/epic-toon-vfx-2-157651">https://assetstore.unity.com/packages/vfx/particles/spells/epic-toon-vfx-2-157651</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024120210586.png" alt="image-20211024120210586" style="zoom:80%;"> <h3 id="Brush-笔刷"><a href="#Brush-笔刷" class="headerlink" title="Brush(笔刷)"></a>Brush(笔刷)</h3><p><a href="https://www.shadertoy.com/view/ltj3Wc">https://www.shadertoy.com/view/ltj3Wc</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017203920413.png" alt="image-20211017203920413" style="zoom:80%;"> <h3 id="2D-Shader-Magic-2D-图片效果"><a href="#2D-Shader-Magic-2D-图片效果" class="headerlink" title="2D Shader Magic (2D 图片效果)"></a>2D Shader Magic (2D 图片效果)</h3><p><a href="https://assetstore.unity.com/publishers/13886">https://assetstore.unity.com/publishers/13886</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017205801573.png" alt="image-20211017205801573" style="zoom:80%;"> <h3 id="Hyperspace-Teleport-超空间传送效果"><a href="#Hyperspace-Teleport-超空间传送效果" class="headerlink" title="Hyperspace Teleport(超空间传送效果)"></a>Hyperspace Teleport(超空间传送效果)</h3><p><a href="https://assetstore.unity.com/publishers/13886">https://assetstore.unity.com/publishers/13886</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017205950730.png" alt="image-20211017205950730" style="zoom:80%;"> <p><a href="https://zhuanlan.zhihu.com/p/77608852">https://zhuanlan.zhihu.com/p/77608852</a></p><p><a href="https://github.com/keijiro/TestbedHDRP">https://github.com/keijiro/TestbedHDRP</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211023112616617.png" alt="image-20211023112616617" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211023112712478.png" alt="image-20211023112712478" style="zoom:80%;"> <p><a href="https://github.com/keijiro/GVoxelizer/tree/master/ProjectSettings">https://github.com/keijiro/GVoxelizer/tree/master/ProjectSettings</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211023112724939.png" alt="image-20211023112724939" style="zoom:80%;"> <p><a href="https://github.com/keijiro/VectorFieldExamples">https://github.com/keijiro/VectorFieldExamples</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211023112836972.png" alt="image-20211023112836972" style="zoom:80%;"> <h3 id="火焰"><a href="#火焰" class="headerlink" title="火焰"></a>火焰</h3><p><a href="https://twitter.com/chiba_akihito">https://twitter.com/chiba_akihito</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017212724499.png" alt="image-20211017212724499" style="zoom:80%;"> <p><a href="https://youtu.be/XQlFokCzU6M">https://youtu.be/XQlFokCzU6M</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024112941763.png" alt="image-20211024112941763" style="zoom:80%;"> <p><a href="https://youtu.be/w3Xzzs1TWpk">https://youtu.be/w3Xzzs1TWpk</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113037468.png" alt="image-20211024113037468" style="zoom: 80%;"> <h3 id="爆炸"><a href="#爆炸" class="headerlink" title="爆炸"></a>爆炸</h3><p><a href="https://www.youtube.com/watch?v=8utDEwPYsfw">https://www.youtube.com/watch?v=8utDEwPYsfw</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211031115150810.png" alt="image-20211031115150810" style="zoom:67%;"> <h3 id="激光炮"><a href="#激光炮" class="headerlink" title="激光炮"></a>激光炮</h3><p><a href="https://www.youtube.com/watch?v=TR1xM1HMNQ8&amp;t=4s">https://www.youtube.com/watch?v=TR1xM1HMNQ8&amp;t=4s</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211031115305249.png" alt="image-20211031115305249" style="zoom:67%;"> <h3 id="护盾"><a href="#护盾" class="headerlink" title="护盾"></a>护盾</h3><p><a href="https://youtu.be/IZAzckJaSO8">https://youtu.be/IZAzckJaSO8</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113135132.png" alt="image-20211024113135132" style="zoom:80%;"> <p><a href="https://www.youtube.com/watch?v=i2w0p_mV8_g&amp;t=6s">https://www.youtube.com/watch?v=i2w0p_mV8_g&amp;t=6s</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211031121518526.png" alt="image-20211031121518526" style="zoom:80%;"> <h3 id="魔法阵"><a href="#魔法阵" class="headerlink" title="魔法阵"></a>魔法阵</h3><p><a href="https://assetstore.unity.com/packages/vfx/particles/the-beautiful-portal-level-up-teleport-warp-vfx-181236">https://assetstore.unity.com/packages/vfx/particles/the-beautiful-portal-level-up-teleport-warp-vfx-181236</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211031121033610.png" alt="image-20211031121033610"></p><h3 id="刀光"><a href="#刀光" class="headerlink" title="刀光"></a>刀光</h3><p><a href="https://zhuanlan.zhihu.com/p/339785163">https://zhuanlan.zhihu.com/p/339785163</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024112431731.png" alt="image-20211024112431731" style="zoom:80%;"> <p><a href="https://assetstore.unity.com/publishers/52783">https://assetstore.unity.com/publishers/52783</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024120128346.png" alt="image-20211024120128346" style="zoom:80%;"> <h3 id="冰"><a href="#冰" class="headerlink" title="冰"></a>冰</h3><p><a href="https://youtu.be/gfOaGvNQ28U">https://youtu.be/gfOaGvNQ28U</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113450452.png" alt="image-20211024113450452" style="zoom:80%;"> <h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p><a href="https://assetstore.unity.com/packages/vfx/particles/perfect-rpg-mmo-3d-effect-vfx-pack-190082">https://assetstore.unity.com/packages/vfx/particles/perfect-rpg-mmo-3d-effect-vfx-pack-190082</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024120051002.png" alt="image-20211024120051002" style="zoom:80%;"> <p><a href="https://assetstore.unity.com/publishers/8569">https://assetstore.unity.com/publishers/8569</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024120238347.png" alt="image-20211024120238347" style="zoom:80%;"> <h1 id="二、场景效果"><a href="#二、场景效果" class="headerlink" title="二、场景效果"></a>二、场景效果</h1><h3 id="Raindrop-Wet-Surface-（下雨潮湿表面）"><a href="#Raindrop-Wet-Surface-（下雨潮湿表面）" class="headerlink" title="Raindrop Wet Surface （下雨潮湿表面）"></a>Raindrop Wet Surface （下雨潮湿表面）</h3><p><a href="https://assetstore.unity.com/publishers/13886">https://assetstore.unity.com/publishers/13886</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017204056571.png" alt="image-20211017204056571" style="zoom:80%;"> <p><a href="https://seblagarde.wordpress.com/2013/01/03/water-drop-2b-dynamic-rain-and-its-effects/">https://seblagarde.wordpress.com/2013/01/03/water-drop-2b-dynamic-rain-and-its-effects/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017204140518.png" alt="image-20211017204140518" style="zoom:80%;"> <p>逆水寒下雨效果解析：</p><p> <a href="https://zhuanlan.zhihu.com/p/111904859">https://zhuanlan.zhihu.com/p/111904859</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017204320108.png" alt="image-20211017204320108" style="zoom:80%;"> <p><a href="https://zhuanlan.zhihu.com/p/182459720">https://zhuanlan.zhihu.com/p/182459720</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017205116668.png" alt="image-20211017205116668" style="zoom:80%;"> <p><a href="https://zhuanlan.zhihu.com/p/331781508">https://zhuanlan.zhihu.com/p/331781508</a></p><p><a href="https://github.com/clatterrr/FluidSimulationTutorialsUnity">https://github.com/clatterrr/FluidSimulationTutorialsUnity</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024112705056.png" alt="image-20211024112705056" style="zoom:80%;"> <p>海之号角2 屏幕雨效果模拟 </p><p><a href="https://zhuanlan.zhihu.com/p/90697134">https://zhuanlan.zhihu.com/p/90697134</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024114309981.png" alt="image-20211024114309981" style="zoom:80%;"> <p>NVIDIA 的 GPU 雨模拟 </p><p><a href="https://developer.download.nvidia.cn/SDK/10/direct3d/Source/rain/doc/RainSDKWhitePaper.pdf">https://developer.download.nvidia.cn/SDK/10/direct3d/Source/rain/doc/RainSDKWhitePaper.pdf</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024114522169.png" alt="image-20211024114522169" style="zoom:80%;"> <p>雨线模拟 </p><p><a href="https://www1.cs.columbia.edu/CAVE/publications/pdfs/Garg_TOG06.pdf">https://www1.cs.columbia.edu/CAVE/publications/pdfs/Garg_TOG06.pdf</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024114632615.png" alt="image-20211024114632615" style="zoom:80%;"> <p>Unity 商店效果</p><p><a href="https://assetstore.unity.com/packages/vfx/particles/environment/realistic-rain-storm-46192#content">https://assetstore.unity.com/packages/vfx/particles/environment/realistic-rain-storm-46192#content</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024114830092.png" alt="image-20211024114830092" style="zoom:80%;"> <p><a href="https://assetstore.unity.com/packages/vfx/particles/environment/rain-35156#content">https://assetstore.unity.com/packages/vfx/particles/environment/rain-35156#content</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024114903319.png" alt="image-20211024114903319" style="zoom:80%;"> <h3 id="Lightning-闪电"><a href="#Lightning-闪电" class="headerlink" title="Lightning(闪电)"></a>Lightning(闪电)</h3><p><a href="https://zhuanlan.zhihu.com/p/38785982">https://zhuanlan.zhihu.com/p/38785982</a></p><p><a href="https://github.com/noobdawn/Fractal-Lightning-Unity">https://github.com/noobdawn/Fractal-Lightning-Unity</a></p><p>分形闪电</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017210454663.png" alt="image-20211017210454663" style="zoom:80%;"> <p>黑白屏控制</p><p> <a href="https://zhuanlan.zhihu.com/p/118533357">https://zhuanlan.zhihu.com/p/118533357</a> </p><p><a href="https://github.com/MarcusXie3D/MobileWeatherSystem">https://github.com/MarcusXie3D/MobileWeatherSystem</a></p><p><a href="https://www.youtube.com/watch?v=ewC_c6aHbf8">Unity 2017 - Game VFX -Lightning and Thunder Effect</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113753798.png" alt="image-20211024113753798" style="zoom:80%;"> <p>程序闪电</p><p><a href="https://assetstore.unity.com/packages/tools/particles-effects/procedural-lightning-high-performance-and-shocking-lightning-34217">https://assetstore.unity.com/packages/tools/particles-effects/procedural-lightning-high-performance-and-shocking-lightning-34217</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113839856.png" alt="image-20211024113839856" style="zoom:80%;"> <p>免费版本 <a href="https://assetstore.unity.com/packages/tools/particles-effects/lightning-bolt-effect-for-unity-59471">https://assetstore.unity.com/packages/tools/particles-effects/lightning-bolt-effect-for-unity-59471</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113914561.png" alt="image-20211024113914561" style="zoom:80%;"> <p>着色器闪电，附带完整解决方案 <a href="https://assetstore.unity.com/packages/tools/particles-effects/thor-thunderstorm-103956">https://assetstore.unity.com/packages/tools/particles-effects/thor-thunderstorm-103956</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024113947790.png" alt="image-20211024113947790" style="zoom:80%;"> <h3 id="可交互地表"><a href="#可交互地表" class="headerlink" title="可交互地表"></a>可交互地表</h3><p><a href="https://github.com/TYJia/SandTrace">https://github.com/TYJia/SandTrace</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024125609176.png" alt="image-20211024125609176" style="zoom:80%;"> <h3 id="Mirror（镜子）"><a href="#Mirror（镜子）" class="headerlink" title="Mirror（镜子）"></a>Mirror（镜子）</h3><p><a href="https://github.com/Kink3d/kMirrors">https://github.com/Kink3d/kMirrors</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171144101.png" alt="image-20211029171144101" style="zoom:80%;">  <h3 id="Portal-Visibility（可见性测试）"><a href="#Portal-Visibility（可见性测试）" class="headerlink" title="Portal Visibility（可见性测试）"></a>Portal Visibility（可见性测试）</h3><p><a href="https://github.com/Kink3d/kPortals">https://github.com/Kink3d/kPortals</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171352549.png" alt="image-20211029171352549" style="zoom:80%;"> <h3 id="Water-水"><a href="#Water-水" class="headerlink" title="Water (水)"></a>Water (水)</h3><p>URP 官网海水示例</p><p><a href="https://www.youtube.com/watch?v=gRq-IdShxpU">https://www.youtube.com/watch?v=gRq-IdShxpU</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171847946.png" alt="image-20211029171847946" style="zoom:80%;"> <p><a href="https://www.youtube.com/watch?v=FbTAbOnhRcI">OCEAN shader with Unity Shader Graph!</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029185158340.png" alt="image-20211029185158340" style="zoom: 67%;"> <p>Water Rendering in Far Cry 5</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029185225833.png" alt="image-20211029185225833" style="zoom:67%;"> <p>KWS Water System (URP Rendering)</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029185252327.png" alt="image-20211029185252327" style="zoom:80%;"> <h3 id="Interactive-Water（-可交互水体）"><a href="#Interactive-Water（-可交互水体）" class="headerlink" title="Interactive Water（ 可交互水体）"></a>Interactive Water（ 可交互水体）</h3><p>UIWS</p><p><a href="https://marketplace-website-node-launcher-prod.ol.epicgames.com/ue/marketplace/zh-CN/product/uiws-unified-interactive-water-system">https://marketplace-website-node-launcher-prod.ol.epicgames.com/ue/marketplace/zh-CN/product/uiws-unified-interactive-water-system</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171958338.png" alt="image-20211029171958338" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172014540.png" alt="image-20211029172014540" style="zoom:67%;"> <p>SHADERSOURCE - Fluid Interaction Tool</p><p><a href="https://marketplace-website-node-launcher-prod.ol.epicgames.com/ue/marketplace/zh-CN/product/fluid-interaction-tool">https://marketplace-website-node-launcher-prod.ol.epicgames.com/ue/marketplace/zh-CN/product/fluid-interaction-tool</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172052810.png" alt="image-20211029172052810" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029172101962.png" alt="image-20211029172101962" style="zoom:67%;"> <p>Interactive Water 2D</p><p><a href="https://assetstore.unity.com/packages/tools/particles-effects/interactive-water-2d-45997">https://assetstore.unity.com/packages/tools/particles-effects/interactive-water-2d-45997</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222161549664.png" alt="image-20211222161549664" style="zoom:67%;"> <p>Interactive Water 3D</p><p><a href="https://assetstore.unity.com/packages/tools/particles-effects/interactive-water-3d-47746">https://assetstore.unity.com/packages/tools/particles-effects/interactive-water-3d-47746</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222161622900.png" alt="image-20211222161622900" style="zoom:67%;"> <p>Simple Interactive Water for URP HDRP VR</p><p><a href="https://assetstore.unity.com/packages/vfx/shaders/simple-interactive-water-for-urp-hdrp-vr-162033">https://assetstore.unity.com/packages/vfx/shaders/simple-interactive-water-for-urp-hdrp-vr-162033</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222161651131.png" alt="image-20211222161651131" style="zoom:67%;"> <h3 id="体积雾"><a href="#体积雾" class="headerlink" title="体积雾"></a>体积雾</h3><p>UE4之制作高端霸气的干冰体积雾</p><p><a href="https://zhuanlan.zhihu.com/p/107016039">https://zhuanlan.zhihu.com/p/107016039</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221150748169.png" alt="image-20211221150748169" style="zoom:67%;"> <h3 id="体积云"><a href="#体积云" class="headerlink" title="体积云"></a>体积云</h3><p>Bump Noise Cloud – 3D噪点+GPU instancing制作基于模型的体积云</p><p>类似 《光遇》</p><p><a href="http://walkingfat.com/bump-noise-cloud-3d%E5%99%AA%E7%82%B9gpu-instancing%E5%88%B6%E4%BD%9C%E5%9F%BA%E4%BA%8E%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BD%93%E7%A7%AF%E4%BA%91/">http://walkingfat.com/bump-noise-cloud-3d%e5%99%aa%e7%82%b9gpu-instancing%e5%88%b6%e4%bd%9c%e5%9f%ba%e4%ba%8e%e6%a8%a1%e5%9e%8b%e7%9a%84%e4%bd%93%e7%a7%af%e4%ba%91/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221151231127.png" alt="image-20211221151231127" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221151247598.png" alt="image-20211221151247598" style="zoom:67%;"> <p>基于Tessellation的体积云</p><p><a href="http://walkingfat.com/%E5%9F%BA%E4%BA%8Etessellation%E7%9A%84%E4%BD%93%E7%A7%AF%E4%BA%91/">http://walkingfat.com/%e5%9f%ba%e4%ba%8etessellation%e7%9a%84%e4%bd%93%e7%a7%af%e4%ba%91/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221151338209.png" alt="image-20211221151338209" style="zoom:67%;"> <h1 id="二、后效"><a href="#二、后效" class="headerlink" title="二、后效"></a>二、后效</h1><h3 id="Screen-Transition-Shader-屏幕转场效果"><a href="#Screen-Transition-Shader-屏幕转场效果" class="headerlink" title="Screen Transition Shader (屏幕转场效果)"></a>Screen Transition Shader (屏幕转场效果)</h3><p><a href="https://assetstore.unity.com/publishers/13886">https://assetstore.unity.com/publishers/13886</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017204928058.png" alt="image-20211017204928058" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017204946959.png" alt="image-20211017204946959" style="zoom:80%;"> <h3 id="Raindrops（雨滴模拟）"><a href="#Raindrops（雨滴模拟）" class="headerlink" title="Raindrops（雨滴模拟）"></a>Raindrops（雨滴模拟）</h3><p><a href="https://zhuanlan.zhihu.com/p/298606553">https://zhuanlan.zhihu.com/p/298606553</a></p><p><a href="https://www.shadertoy.com/view/ltffzl">https://www.shadertoy.com/view/ltffzl</a></p><p><a href="https://github.com/ya7gisa0/Unity-Raindrops">https://github.com/ya7gisa0/Unity-Raindrops</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017205554465.png" alt="image-20211017205554465" style="zoom:80%;"> <p><a href="https://github.com/Kink3d/LensRain">https://github.com/Kink3d/LensRain</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029170819017.png" alt="image-20211029170819017" style="zoom:80%;"> <h3 id="坏电视（信号干扰）"><a href="#坏电视（信号干扰）" class="headerlink" title="坏电视（信号干扰）"></a>坏电视（信号干扰）</h3><p><a href="https://github.com/klj35/LearnUnityShader">https://github.com/klj35/LearnUnityShader</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211017215059420.png" alt="image-20211017215059420" style="zoom:80%;"> <h3 id="Digital-Rain（数字雨）"><a href="#Digital-Rain（数字雨）" class="headerlink" title="Digital Rain（数字雨）"></a>Digital Rain（数字雨）</h3><p><a href="https://www.shadertoy.com/view/NsyXDm">https://www.shadertoy.com/view/NsyXDm</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211023113148722.png" alt="image-20211023113148722" style="zoom:80%;"> <h3 id="Motion-Blur-（运动模糊）"><a href="#Motion-Blur-（运动模糊）" class="headerlink" title="Motion Blur （运动模糊）"></a>Motion Blur （运动模糊）</h3><p><a href="https://github.com/Kink3d/kMotion">https://github.com/Kink3d/kMotion</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171030013.png" alt="image-20211029171030013" style="zoom:80%;"> <h1 id="三、UI"><a href="#三、UI" class="headerlink" title="三、UI"></a>三、UI</h1><p><a href="https://zhuanlan.zhihu.com/p/144732274">https://zhuanlan.zhihu.com/p/144732274</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024112329924.png" alt="image-20211024112329924" style="zoom: 67%;"> <h1 id="四、噪声"><a href="#四、噪声" class="headerlink" title="四、噪声"></a>四、噪声</h1><p>K神的噪声库 <a href="https://github.com/keijiro/NoiseShader">https://github.com/keijiro/NoiseShader</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024112522269.png" alt="image-20211024112522269" style="zoom:80%;"> <h1 id="五、五彩斑斓的效果"><a href="#五、五彩斑斓的效果" class="headerlink" title="五、五彩斑斓的效果"></a>五、五彩斑斓的效果</h1><p><a href="https://zhuanlan.zhihu.com/p/165144284">https://zhuanlan.zhihu.com/p/165144284</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123953641.png" alt="image-20211024123953641" style="zoom:67%;"> <p><a href="https://www.element3ds.com/forum.php?mod=viewthread&amp;tid=347261&amp;extra=page=1">https://www.element3ds.com/forum.php?mod=viewthread&amp;tid=347261&amp;extra=page%3D1</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123300704.png" alt="image-20211024123300704" style="zoom: 50%;"> <p><a href="https://mp.weixin.qq.com/s/yvOwySJVfwTS3ipAHYwZAg">https://mp.weixin.qq.com/s/yvOwySJVfwTS3ipAHYwZAg</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123629285.png" alt="image-20211024123629285" style="zoom:80%;"> <p><a href="https://80.lv/articles/building-an-iridescence-shader-in-ue4/">https://80.lv/articles/building-an-iridescence-shader-in-ue4/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123705486.png" alt="image-20211024123705486" style="zoom: 50%;"> <p><a href="https://blog.naver.com/PostView.nhn?blogId=daehuck&amp;logNo=220800855171&amp;categoryNo=34">https://blog.naver.com/PostView.nhn?blogId=daehuck&amp;logNo=220800855171&amp;categoryNo=34</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123744253.png" alt="image-20211024123744253" style="zoom:80%;"> <p><a href="https://80.lv/articles/stylized-character-production-techniques-in-ue4/">https://80.lv/articles/stylized-character-production-techniques-in-ue4/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123833795.png" alt="image-20211024123833795" style="zoom: 50%;"> <p><a href="https://polycount.com/discussion/141545/ue4-polarized-colored-reflections">https://polycount.com/discussion/141545/ue4-polarized-colored-reflections</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024123918583.png" alt="image-20211024123918583" style="zoom:80%;"> <p><a href="https://github.com/TYJia/Bubble">https://github.com/TYJia/Bubble</a></p><p><a href="https://github.com/klj35/Bubble">https://github.com/klj35/Bubble</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211024124454146.png" alt="image-20211024124454146" style="zoom:80%;"> <h1 id="六、工具"><a href="#六、工具" class="headerlink" title="六、工具"></a>六、工具</h1><h3 id="Bezier-Spline-贝塞尔曲线"><a href="#Bezier-Spline-贝塞尔曲线" class="headerlink" title="Bezier Spline (贝塞尔曲线)"></a>Bezier Spline (贝塞尔曲线)</h3><p><a href="https://github.com/Kink3d/kSplines">https://github.com/Kink3d/kSplines</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171558412.png" alt="image-20211029171558412" style="zoom:80%;"> <h3 id="URP-Debug"><a href="#URP-Debug" class="headerlink" title="URP Debug"></a>URP Debug</h3><p><a href="https://assetstore.unity.com/packages/tools/utilities/urp-debug-views-158837">https://assetstore.unity.com/packages/tools/utilities/urp-debug-views-158837</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171722188.png" alt="image-20211029171722188" style="zoom:80%;"> <h1 id="七、角色"><a href="#七、角色" class="headerlink" title="七、角色"></a>七、角色</h1><h3 id="卡通渲染"><a href="#卡通渲染" class="headerlink" title="卡通渲染"></a>卡通渲染</h3><p><a href="https://github.com/Kink3d/kShading">https://github.com/Kink3d/kShading</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211029171637683.png" alt="image-20211029171637683" style="zoom:80%;"> <h3 id="毛发渲染"><a href="#毛发渲染" class="headerlink" title="毛发渲染"></a>毛发渲染</h3><p>Fluffy Grooming Tool</p><p><a href="https://assetstore.unity.com/packages/tools/modeling/fluffy-grooming-tool-193828">https://assetstore.unity.com/packages/tools/modeling/fluffy-grooming-tool-193828</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221143311806.png" alt="image-20211221143311806" style="zoom: 50%;">  <p>微元素地址：</p><p>Unity全新毛茸茸梳毛工具Fluffy Grooming Tool</p><p><a href="https://www.element3ds.com/thread-408622-1-1.html">https://www.element3ds.com/thread-408622-1-1.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221143414480.png" alt="image-20211221143414480" style="zoom:50%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 渲染效果参考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>傅里叶变换</title>
      <link href="/BloodSoul.github.io/2021/10/03/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/fu-li-xie-bian-huan/fu-li-xie-bian-huan/"/>
      <url>/BloodSoul.github.io/2021/10/03/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/fu-li-xie-bian-huan/fu-li-xie-bian-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="零、-傅里叶知识结构"><a href="#零、-傅里叶知识结构" class="headerlink" title="零、 傅里叶知识结构"></a>零、 傅里叶知识结构</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103602953.png" alt="image-20211003103602953" style="zoom:150%;"> <h1 id="一、微分积分"><a href="#一、微分积分" class="headerlink" title="一、微分积分"></a>一、微分积分</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101426711.png" alt="image-20211003101426711" style="zoom:80%;"> <p>微分：是通过在一个非常小的变化中，利用简单方程进行近似模拟出原方程，进行研究求得正确结果的过程（微分就是将函数化繁为简，在局部近似出一个简单的函数替代原函数，使用该简单函数进行推导查看起变化，进而求出正确结果的过程）。可以简单理解为斜率，变化率，切线</p><p>积分：简单理解为 求某个方程与X轴围城的面积</p><p>定积分：简单理解为 给一个确定的X范围，求出方程与X轴围城的面积</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101540223.png" alt="image-20211003101540223" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101612731.png" alt="image-20211003101612731" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101752360.png" alt="image-20211003101752360" style="zoom:80%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101832229.png" alt="image-20211003101832229" style="zoom:80%;"><h1 id="二、三角函数的运算"><a href="#二、三角函数的运算" class="headerlink" title="二、三角函数的运算"></a>二、三角函数的运算</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003101907589.png" alt="image-20211003101907589" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102017358.png" alt="image-20211003102017358" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102039206.png" alt="image-20211003102039206" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102100656.png" alt="image-20211003102100656" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102228817.png" alt="image-20211003102228817" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102412535.png" alt="image-20211003102412535" style="zoom:80%;"> <h1 id="三、正交"><a href="#三、正交" class="headerlink" title="三、正交"></a>三、正交</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102445311.png" alt="image-20211003102445311" style="zoom:80%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003102519417.png" alt="image-20211003102519417" style="zoom:80%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/Screenshot_20210930_105342_com.jd.app.reader.jpg" alt="Screenshot_20210930_105342_com.jd.app.reader" style="zoom:80%;"> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103008703.png" alt="image-20211003103008703" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103030878.png" alt="image-20211003103030878" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103145203.png" alt="image-20211003103145203" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103249636.png" alt="image-20211003103249636" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103401636.png" alt="image-20211003103401636" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003103428672.png" alt="image-20211003103428672" style="zoom:80%;"><h1 id="四、三角函数合成"><a href="#四、三角函数合成" class="headerlink" title="四、三角函数合成"></a>四、三角函数合成</h1><h5 id="4-1-相同周期的合成"><a href="#4-1-相同周期的合成" class="headerlink" title="4.1 相同周期的合成"></a>4.1 相同周期的合成</h5><p><strong>相互正交的两个函数，他们自己无法通过组合表示对方，例如 X,Y</strong></p><p>sinmx 与 cosmx， 以及 sinm 与 sinn （m不等于n),等等</p> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/Screenshot_20210930_144428_com.jd.app.reader.jpg" alt="Screenshot_20210930_144428_com.jd.app.reader" style="zoom:80%;"> <p>acosx + bsinx 可以理解成用 cosx 和 sinx 表示基底，也就是X轴Y轴表示坐标</p><p>还可以理解成如下方式：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003104608111.png" alt="image-20211003104608111" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003104851782.png" alt="image-20211003104851782" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105001738.png" alt="image-20211003105001738" style="zoom:80%;"> <h5 id="4-2-不同周期的合成"><a href="#4-2-不同周期的合成" class="headerlink" title="4.2 不同周期的合成"></a>4.2 不同周期的合成</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105503492.png" alt="image-20211003105503492" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105541198.png" alt="image-20211003105541198" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105601935.png" alt="image-20211003105601935" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105626862.png" alt="image-20211003105626862" style="zoom:80%;"> <h1 id="五、傅里叶级数"><a href="#五、傅里叶级数" class="headerlink" title="五、傅里叶级数"></a>五、傅里叶级数</h1><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105721218.png" alt="image-20211003105721218" style="zoom:80%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/Screenshot_20210930_152601_com.jd.app.reader.jpg" alt="Screenshot_20210930_152601_com.jd.app.reader" style="zoom:80%;">  </p><p><strong>锯齿状波</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003105924089.png" alt="image-20211003105924089" style="zoom:80%;">  <p><strong>方形波</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110141802.png" alt="image-20211003110141802" style="zoom:80%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/Screenshot_20210930_153526_com.jd.app.reader.jpg" alt="Screenshot_20210930_153526_com.jd.app.reader"></p><h1 id="六、傅里叶变换与解析"><a href="#六、傅里叶变换与解析" class="headerlink" title="六、傅里叶变换与解析"></a>六、傅里叶变换与解析</h1><p>傅里叶变换：选择一个无规律的波形，找出其最大的周期，然后假设该周期进行循环，进行研究，拆解出它是由哪些基础波形进行组合的到的，研究一个波形是怎样组合而成的叫傅里叶变换，这里的组合并不一定完全遵循傅里叶级数</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110704993.png" alt="image-20211003110704993" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110748339.png" alt="image-20211003110748339" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110416972.png" alt="image-20211003110416972" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003111050177.png" alt="image-20211003111050177" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/Screenshot_20210930_154507_com.jd.app.reader.jpg" alt="Screenshot_20210930_154507_com.jd.app.reader" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110602297.png" alt="image-20211003110602297" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110631601.png" alt="image-20211003110631601" style="zoom:80%;"> <p><strong>傅里叶系数的三个表达式</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110939324.png" alt="image-20211003110939324" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211003110909826.png" alt="image-20211003110909826" style="zoom:80%;"> <h4 id="个人简单理解："><a href="#个人简单理解：" class="headerlink" title="个人简单理解："></a>个人简单理解：</h4><p>傅里叶变换：任何一个曲线，可以转换成傅里叶级数的表达形式</p><p>傅里叶逆变换：可以将变换后的傅里叶表达，通过逆变换成原始曲线</p><p>知乎上的解析：</p><p><a href="https://zhuanlan.zhihu.com/p/19759362">https://zhuanlan.zhihu.com/p/19759362</a></p><p>在线可视化网站：</p><p><a href="http://bgrawi.com/Fourier-Visualizations/">http://bgrawi.com/Fourier-Visualizations/</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 傅里叶变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染流水线</title>
      <link href="/BloodSoul.github.io/2021/10/02/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/xuan-ran-liu-shui-xian/xuan-ran-liu-shui-xian/"/>
      <url>/BloodSoul.github.io/2021/10/02/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/xuan-ran-liu-shui-xian/xuan-ran-liu-shui-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、知识概念"><a href="#一、知识概念" class="headerlink" title="一、知识概念"></a>一、知识概念</h1><h3 id="1-1-其次坐标空间"><a href="#1-1-其次坐标空间" class="headerlink" title="1.1 其次坐标空间"></a>1.1 其次坐标空间</h3><p>因为平移是仿射变换，无法使用 3x3 矩阵表示，需要使用 4x4 矩阵表示，把矩阵扩展到四维空间下进行统一表示旋转、平移、缩放，这个四维空间叫 <strong>齐次坐标空间</strong> </p><h4 id="1-1-1-常见变换类型的特性"><a href="#1-1-1-常见变换类型的特性" class="headerlink" title="1.1.1 常见变换类型的特性"></a>1.1.1 常见变换类型的特性</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022141612240.png" alt="image-20211022141612240" style="zoom:80%;">  <p>Tip：</p><ol><li>注意旋转矩阵和镜像矩阵是正交矩阵</li><li> <strong>正交矩阵的逆矩阵等于它的转置矩阵</strong> ，可以避免复杂的求逆矩阵过程，就可以直接得到逆矩阵</li></ol><h4 id="1-1-2-点和方向矢量扩展到四维的区别"><a href="#1-1-2-点和方向矢量扩展到四维的区别" class="headerlink" title="1.1.2 点和方向矢量扩展到四维的区别"></a>1.1.2 点和方向矢量扩展到四维的区别</h4><p>点扩展到四维空间时，需要指定 <strong>w 的分量为 1</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022143609742.png" alt="image-20211022143609742" style="zoom:80%;"> <p>方向矢量扩展到四维空间时，需要<strong>指定 w 的分量为 0</strong> ，方向矢量不收平移影响</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022143552668.png" alt="image-20211022143552668" style="zoom:80%;"> <h3 id="1-2-变换矩阵"><a href="#1-2-变换矩阵" class="headerlink" title="1.2 变换矩阵"></a>1.2 变换矩阵</h3><h4 id="1-2-1-平移矩阵"><a href="#1-2-1-平移矩阵" class="headerlink" title="1.2.1 平移矩阵"></a>1.2.1 平移矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022143609742.png" alt="image-20211022143609742" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022143552668.png" alt="image-20211022143552668" style="zoom:80%;"> 平移矩阵的逆矩阵<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022143952071.png" alt="image-20211022143952071"> <h4 id="1-2-2-缩放矩阵"><a href="#1-2-2-缩放矩阵" class="headerlink" title="1.2.2 缩放矩阵"></a>1.2.2 缩放矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022144420597.png" alt="image-20211022144420597" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022144435954.png" alt="image-20211022144435954" style="zoom:80%;"> <p>缩放矩阵的逆矩阵</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022144514191.png" alt="image-20211022144514191" style="zoom:80%;"> <p>Tip:</p><ol><li>kx、ky、kz三个参数相等时为统一缩放，不等时为非统一缩放</li><li>非统一缩放会改变模型相关的角度和比例，会导致部分信息变换错误（如：法线，直接运用顶点变换矩阵会导致错误）</li><li>如果我们希望在任意方向上进行缩放，就需要使用一个复合变换。其中一种方法的主要思想就是，先将缩放轴变换成标准坐标轴，然后进行沿坐标轴的缩放，再使用逆变换得到原来的缩放轴朝向</li></ol><h4 id="1-2-3-旋转矩阵"><a href="#1-2-3-旋转矩阵" class="headerlink" title="1.2.3 旋转矩阵"></a>1.2.3 旋转矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022150418879.png" alt="image-20211022150418879" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022150432666.png" alt="image-20211022150432666" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022150450219.png" alt="image-20211022150450219" style="zoom:80%;"> <p>Unity 中的旋转顺序为：zxy，详细如下图</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022150858614.png" alt="image-20211022150858614" style="zoom:80%;"> <h3 id="1-3-复合变换顺序"><a href="#1-3-复合变换顺序" class="headerlink" title="1.3 复合变换顺序"></a>1.3 复合变换顺序</h3><p>Unity 约定，复合变换的顺序为：缩放 -&gt; 旋转 -&gt; 平移</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022151421564.png" alt="image-20211022151421564" style="zoom:80%;"> <p>原因：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022151613477.png" alt="image-20211022151613477">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022151649125.png" alt="image-20211022151649125" style="zoom: 67%;"> <h3 id="1-4-坐标空间变换"><a href="#1-4-坐标空间变换" class="headerlink" title="1.4 坐标空间变换"></a>1.4 坐标空间变换</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165258751.png" alt="image-20211022165258751"><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165326875.png" alt="image-20211022165326875"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165343516.png" alt="image-20211022165343516"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165400871.png" alt="image-20211022165400871"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165434146.png" alt="image-20211022165434146"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165456049.png" alt="image-20211022165456049"></p><p><strong>从A空间变换到B空间的方法：</strong></p><ol><li>求出B的三个坐标轴在A空间下的表示，然后就可以利用该表示得出 A-B空间的变换矩阵（上述介绍内容）</li><li>变换整个坐标空间B，使与坐标空间A的原点重合，坐标轴对齐，那么整个变换矩阵就是 从A-&gt;B空间变换的矩阵（下述介绍的 世界空间 -&gt; 观察空间的变换）</li></ol><h3 id="1-5-法线变换"><a href="#1-5-法线变换" class="headerlink" title="1.5 法线变换"></a>1.5 法线变换</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184640256.png" alt="image-20211022184640256" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184659496.png" alt="image-20211022184659496" style="zoom:80%;"> <p>BuildIn 中的变换实现：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184812583.png" alt="image-20211022184812583"></p><p>URP 中的变换实现：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184725030.png" alt="image-20211022184725030" style="zoom:80%;"> <h1 id="二、渲染流水线（Unity"><a href="#二、渲染流水线（Unity" class="headerlink" title="二、渲染流水线（Unity)"></a>二、渲染流水线（Unity)</h1><h3 id="2-1-渲染流水线简易图"><a href="#2-1-渲染流水线简易图" class="headerlink" title="2.1 渲染流水线简易图"></a>2.1 渲染流水线简易图</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022170538292.png" alt="image-20211022170538292" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022170605270.png" alt="image-20211022170605270" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="渲染流程图" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022170948573.png" alt="image-20211022170948573"> <p>URP 流程：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/URP%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="URP渲染流程图">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184203976.png" alt="image-20211022184203976" style="zoom:50%;"> <h3 id="2-2-模型空间到世界空间（M矩阵）"><a href="#2-2-模型空间到世界空间（M矩阵）" class="headerlink" title="2.2 模型空间到世界空间（M矩阵）"></a>2.2 模型空间到世界空间（M矩阵）</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022171241957.png" alt="image-20211022171241957"> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022171321296.png" alt="image-20211022171321296" style="zoom:80%;"> <p><strong>M</strong> 矩阵是由 Transform 组件信息的得来的</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022171719063.png" alt="image-20211022171719063"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022171745574.png" alt="image-20211022171745574"></p><h3 id="2-3-世界空间到观察空间（V矩阵）"><a href="#2-3-世界空间到观察空间（V矩阵）" class="headerlink" title="2.3 世界空间到观察空间（V矩阵）"></a>2.3 世界空间到观察空间（V矩阵）</h3><p>观察空间时右手坐标系</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022172239893.png" alt="image-20211022172239893"></p><p>在 OpenGL 图形库中，z 轴方向与相机的指向相反，形成右手坐标系</p><p>在 Direct3D 图形库中，z 轴方向与相机的指向相同，形成左手坐标系</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022172829452.png" alt="image-20211022172829452"><p>求观察矩阵的顺序为根据 Transform 组件：</p><ol><li>反向平移</li><li>反向进行zxy旋转</li><li>反向缩放</li></ol><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022173423975.png" alt="image-20211022173423975" style="zoom:150%;"><h3 id="2-4-观察空间到投影空间（P矩阵）"><a href="#2-4-观察空间到投影空间（P矩阵）" class="headerlink" title="2.4 观察空间到投影空间（P矩阵）"></a>2.4 观察空间到投影空间（P矩阵）</h3><p>投影空间的两个目的：</p><ol><li>为后面真正的投影做准备，即齐次除法</li><li>对 x、y、z进行缩放</li></ol><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022173917737.png" alt="image-20211022173917737"></p><h4 id="2-4-1-透视投影"><a href="#2-4-1-透视投影" class="headerlink" title="2.4.1 透视投影"></a>2.4.1 透视投影</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022180936847.png" alt="image-20211022180936847" style="zoom: 67%;"> <p> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182208386.png" alt="image-20211022182208386"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182513079.png" alt="image-20211022182513079"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182620218.png" alt="image-20211022182620218"> </p><h4 id="2-4-2-正交投影"><a href="#2-4-2-正交投影" class="headerlink" title="2.4.2 正交投影"></a>2.4.2 正交投影</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182856797.png" alt="image-20211022182856797"> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182918280.png" alt="image-20211022182918280"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022183004904.png" alt="image-20211022183004904"> </p><h4 id="2-4-3-知识扩展"><a href="#2-4-3-知识扩展" class="headerlink" title="2.4.3 知识扩展"></a>2.4.3 知识扩展</h4><p>因为投影空间对 x、y、z进行了缩放操作，而且这个不是线性的</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022174625241.png" alt="image-20211022174625241" style="zoom: 67%;"> <p>深度差值不是线性，而与深度的倒数成线性</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022174703574.png" alt="image-20211022174703574" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022174721704.png" alt="image-20211022174721704" style="zoom:67%;"> <p>顶点光照颜色，顶点颜色、顶点纹理坐标，在进行光栅化差值时，想要获得正确结果的计算方法： </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022174739790.png" alt="image-20211022174739790" style="zoom: 67%;">  <h4 id="2-4-4-延伸阅读"><a href="#2-4-4-延伸阅读" class="headerlink" title="2.4.4 延伸阅读"></a>2.4.4 延伸阅读</h4><p>3D 图形光栅化的透视校正问题？<a href="https://www.zhihu.com/question/40624282">https://www.zhihu.com/question/40624282</a></p><p>计算机图形学六：透视矫正插值和图形渲染管线总结 <a href="https://zhuanlan.zhihu.com/p/144331875">https://zhuanlan.zhihu.com/p/144331875</a></p><h3 id="2-5-归一化的设备坐标（NDC-）"><a href="#2-5-归一化的设备坐标（NDC-）" class="headerlink" title="2.5 归一化的设备坐标（NDC ）"></a>2.5 归一化的设备坐标（NDC ）</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022183352387.png" alt="image-20211022183352387"> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022182808720.png" alt="image-20211022182808720" style="zoom:67%;"> <h4 id="2-5-1-透视投影的-NDC"><a href="#2-5-1-透视投影的-NDC" class="headerlink" title="2.5.1 透视投影的 NDC"></a>2.5.1 透视投影的 NDC</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022183815967.png" alt="image-20211022183815967"></p><h4 id="2-5-2-正交投影的-NDC"><a href="#2-5-2-正交投影的-NDC" class="headerlink" title="2.5.2 正交投影的 NDC"></a>2.5.2 正交投影的 NDC</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022183847805.png" alt="image-20211022183847805"></p><h3 id="2-6-屏幕映射"><a href="#2-6-屏幕映射" class="headerlink" title="2.6 屏幕映射"></a>2.6 屏幕映射</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184117321.png" alt="image-20211022184117321"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022184133797.png" alt="image-20211022184133797"></p><h3 id="2-7-Unity-中的特殊矩阵作用"><a href="#2-7-Unity-中的特殊矩阵作用" class="headerlink" title="2.7 Unity 中的特殊矩阵作用"></a>2.7 Unity 中的特殊矩阵作用</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022185255400.png" alt="image-20211022185255400"></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022185314212.png" alt="image-20211022185314212" style="zoom: 50%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022185544200.png" alt="image-20211022185544200"></p><p><strong>Tip:</strong></p><p>C# 中默认构建的矩阵是列优先的，而shader中构建的矩阵，默认是行优先的</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022185823407.png" alt="image-20211022185823407"> </p><p>延伸阅读</p><p>变换矩阵 <a href="https://zhuanlan.zhihu.com/p/93022039">https://zhuanlan.zhihu.com/p/93022039</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形硬件 </tag>
            
            <tag> 图形渲染管线 </tag>
            
            <tag> 渲染流水线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火焰溶解</title>
      <link href="/BloodSoul.github.io/2021/09/29/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/ui/huo-yan-rong-jie/"/>
      <url>/BloodSoul.github.io/2021/09/29/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/ui/huo-yan-rong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="一、最终效果"><a href="#一、最终效果" class="headerlink" title="一、最终效果"></a>一、最终效果</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA1.gif" alt="火焰溶解_效果展示1" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA2.gif" alt="火焰溶解_效果展示2" style="zoom:80%;"> <h1 id="二、制作步骤"><a href="#二、制作步骤" class="headerlink" title="二、制作步骤"></a>二、制作步骤</h1><p>溶解效果的核心思想为 clip 函数的使用</p><p><strong>2.1 使用 noise 贴图，来模拟不规则边缘</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929170932172.png" alt="image-20210929170932172" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_Noise%E4%BD%BF%E7%94%A81.gif" alt="火焰溶解_Noise使用1" style="zoom:80%;"> <p><strong>2.2 通过使用 smoothstep 方法，并添加内焰和外焰颜色，实现火焰效果</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_Noise%E4%BD%BF%E7%94%A8.gif" alt="火焰溶解_Noise使用" style="zoom:80%;"> <pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">_EdgeWidth <span class="token operator">=</span> <span class="token function">Remap</span><span class="token punctuation">(</span>_EdgeWidth<span class="token punctuation">,</span> <span class="token function">half2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">half2</span><span class="token punctuation">(</span>_ClipValue<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">half</span> edgeMask <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token function">smoothstep</span><span class="token punctuation">(</span>_ClipValue<span class="token punctuation">,</span> _EdgeWidth<span class="token punctuation">,</span> dissolveMask<span class="token punctuation">)</span><span class="token punctuation">;</span>half4 edgeColor <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span>_EdgeColor1 <span class="token operator">*</span> _EdgeColor1Intensity<span class="token punctuation">,</span> _EdgeColor2 <span class="token operator">*</span> _EdgeColor2Intensity<span class="token punctuation">,</span> edgeMask<span class="token punctuation">)</span><span class="token punctuation">;</span>edgeColor <span class="token operator">=</span> edgeColor <span class="token operator">*</span> edgeMask<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.3 通过设置一个中心点，计算 UV 到该中心点的距离，与 mask 值相加，可实现定向（圆形）溶解</strong></p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">half</span> dissolveDis <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>IN<span class="token punctuation">.</span>texcoord<span class="token punctuation">.</span>xy<span class="token punctuation">,</span> <span class="token function">half2</span><span class="token punctuation">(</span>_DissolveCenterX<span class="token punctuation">,</span> _DissolveCenterY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929172726451.png" alt="image-20210929172726451" style="zoom:80%;"> <p><strong>2.4 通过 _Time 偏移 noise 贴图的 offset 便可实现火焰流动的动态效果</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%BD%95%E5%88%B6_2021_09_29_17_34_33_346.gif" alt="录制_2021_09_29_17_34_33_346" style="zoom:80%;"> <p> 2.5 通过添加一个缩放值，计算在距离结果上，可以改变它的扩散</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_%E6%89%A9%E6%95%A3%E6%95%88%E6%9E%9C.gif" alt="火焰溶解_扩散效果" style="zoom:80%;"> <p>代码如下：</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">half4 finalColor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>texcoord<span class="token punctuation">.</span>xy<span class="token punctuation">)</span> <span class="token operator">+</span> _TextureSampleAdd<span class="token punctuation">)</span> <span class="token operator">*</span> IN<span class="token punctuation">.</span>color<span class="token punctuation">;</span><span class="token keyword">half</span> dissolveDis <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>IN<span class="token punctuation">.</span>texcoord<span class="token punctuation">.</span>xy<span class="token punctuation">,</span> <span class="token function">half2</span><span class="token punctuation">(</span>_DissolveCenterX<span class="token punctuation">,</span> _DissolveCenterY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">half</span> dissolveMask <span class="token operator">=</span> maskRaw <span class="token operator">+</span> dissolveDis <span class="token operator">*</span> _DissolveScale<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最终效果：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA1.gif" alt="火焰溶解_效果展示1" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AB%E7%84%B0%E6%BA%B6%E8%A7%A3_%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA2.gif" alt="火焰溶解_效果展示2" style="zoom:80%;"> <p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/138942181">https://zhuanlan.zhihu.com/p/138942181</a></p><p><a href="https://github.com/zd304/Dissolve/tree/master/Assets/Shaders">https://github.com/zd304/Dissolve/tree/master/Assets/Shaders</a></p>]]></content>
      
      
      <categories>
          
          <category> TA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 探索 </tag>
            
            <tag> 新纪元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向量</title>
      <link href="/BloodSoul.github.io/2021/09/26/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/xian-xing-dai-shu/xiang-liang/xiang-liang/"/>
      <url>/BloodSoul.github.io/2021/09/26/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/xian-xing-dai-shu/xiang-liang/xiang-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、平面坐标点的四种解释"><a href="#一、平面坐标点的四种解释" class="headerlink" title="一、平面坐标点的四种解释"></a>一、平面坐标点的四种解释</h1><p>以下以（7, 4）为例</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926154154436.png" alt="image-20210926154154436" style="zoom: 80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926154216389.png" alt="image-20210926154216389" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926154234435.png" alt="image-20210926154234435" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926154256124.png" alt="image-20210926154256124" style="zoom:80%;"> <h1 id="二、数学计算"><a href="#二、数学计算" class="headerlink" title="二、数学计算"></a>二、数学计算</h1><p>向量是特殊的矩阵，满足矩阵的计算规律</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926154639478.png" alt="image-20210926154639478" style="zoom:80%;"> <h2 id="2-1-内积（点积、标量积）"><a href="#2-1-内积（点积、标量积）" class="headerlink" title="2.1 内积（点积、标量积）"></a>2.1 内积（点积、标量积）</h2><h3 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926174525316.png" alt="image-20210926174525316" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926174813420.png" alt="image-20210926174813420" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926181051863.png" alt="image-20210926181051863" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926175428511.png" alt="image-20210926175428511" style="zoom:80%;"> <h3 id="2-1-2-性质"><a href="#2-1-2-性质" class="headerlink" title="2.1.2 性质"></a>2.1.2 性质</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926182905557.png" alt="image-20210926182905557" style="zoom:80%;"> <h3 id="2-1-3-应用"><a href="#2-1-3-应用" class="headerlink" title="2.1.3 应用"></a>2.1.3 应用</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926175022929.png" alt="image-20210926175022929" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926175236327.png" alt="image-20210926175236327" style="zoom:80%;">   <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926181008092.png" alt="image-20210926181008092" style="zoom:80%;">  <p><strong>点积也可以用来表示两个向量的相似程度</strong> ，在图形渲染中非非非常常用，常用两个单位向量进行点积，比如：NdotV，NdotL，NdotH ….</p><h2 id="2-2-外积（叉积、向量积）"><a href="#2-2-外积（叉积、向量积）" class="headerlink" title="2.2 外积（叉积、向量积）"></a>2.2 外积（叉积、向量积）</h2><h3 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1 定义"></a>2.2.1 定义</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185505954.png" alt="image-20210926185505954" style="zoom:80%;">   <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185542733.png" alt="image-20210926185542733" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185607404.png" alt="image-20210926185607404" style="zoom:80%;"> <h3 id="2-2-2-性质"><a href="#2-2-2-性质" class="headerlink" title="2.2.2 性质"></a>2.2.2 性质</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185849987.png" alt="image-20210926185849987" style="zoom:80%;"> <h3 id="2-2-3-应用"><a href="#2-2-3-应用" class="headerlink" title="2.2.3 应用"></a>2.2.3 应用</h3><p>求任意三角形面积</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185806353.png" alt="image-20210926185806353" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926185704340.png" alt="image-20210926185704340" style="zoom:80%;"> <p><strong>Billboard</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926190338802.png" alt="image-20210926190338802" style="zoom:80%;"> <p>俯视矫正</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926190533037.png" alt="image-20210926190533037" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> 向量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2D光照</title>
      <link href="/BloodSoul.github.io/2021/09/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/ui/2d-guang-zhao/"/>
      <url>/BloodSoul.github.io/2021/09/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/ui/2d-guang-zhao/</url>
      
        <content type="html"><![CDATA[<h1 id="一、制作步骤"><a href="#一、制作步骤" class="headerlink" title="一、制作步骤"></a>一、制作步骤</h1><p><strong>1.1 使用一张 Mask 控制灯光形状</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929163412446.png" alt="image-20210929163412446" style="zoom:80%;">  <p><strong>1.2 通过对 mask offset 的控制，可以模拟灯光的照射方向</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AF%E5%85%89%E6%A8%A1%E6%8B%9F%E6%96%B9%E5%90%91%E8%B0%83%E6%95%B4.gif" alt="灯光模拟方向调整" style="zoom:80%;"> <p><strong>1.3 通过与 UV进行计算，可实现从左上到右下的衰减，并通过 pow 加强变化</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AF%E5%85%89%E6%A8%A1%E6%8B%9F_%E8%A1%B0%E5%87%8F%E8%B0%83%E6%95%B4.gif" alt="灯光模拟_衰减调整" style="zoom:80%;"> <pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token keyword">half</span> mask <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MaskTex<span class="token punctuation">,</span> maskTexUV<span class="token punctuation">)</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>mask <span class="token operator">=</span> mask <span class="token operator">-</span> maskTexUV<span class="token punctuation">.</span>x <span class="token operator">*</span> _AttenuationX <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> maskTexUV<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> _AttenuationY<span class="token punctuation">;</span>mask <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">saturate</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token punctuation">,</span> _Pow<span class="token punctuation">)</span> <span class="token operator">/</span> _Smooth <span class="token operator">*</span> _MaskInstensity <span class="token operator">+</span> _MaskBias<span class="token punctuation">;</span>mask <span class="token operator">=</span> <span class="token function">saturate</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.3 通过 mask 区分亮暗部，并通过不同颜色加以控制</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AF%E5%85%89%E6%A8%A1%E6%8B%9F_%E4%BA%AE%E6%9A%97%E9%A2%9C%E8%89%B2%E6%8E%A7%E5%88%B6.gif" alt="灯光模拟_亮暗颜色控制" style="zoom:80%;"> <p><strong>1.4 将颜色转换成灰度后，与 mask 做计算，实现照亮的部分对比加强增加立体感</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AF%E5%85%89%E6%A8%A1%E6%8B%9F_%E5%AF%B9%E6%AF%94%E8%B0%83%E6%95%B4.gif" alt="灯光模拟_对比调整" style="zoom:80%;"> <p><strong>1.5 为了更加可控，添加了旋转 UV 功能</strong></p><p>旋转UV默认是在左下角旋转，如果想要居中旋转，需要 将坐标缩放到【-1,1】（UV远点在中间），旋转完成后在缩放到【0,1】</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%81%AF%E5%85%89%E6%A8%A1%E6%8B%9F_%E7%81%AF%E5%85%89%E6%97%8B%E8%BD%AC.gif" alt="灯光模拟_灯光旋转" style="zoom:80%;"> <h1 id="二、最终效果"><a href="#二、最终效果" class="headerlink" title="二、最终效果"></a>二、最终效果</h1><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929165725753.png" alt="image-20210929165725753" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929165750007.png" alt="image-20210929165750007" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929165909109.png" alt="image-20210929165909109" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210929165944902.png" alt="image-20210929165944902" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> TA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 探索 </tag>
            
            <tag> 新纪元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵</title>
      <link href="/BloodSoul.github.io/2021/09/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/xian-xing-dai-shu/ju-zhen/ju-zhen/"/>
      <url>/BloodSoul.github.io/2021/09/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/xian-xing-dai-shu/ju-zhen/ju-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="一、矩阵的算数运算"><a href="#一、矩阵的算数运算" class="headerlink" title="一、矩阵的算数运算"></a>一、矩阵的算数运算</h1><h3 id="1-1-矩阵的加减法"><a href="#1-1-矩阵的加减法" class="headerlink" title="1.1 矩阵的加减法"></a>1.1 矩阵的加减法</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923171318778.png" alt="image-20210923171318778" style="zoom:80%;"> <h3 id="1-2-矩阵的数乘"><a href="#1-2-矩阵的数乘" class="headerlink" title="1.2 矩阵的数乘"></a>1.2 矩阵的数乘</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923171505661.png" alt="image-20210923171505661" style="zoom:80%;"> <h3 id="1-3-矩阵的乘法"><a href="#1-3-矩阵的乘法" class="headerlink" title="1.3 矩阵的乘法"></a>1.3 矩阵的乘法</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923171751418.png" alt="image-20210923171751418" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923171834281.png" alt="image-20210923171834281" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923171906558.png" alt="image-20210923171906558" style="zoom:80%;"> <h3 id="1-4-矩阵的次幂"><a href="#1-4-矩阵的次幂" class="headerlink" title="1.4 矩阵的次幂"></a>1.4 矩阵的次幂</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926152450379.png" alt="image-20210926152450379" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926152539841.png" alt="image-20210926152539841" style="zoom: 80%;"> <p><strong>特征值求法</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926153004314.png" alt="image-20210926153004314" style="zoom:80%;">  <p><strong>特征向量求法</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926153117739.png" alt="image-20210926153117739" style="zoom:80%;">  <h3 id="1-5-矩阵的性质"><a href="#1-5-矩阵的性质" class="headerlink" title="1.5 矩阵的性质"></a>1.5 矩阵的性质</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210926192803295.png" alt="image-20210926192803295" style="zoom:80%;"> <h1 id="二、矩阵乘法的几何意义"><a href="#二、矩阵乘法的几何意义" class="headerlink" title="二、矩阵乘法的几何意义"></a>二、矩阵乘法的几何意义</h1><p>矩阵乘法的几何意义即为对二维物体或者三维物体进行：<strong>平移、旋转、缩放</strong> 等变换。</p><h3 id="2-1-二维变换"><a href="#2-1-二维变换" class="headerlink" title="2.1 二维变换"></a>2.1 二维变换</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923172158026.png" alt="image-20210923172158026" style="zoom:80%;"> <p><em>Tip</em>:</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210923172245214.png" alt="image-20210923172245214" style="zoom:80%;"> <p>旋转 90 度的简单写法：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211022165839155.png" alt="image-20211022165839155" style="zoom:67%;"> <h3 id="2-2-三维变换"><a href="#2-2-三维变换" class="headerlink" title="2.2 三维变换"></a>2.2 三维变换</h3><h4 id="2-2-1-缩放矩阵"><a href="#2-2-1-缩放矩阵" class="headerlink" title="2.2.1 缩放矩阵"></a>2.2.1 缩放矩阵</h4><p>$$<br>\begin{bmatrix}<br>x &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; y &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; z &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1\\<br>\end{bmatrix}<br>$$</p><h4 id="2-2-2-位移矩阵"><a href="#2-2-2-位移矩阵" class="headerlink" title="2.2.2 位移矩阵"></a>2.2.2 位移矩阵</h4><p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; x\\<br>0 &amp; 1 &amp; 0 &amp; y\\<br>0 &amp; 0 &amp; 1 &amp; z\\<br>0 &amp; 0 &amp; 0 &amp; 1\\<br>\end{bmatrix}<br>$$</p><h4 id="2-2-3-绕-x-轴旋转矩阵"><a href="#2-2-3-绕-x-轴旋转矩阵" class="headerlink" title="2.2.3 绕 x 轴旋转矩阵"></a>2.2.3 绕 x 轴旋转矩阵</h4><p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; cos\theta &amp; -sin\theta &amp; 0\\<br>0 &amp; sin\theta &amp; cos\theta &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1\\<br>\end{bmatrix}<br>$$</p><h4 id="2-2-4-绕-y-轴旋转矩阵"><a href="#2-2-4-绕-y-轴旋转矩阵" class="headerlink" title="2.2.4 绕 y 轴旋转矩阵"></a>2.2.4 绕 y 轴旋转矩阵</h4><p>$$<br>\begin{bmatrix}<br>cos\theta &amp; 0 &amp; sin\theta &amp; 0\\<br>0 &amp; 1 &amp; 0 &amp; 0\\<br>-sin\theta &amp; 0 &amp; cos\theta &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1\\<br>\end{bmatrix}<br>$$</p><h4 id="2-2-5-绕-z-轴旋转矩阵"><a href="#2-2-5-绕-z-轴旋转矩阵" class="headerlink" title="2.2.5 绕 z 轴旋转矩阵"></a>2.2.5 绕 z 轴旋转矩阵</h4><p>$$<br>\begin{bmatrix}<br>cos\theta &amp; -sin\theta &amp; 0 &amp; 0\\<br>sin\theta &amp; cos\theta &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; 1 &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1\\<br>\end{bmatrix}<br>$$</p><h4 id="2-2-6-等体积缩放矩阵"><a href="#2-2-6-等体积缩放矩阵" class="headerlink" title="2.2.6 等体积缩放矩阵"></a>2.2.6 等体积缩放矩阵</h4><p>把 xyz 的旋转矩阵提前相乘，然后在进行应用可以得到等体积缩放</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">float4 RotateBias(float4 orginPos, float4 rotateValue){    rotateValue = 3.14 / 180 * rotateValue;        float cosXValue = cos(rotateValue.x);    float cosYValue = cos(rotateValue.y);    float cosZValue = cos(rotateValue.z);    float sinXValue = sin(rotateValue.x);    float sinYValue = sin(rotateValue.y);    float sinZValue = sin(rotateValue.z);        float4x4 RotateXMatrix = float4x4(        float4(1, 0, 0, 0),        float4(0, cosXValue, -sinXValue, 0),        float4(0, sinXValue, cosXValue, 0),        float4(0, 0, 0, 1)    );        float4x4 RotateYMatrix = float4x4(        float4(cosYValue, 0, sinYValue, 0),        float4(0, 1, 0, 0),        float4(-sinYValue, 0, cosYValue, 0),        float4(0, 0, 0, 1)    );        float4x4 RotateZMatrix = float4x4(        float4(cosZValue, -sinZValue, 0, 0),        float4(sinZValue, cosZValue, 0, 0),        float4(0, 0, 1, 0),        float4(0, 0, 0, 1)    );        float4 result = orginPos;        // 这样会变成等体积缩放,即总体积不变,沿某个轴缩放    //float4x4 rotateMatrix = RotateZMatrix * RotateYMatrix * RotateXMatrix;    //result = mul(rotateMatrix, orginPos);        //沿三个轴各自缩放     result = mul(RotateXMatrix, result);     result = mul(RotateYMatrix, result);     result = mul(RotateZMatrix, result);    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%BD%95%E5%88%B6_2021_09_23_17_56_53_70.gif" alt="录制_2021_09_23_17_56_53_70" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%97%8B%E8%BD%AC.gif" alt="旋转" style="zoom:80%;"> <p>位移矩阵相关代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">float4 PositonBias(float4 orginPos, float4 biasValue){    float4x4 biasPosMatrix = float4x4(        float4(1, 0, 0, biasValue.x),        float4(0, 1, 0, biasValue.y),        float4(0, 0, 1, biasValue.z),        float4(0, 0, 0, 1)    );    float4 result = mul(biasPosMatrix, orginPos);    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E4%BD%8D%E7%A7%BB.gif" alt="位移" style="zoom:80%;"> <p>缩放矩阵相关代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">float4 ScaleBias(float4 orginPos, float4 scaleValue){    float4x4 biasScaleMatrix = float4x4(        float4(scaleValue.x, 0, 0, 0),        float4(0, scaleValue.y, 0, 0),        float4(0, 0, scaleValue.z, 0),        float4(0, 0, 0, 1)    );    float4 result = mul(biasScaleMatrix, orginPos);    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%BC%A9%E6%94%BE.gif" alt="缩放" style="zoom:80%;"> <h4 id="2-2-7-绕任意轴旋转的矩阵"><a href="#2-2-7-绕任意轴旋转的矩阵" class="headerlink" title="2.2.7 绕任意轴旋转的矩阵"></a>2.2.7 绕任意轴旋转的矩阵</h4><p>n 为单位向量</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924213205442.png" alt="image-20210924213205442" style="zoom:67%;"> <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public Matrix4x4 AxisRotate(float angle, Vector3 axis){    Matrix4x4 result = Matrix4x4.identity;    float angleRad = Mathf.Deg2Rad * angle;    float cosAngle = Mathf.Cos(angleRad);    float sinAngle = Mathf.Sin(angleRad);    axis = axis.normalized;    float x = axis.x;    float y = axis.y;    float z = axis.z;    float x2 = x * x;    float y2 = y * y;    float z2 = z * z;    float row01 = x2 * (1 - cosAngle) + cosAngle;    float row02 = x * y * (1 - cosAngle) - z * sinAngle;    float row03 = x * z * (1 - cosAngle) + y * sinAngle;    float row11 = x * y * (1 - cosAngle) + z * sinAngle;    float row12 = y2 * (1 - cosAngle) + cosAngle;    float row13 = y * z * (1 - cosAngle) - x * sinAngle;    float row21 = x * z * (1 - cosAngle) - y * sinAngle;    float row22 = y * z * (1 - cosAngle) + x * sinAngle;    float row23 = z2 * (1 - cosAngle) + cosAngle;    result.SetRow(0, new Vector4(row01, row02, row03, 0));    result.SetRow(1, new Vector4(row11, row12, row13, 0));    result.SetRow(2, new Vector4(row21, row22, row23, 0));    result.SetRow(3, new Vector4(0, 0, 0, 1));    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%BB%95%E4%BB%BB%E6%84%8F%E8%BD%B4%E6%97%8B%E8%BD%AC%E6%BC%94%E7%A4%BA.gif" alt="绕任意轴旋转演示" style="zoom:80%;"> <p><strong>Tip角度计算：</strong></p><p>角度转弧度 π/180×角度；弧度变角度 180/π×弧度。</p><p>2π弧度=360°。从而1°≈0.0174533弧度，1弧度≈57.29578°。</p><p>角度转换为弧度公式：弧度=角度×(π ÷180 )</p><p>弧度转换为角度公式： 角度=弧度×（180÷π）</p><h1 id="三、矩阵的数学意义"><a href="#三、矩阵的数学意义" class="headerlink" title="三、矩阵的数学意义"></a>三、矩阵的数学意义</h1><p>矩阵可以很方便的表示线性方程组，以及进行求解</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924100659444.png" alt="image-20210924100659444" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924100806606.png" alt="image-20210924100806606" style="zoom:80%;"> <h1 id="四、特殊矩阵"><a href="#四、特殊矩阵" class="headerlink" title="四、特殊矩阵"></a>四、特殊矩阵</h1><h4 id="4-1-零矩阵"><a href="#4-1-零矩阵" class="headerlink" title="4.1 零矩阵"></a>4.1 零矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924104825168.png" alt="image-20210924104825168" style="zoom:80%;">  <h4 id="4-2-转置矩阵"><a href="#4-2-转置矩阵" class="headerlink" title="4.2 转置矩阵"></a>4.2 转置矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924115936255.png" alt="image-20210924115936255" style="zoom:80%;">   <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924105047914.png" alt="image-20210924105047914" style="zoom:80%;"> <p><strong>4.2.1 Unity 中的方法</strong></p><p>Matrix4x4.Transpose</p><p><strong>4.2.2 在 Unity 中测试结果</strong></p><p>a、位置变换的转置矩阵会把所有位置变换都变成零，也就是说全部都归到坐标原点</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E4%BD%8D%E7%BD%AE%E5%8F%98%E6%8D%A2%E7%9A%84%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA1.gif" alt="位置变换的转置矩阵演示1" style="zoom:80%;"> <p>b、旋转变换的转置矩阵会翻转旋转变换，比如绕Y轴旋转90度，转置后变成绕Y轴旋转-90度</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2%E7%9A%84%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA.gif" alt="旋转变换的转置矩阵演示" style="zoom:80%;"> <p>c、缩放变换的转置矩阵不变，原来什么样，结果还是什么样</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%BC%A9%E6%94%BE%E5%8F%98%E6%8D%A2%E7%9A%84%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA.gif" alt="缩放变换的转置矩阵演示" style="zoom:80%;"> <p>d、可以简单理解为：一个物体乘以任何一个变换矩阵的转置矩阵，相当于把物体移动到坐标原点，然后继承变换矩阵的缩放值，然后按变换矩阵旋转量的反向进行旋转所得到的结果</p><p>e、事实上，转置矩阵等于正交矩阵的逆矩阵，上述三个变换中只有旋转变换的矩阵是正交变换，具体哪些变换是正交变换详见 4.8 正交矩阵</p><h4 id="4-3-对称矩阵"><a href="#4-3-对称矩阵" class="headerlink" title="4.3 对称矩阵"></a>4.3 对称矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924120056370.png" alt="image-20210924120056370" style="zoom:80%;">  <h4 id="4-4-上三角矩阵、下三角矩阵"><a href="#4-4-上三角矩阵、下三角矩阵" class="headerlink" title="4.4 上三角矩阵、下三角矩阵"></a>4.4 上三角矩阵、下三角矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924120118128.png" alt="image-20210924120118128" style="zoom:80%;">  <h4 id="4-5-对角矩阵"><a href="#4-5-对角矩阵" class="headerlink" title="4.5 对角矩阵"></a>4.5 对角矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924143215233.png" alt="image-20210924143215233" style="zoom:80%;"> <p>对角矩阵的运算：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924143425042.png" alt="image-20210924143425042" style="zoom:80%;"> <h4 id="4-6-单位矩阵"><a href="#4-6-单位矩阵" class="headerlink" title="4.6 单位矩阵"></a>4.6 单位矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924143557154.png" alt="image-20210924143557154" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924143628271.png" alt="image-20210924143628271" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924143735473.png" alt="image-20210924143735473" style="zoom:80%;"> <h4 id="4-7-逆矩阵"><a href="#4-7-逆矩阵" class="headerlink" title="4.7 逆矩阵"></a>4.7 逆矩阵</h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924144007544.png" alt="image-20210924144007544" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924144031240.png" alt="image-20210924144031240" style="zoom:80%;"> <p><strong>特性：</strong></p><p>a、包含0行或者0列的矩阵不可逆</p><p>b、当且晋档矩阵 $M^T$ 可逆，矩阵 $M$ 可逆</p><p>c、如果 nXn矩阵 <strong>F</strong> 和 <strong>G</strong> 是可逆矩阵，则他们的积 <strong>FG</strong> 也可逆，且 $(FG)^{-1} = G^{-1}F^{-1}$</p><p>d、令矩阵 $M^,$ 是 nXn 矩阵 $M$ 经过初等行变换得到的 nXn 矩阵，则 $M^,$ = $EM$，其中 $E$ 是单位矩阵经过相等的初等行变换得到的 nXn 矩阵</p><p>e、当且仅当 nXn 矩阵 <strong>M</strong> 的行向量形成线性无关的向量几何时，矩阵 <strong>M</strong> 可逆</p><h5 id="4-7-1-逆矩阵的几何意义"><a href="#4-7-1-逆矩阵的几何意义" class="headerlink" title="4.7.1 逆矩阵的几何意义"></a>4.7.1 逆矩阵的几何意义</h5><p>逆矩阵可以用作撤销操作，比如将一个模型缩放了1.5倍，可以乘以缩放矩阵的逆矩阵来使模型回到原来的状态</p><p>Matrix4x4.inverse</p><h5 id="4-7-2-逆矩阵的求解方式"><a href="#4-7-2-逆矩阵的求解方式" class="headerlink" title="4.7.2  逆矩阵的求解方式"></a>4.7.2  逆矩阵的求解方式</h5><h6 id="4-7-2-0-行列式判断是否存在逆矩阵"><a href="#4-7-2-0-行列式判断是否存在逆矩阵" class="headerlink" title="4.7.2.0 行列式判断是否存在逆矩阵"></a>4.7.2.0 行列式判断是否存在逆矩阵</h6><p>行列式不等于零，该矩阵存在逆矩阵</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924155910913.png" alt="image-20210924155910913" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160117757.png" alt="image-20210924160117757" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160137007.png" alt="image-20210924160137007" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160204683.png" alt="image-20210924160204683" style="zoom: 67%;"> <p><strong>二阶行列式的几何意义</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160300938.png" alt="image-20210924160300938" style="zoom: 67%;"> <p><strong>三阶行列式，沙路法则</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160437708.png" alt="image-20210924160437708" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160527852.png" alt="image-20210924160527852" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160603162.png" alt="image-20210924160603162" style="zoom:67%;"> <p><strong>三阶行列式的几何意义</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924160649299.png" alt="image-20210924160649299" style="zoom:67%;"> <p>四阶行列式 <strong>Unity 中的方法</strong></p><p>Matrix4x4.Determinant</p><p>详细计算模型，推导过程见漫画线性代数：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924161151817.png" alt="image-20210924161151817" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924161126692.png" alt="image-20210924161126692" style="zoom:67%;"> <h6 id="4-7-2-1-利用消元法求解逆矩阵"><a href="#4-7-2-1-利用消元法求解逆矩阵" class="headerlink" title="4.7.2.1 利用消元法求解逆矩阵"></a>4.7.2.1 利用消元法求解逆矩阵</h6><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162545187.png" alt="image-20210924162545187" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162906683.png" alt="image-20210924162906683" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162810925.png" alt="image-20210924162810925" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162840582.png" alt="image-20210924162840582" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924163031256.png" alt="image-20210924163031256" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924163107111.png" alt="image-20210924163107111" style="zoom:67%;"> <p><strong>二阶逆矩阵计算公式</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924163208301.png" alt="image-20210924163208301" style="zoom:67%;"> <h6 id="4-7-2-2-利用余子式、代数余子式、和伴随矩阵求解逆矩阵"><a href="#4-7-2-2-利用余子式、代数余子式、和伴随矩阵求解逆矩阵" class="headerlink" title="4.7.2.2 利用余子式、代数余子式、和伴随矩阵求解逆矩阵"></a>4.7.2.2 利用余子式、代数余子式、和伴随矩阵求解逆矩阵</h6><p><strong>余子式</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924161336898.png" alt="image-20210924161336898" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924161401260.png" alt="image-20210924161401260" style="zoom:67%;"> <p><strong>代数余子式</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924161455256.png" alt="image-20210924161455256" style="zoom:67%;"> <p><strong>伴随矩阵</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162005787.png" alt="image-20210924162005787" style="zoom:67%;"> <p><strong>求解思路</strong></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924162105956.png" alt="image-20210924162105956" style="zoom:67%;"> <p><strong>详细案例</strong></p><p>原文链接： <a href="https://www.shuxuele.com/algebra/matrix-inverse-minors-cofactors-adjugate.html">https://www.shuxuele.com/algebra/matrix-inverse-minors-cofactors-adjugate.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924154044319.png" alt="image-20210924154044319" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924154319556.png" alt="image-20210924154319556" style="zoom: 67%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924154407544.png" alt="image-20210924154407544" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924154623424.png" alt="image-20210924154623424" style="zoom:67%;"> <h6 id="4-7-2-3-利用-高斯－若尔当-方法（初等行运算）求解逆矩阵"><a href="#4-7-2-3-利用-高斯－若尔当-方法（初等行运算）求解逆矩阵" class="headerlink" title="4.7.2.3 利用 高斯－若尔当 方法（初等行运算）求解逆矩阵"></a>4.7.2.3 利用 高斯－若尔当 方法（初等行运算）求解逆矩阵</h6><p>原文链接：<a href="https://www.shuxuele.com/algebra/matrix-inverse-row-operations-gauss-jordan.html">https://www.shuxuele.com/algebra/matrix-inverse-row-operations-gauss-jordan.html</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924155304342.png" alt="image-20210924155304342" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924155332305.png" alt="image-20210924155332305" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210924155538610.png" alt="image-20210924155538610" style="zoom:67%;">  <p><strong>在Unity中的测试</strong></p><p>相当于进行反向操作</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E4%BD%8D%E7%BD%AE%E5%8F%98%E6%8D%A2%E7%9A%84%E9%80%86%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA.gif" alt="位置变换的逆矩阵演示" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2%E7%9A%84%E9%80%86%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA.gif" alt="旋转变换的逆矩阵演示" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E7%BC%A9%E6%94%BE%E5%8F%98%E6%8D%A2%E7%9A%84%E9%80%86%E7%9F%A9%E9%98%B5%E6%BC%94%E7%A4%BA.gif" alt="缩放变换的逆矩阵演示" style="zoom:80%;"> <h5 id="4-8-正交矩阵"><a href="#4-8-正交矩阵" class="headerlink" title="4.8 正交矩阵"></a>4.8 正交矩阵</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211001113503609.png" alt="image-20211001113503609" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211001113645651.png" alt="image-20211001113645651" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211001113746715.png" alt="image-20211001113746715" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211001114109107.png" alt="image-20211001114109107" style="zoom:80%;"> <p>参考：</p><p>百人计划相关文档</p><p>漫画线性代数</p><p>Unity Shader 入门精要</p><p>数学乐：<a href="https://www.shuxuele.com/algebra/matrix-inverse-minors-cofactors-adjugate.html">https://www.shuxuele.com/algebra/matrix-inverse-minors-cofactors-adjugate.html</a></p><p>Unity官网文档：<a href="https://docs.unity3d.com/ScriptReference/Matrix4x4.html">https://docs.unity3d.com/ScriptReference/Matrix4x4.html</a></p><p>转置矩阵意义： <a href="https://blog.csdn.net/qq_41581769/article/details/100986480">https://blog.csdn.net/qq_41581769/article/details/100986480</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回合战斗技能编辑器</title>
      <link href="/BloodSoul.github.io/2021/09/13/gamedevelop/gamecontent/gameplay/ji-neng-bian-ji-qi/hui-he-zhan-dou-ji-neng-bian-ji-qi/"/>
      <url>/BloodSoul.github.io/2021/09/13/gamedevelop/gamecontent/gameplay/ji-neng-bian-ji-qi/hui-he-zhan-dou-ji-neng-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、回合战斗技能编辑器"><a href="#一、回合战斗技能编辑器" class="headerlink" title="一、回合战斗技能编辑器"></a>一、回合战斗技能编辑器</h1><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913181910009.png" alt="image-20210913181910009"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913181955293.png" alt="image-20210913181955293"> </p><p>持续维护版本</p><p><a href="https://github.com/yimengfan/PosePlus_1.0">https://github.com/yimengfan/PosePlus_1.0</a></p><p>原始版本</p><p><a href="https://github.com/yimengfan/PosePlus_TBS">https://github.com/yimengfan/PosePlus_TBS</a></p><h1 id="二、游戏框架"><a href="#二、游戏框架" class="headerlink" title="二、游戏框架"></a>二、游戏框架</h1><p>BDFramework.Core <a href="https://github.com/yimengfan/BDFramework.Core">https://github.com/yimengfan/BDFramework.Core</a></p><p>文档： <a href="https://www.yuque.com/naipaopao/eg6gik">https://www.yuque.com/naipaopao/eg6gik</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913182651500.png" alt="image-20210913182651500"> </p><p>三、TeamCity，15分钟搭建U3d CI环境，自动测试、版本发布、部署</p><p><a href="https://zhuanlan.zhihu.com/p/94638669">https://zhuanlan.zhihu.com/p/94638669</a> </p><p><strong>免费</strong> </p><p><a href="https://www.jetbrains.com/teamcity/">https://www.jetbrains.com/teamcity/</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913200850024.png" alt="image-20210913200850024"> </p>]]></content>
      
      
      <categories>
          
          <category> GamePlay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技能编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shading教程网站</title>
      <link href="/BloodSoul.github.io/2021/09/13/gamedevelop/gamecontent/rendering/xuan-ran-jiao-cheng/shading-jiao-cheng-wang-zhan/"/>
      <url>/BloodSoul.github.io/2021/09/13/gamedevelop/gamecontent/rendering/xuan-ran-jiao-cheng/shading-jiao-cheng-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-教程"><a href="#Github-教程" class="headerlink" title="Github 教程"></a>Github 教程</h1><h4 id="K佬"><a href="#K佬" class="headerlink" title="K佬"></a>K佬</h4><p><a href="https://github.com/keijiro?tab=repositories">https://github.com/keijiro?tab=repositories</a></p><h4 id="Ronja"><a href="#Ronja" class="headerlink" title="Ronja"></a>Ronja</h4><p><a href="https://www.ronja-tutorials.com/">https://www.ronja-tutorials.com/</a></p><p><a href="https://github.com/ronja-tutorials/ShaderTutorials">https://github.com/ronja-tutorials/ShaderTutorials</a></p><h4 id="ProjectKaya"><a href="#ProjectKaya" class="headerlink" title="ProjectKaya"></a>ProjectKaya</h4><p><a href="https://github.com/UnityKorea/ProjectKaya">https://github.com/UnityKorea/ProjectKaya</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222155727545.png" alt="image-20211222155727545" style="zoom:67%;"> <h1 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h1><h4 id="Sand-shader"><a href="#Sand-shader" class="headerlink" title="Sand shader"></a>Sand shader</h4><p><strong><a href="https://www.alanzucconi.com/?p=10050">A Journey Into Journey’s Sand Shader</a></strong></p><p> Sand Rendering in Journey GDC <a href="https://www.gdcvault.com/play/1017742/Sand-Rendering-in">https://www.gdcvault.com/play/1017742/Sand-Rendering-in</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913145738350.png" alt="image-20210913145738350" style="zoom: 67%;"> <h4 id="SDF-教程"><a href="#SDF-教程" class="headerlink" title="SDF 教程"></a>SDF 教程</h4><p><a href="https://iquilezles.org/www/index.htm">https://iquilezles.org/www/index.htm</a></p><h4 id="毛发教程"><a href="#毛发教程" class="headerlink" title="毛发教程"></a>毛发教程</h4><p><a href="https://xbdev.net/directx3dx/specialX/Fur/">https://xbdev.net/directx3dx/specialX/Fur/</a></p><h4 id="walkingfat-教程"><a href="#walkingfat-教程" class="headerlink" title="walkingfat 教程"></a>walkingfat 教程</h4><p><a href="http://walkingfat.com/category/graphics/">http://walkingfat.com/category/graphics/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221151452601.png" alt="image-20211221151452601" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221151509271.png" alt="image-20211221151509271" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221151526241.png" alt="image-20211221151526241" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211221151538983.png" alt="image-20211221151538983" style="zoom:50%;"> <h4 id="BookofShader"><a href="#BookofShader" class="headerlink" title="BookofShader"></a>BookofShader</h4><p><a href="https://thebookofshaders.com/13/?lan=ch">https://thebookofshaders.com/13/?lan=ch</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222100516861.png" alt="image-20211222100516861" style="zoom:67%;"> <h4 id="RayMarching"><a href="#RayMarching" class="headerlink" title="RayMarching"></a>RayMarching</h4><p><strong>Ray Marching and Signed Distance Functions</strong></p><p><a href="http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/">http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222144101675.png" alt="image-20211222144101675" style="zoom: 67%;"> <p><a href="https://www.shadertoy.com/view/lt33z7">https://www.shadertoy.com/view/lt33z7</a></p><p><a href="https://www.shadertoy.com/view/llt3R4">https://www.shadertoy.com/view/llt3R4</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222144139165.png" alt="image-20211222144139165" style="zoom:67%;"> <p><a href="https://www.shadertoy.com/user/jlfwong">https://www.shadertoy.com/user/jlfwong</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222144231542.png" alt="image-20211222144231542" style="zoom:67%;"> <p><a href="https://zhuanlan.zhihu.com/p/90245545">https://zhuanlan.zhihu.com/p/90245545</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222144319132.png" alt="image-20211222144319132" style="zoom:67%;"> <p><a href="https://www.youtube.com/watch?v=PGtv-dBi2wE">https://www.youtube.com/watch?v=PGtv-dBi2wE</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222144352457.png" alt="image-20211222144352457" style="zoom: 50%;"> <p><a href="https://www.youtube.com/watch?v=Ff0jJyyiVyw">https://www.youtube.com/watch?v=Ff0jJyyiVyw</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222144424599.png" alt="image-20211222144424599" style="zoom: 50%;"> <h4 id="计算着色器（Rendering-Million-Cubes）"><a href="#计算着色器（Rendering-Million-Cubes）" class="headerlink" title="计算着色器（Rendering Million Cubes）"></a>计算着色器（Rendering Million Cubes）</h4><p><a href="https://zhuanlan.zhihu.com/p/350079498">https://zhuanlan.zhihu.com/p/350079498</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222155506891.png" alt="image-20211222155506891" style="zoom:80%;"> <h1 id="CSDN"><a href="#CSDN" class="headerlink" title="CSDN"></a>CSDN</h1><h4 id="Shadertoy-基础教程"><a href="#Shadertoy-基础教程" class="headerlink" title="Shadertoy 基础教程"></a>Shadertoy 基础教程</h4><p><a href="https://blog.csdn.net/candycat1992/article/details/44244549">https://blog.csdn.net/candycat1992/article/details/44244549</a></p><h1 id="知乎"><a href="#知乎" class="headerlink" title="知乎"></a>知乎</h1><h4 id="放牛的星星专栏"><a href="#放牛的星星专栏" class="headerlink" title="放牛的星星专栏"></a>放牛的星星专栏</h4><p><a href="https://zhuanlan.zhihu.com/p/151238164">https://zhuanlan.zhihu.com/p/151238164</a></p><h4 id="真实感水体渲染技术总结"><a href="#真实感水体渲染技术总结" class="headerlink" title="真实感水体渲染技术总结"></a>真实感水体渲染技术总结</h4><p><a href="https://zhuanlan.zhihu.com/p/95917609">https://zhuanlan.zhihu.com/p/95917609</a></p><h4 id="真实感皮肤渲染技术总结"><a href="#真实感皮肤渲染技术总结" class="headerlink" title="真实感皮肤渲染技术总结"></a>真实感皮肤渲染技术总结</h4><p><a href="https://zhuanlan.zhihu.com/p/42433792">https://zhuanlan.zhihu.com/p/42433792</a></p><h4 id="Matcap"><a href="#Matcap" class="headerlink" title="Matcap"></a>Matcap</h4><p>基于MatCap实现适于移动平台的“次时代”车漆Shader</p><p><a href="https://zhuanlan.zhihu.com/p/25314364">https://zhuanlan.zhihu.com/p/25314364</a></p><p><a href="https://blog.csdn.net/ndsc_dw/article/details/50700201">https://blog.csdn.net/ndsc_dw/article/details/50700201</a></p><p>[<a href="https://github.com/QianMo/Awesome-Unity-Shader/tree/master/Volume%2016%20%E5%9F%BA%E4%BA%8EMatCap%E5%AE%9E%E7%8E%B0%E9%AB%98%E7%9C%9F%E5%AE%9E%E6%84%9F%E8%BD%A6%E6%BC%86Shader]">https://github.com/QianMo/Awesome-Unity-Shader/tree/master/Volume%2016%20%E5%9F%BA%E4%BA%8EMatCap%E5%AE%9E%E7%8E%B0%E9%AB%98%E7%9C%9F%E5%AE%9E%E6%84%9F%E8%BD%A6%E6%BC%86Shader]</a>(<a href="https://github.com/QianMo/Awesome-Unity-Shader/tree/master/Volume">https://github.com/QianMo/Awesome-Unity-Shader/tree/master/Volume</a> 16 基于MatCap实现高真实感车漆Shader)</p><h4 id="实时渲染4参考文献"><a href="#实时渲染4参考文献" class="headerlink" title="实时渲染4参考文献"></a>实时渲染4参考文献</h4><p><a href="https://github.com/QianMo/Real-Time-Rendering-4th-Bibliography-Collection">https://github.com/QianMo/Real-Time-Rendering-4th-Bibliography-Collection</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112105532883.png" alt="image-20211112105532883" style="zoom: 50%;"> <h4 id="实时渲染学习笔记目录"><a href="#实时渲染学习笔记目录" class="headerlink" title="实时渲染学习笔记目录"></a>实时渲染学习笔记目录</h4><p><a href="https://zhuanlan.zhihu.com/p/151301323">https://zhuanlan.zhihu.com/p/151301323</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222142449946.png" alt="image-20211222142449946" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222142514046.png" alt="image-20211222142514046" style="zoom: 67%;">  <h4 id="常用解析噪声"><a href="#常用解析噪声" class="headerlink" title="常用解析噪声"></a>常用解析噪声</h4><p><a href="https://zhuanlan.zhihu.com/p/346844820">https://zhuanlan.zhihu.com/p/346844820</a></p><h4 id="《Honey-Select》捏人剖析"><a href="#《Honey-Select》捏人剖析" class="headerlink" title="《Honey Select》捏人剖析"></a>《Honey Select》捏人剖析</h4><p><a href="https://zhuanlan.zhihu.com/p/28471808">https://zhuanlan.zhihu.com/p/28471808</a></p><h4 id="楚留香的捏脸系统如何实现的？"><a href="#楚留香的捏脸系统如何实现的？" class="headerlink" title="楚留香的捏脸系统如何实现的？"></a>楚留香的捏脸系统如何实现的？</h4><p><a href="https://www.zhihu.com/question/266839130/answer/315886068">https://www.zhihu.com/question/266839130/answer/315886068</a></p><h4 id="Unity学习笔记：基于-URP-搭建-Linear-色彩空间下的-UI-渲染管线"><a href="#Unity学习笔记：基于-URP-搭建-Linear-色彩空间下的-UI-渲染管线" class="headerlink" title="Unity学习笔记：基于 URP 搭建 Linear 色彩空间下的 UI 渲染管线"></a>Unity学习笔记：基于 URP 搭建 Linear 色彩空间下的 UI 渲染管线</h4><p><a href="https://zhuanlan.zhihu.com/p/432846112">https://zhuanlan.zhihu.com/p/432846112</a></p><p>《天谕手游》构建幻想世界的光与影—如何实现移动平台的次时代场景光影</p><p><a href="https://zhuanlan.zhihu.com/p/412828170">https://zhuanlan.zhihu.com/p/412828170</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222151409318.png" alt="image-20211222151409318" style="zoom:67%;"> <h4 id="网易游戏雷火事业群"><a href="#网易游戏雷火事业群" class="headerlink" title="网易游戏雷火事业群"></a>网易游戏雷火事业群</h4><p><a href="https://www.zhihu.com/org/wang-yi-you-xi-lei-huo-shi-ye-qun/posts?page=1">https://www.zhihu.com/org/wang-yi-you-xi-lei-huo-shi-ye-qun/posts?page=1</a></p><h4 id="关于静态批处理-动态批处理-GPU-Instancing-SRP-Batcher的详细剖析"><a href="#关于静态批处理-动态批处理-GPU-Instancing-SRP-Batcher的详细剖析" class="headerlink" title="关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析"></a>关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析</h4><p><a href="https://zhuanlan.zhihu.com/p/98642798">https://zhuanlan.zhihu.com/p/98642798</a></p><h1 id="研讨会"><a href="#研讨会" class="headerlink" title="研讨会"></a>研讨会</h1><h4 id="GDC-官网"><a href="#GDC-官网" class="headerlink" title="GDC 官网"></a>GDC 官网</h4><p><a href="https://www.gdcvault.com/">https://www.gdcvault.com/</a></p><h4 id="SIGGRAPH-官网"><a href="#SIGGRAPH-官网" class="headerlink" title="SIGGRAPH 官网"></a><strong>SIGGRAPH</strong> <strong>官网</strong></h4><p><a href="http://advances.realtimerendering.com/">http://advances.realtimerendering.com/</a></p><h4 id="TGDC-腾讯游戏开者大会"><a href="#TGDC-腾讯游戏开者大会" class="headerlink" title="TGDC 腾讯游戏开者大会"></a>TGDC 腾讯游戏开者大会</h4><p><a href="https://gameinstitute.qq.com/">https://gameinstitute.qq.com/</a></p><h4 id="计算机图形学与混合现实研讨会"><a href="#计算机图形学与混合现实研讨会" class="headerlink" title="计算机图形学与混合现实研讨会"></a>计算机图形学与混合现实研讨会</h4><p><a href="http://games-cn.org/">http://games-cn.org/</a></p><h4 id="网易游学"><a href="#网易游学" class="headerlink" title="网易游学"></a>网易游学</h4><p><a href="https://api.academy.163.com/course/careerList?order=1&amp;courseTap=11">https://api.academy.163.com/course/careerList?order=1&amp;courseTap=11</a></p><h4 id="Eurographics"><a href="#Eurographics" class="headerlink" title="Eurographics"></a>Eurographics</h4><p><a href="https://www.eg.org/wp/">https://www.eg.org/wp/</a></p><h4 id="MIT-CSAIL"><a href="#MIT-CSAIL" class="headerlink" title="MIT CSAIL"></a>MIT CSAIL</h4><p><a href="https://www.csail.mit.edu/">https://www.csail.mit.edu/</a></p><h1 id="Bilibili"><a href="#Bilibili" class="headerlink" title="Bilibili"></a>Bilibili</h1><p>【JTRP/三渲二】Unity高质量实时三渲二入门 HDRP/Pencil+/光线追踪/MMD/动画电影</p><p><a href="https://www.bilibili.com/video/BV1AA411A7RR?from=search&amp;seid=17801163495681700949&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1AA411A7RR?from=search&amp;seid=17801163495681700949&amp;spm_id_from=333.337.0.0</a></p><p>JTRP的Github地址：<a href="https://github.com/Jason-Ma-233/JasonMaToonRenderPipeline">https://github.com/Jason-Ma-233/JasonMaToonRenderPipeline</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211222155343007.png" alt="image-20211222155343007" style="zoom: 50%;"> ]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费资源网站收集</title>
      <link href="/BloodSoul.github.io/2021/09/13/gamedevelop/gamecontent/artresource/zi-yuan/mian-fei-zi-yuan-wang-zhan-shou-ji/"/>
      <url>/BloodSoul.github.io/2021/09/13/gamedevelop/gamecontent/artresource/zi-yuan/mian-fei-zi-yuan-wang-zhan-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、HDRI"><a href="#一、HDRI" class="headerlink" title="一、HDRI"></a>一、HDRI</h1><p>Poly Haven 地址：<a href="https://polyhaven.com/">https://polyhaven.com/</a></p><p>免费 <strong>HDRI</strong> 、Textures、Models</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210913105310060.png" alt="image-20210913105310060"> </p><h1 id="二、在线噪波图生成网站"><a href="#二、在线噪波图生成网站" class="headerlink" title="二、在线噪波图生成网站"></a>二、在线噪波图生成网站</h1><p><a href="http://cpetry.github.io/TextureGenerator-Online/">http://cpetry.github.io/TextureGenerator-Online/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211020143710431.png" alt="image-20211020143710431" style="zoom: 50%;"> <p>在线高度图或图片转法线工具</p><p><a href="https://cpetry.github.io/NormalMap-Online/">https://cpetry.github.io/NormalMap-Online/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211020143835202.png" alt="image-20211020143835202" style="zoom: 50%;"> <h1 id="三、Matcap-资源"><a href="#三、Matcap-资源" class="headerlink" title="三、Matcap 资源"></a>三、Matcap 资源</h1><p><a href="http://pixologic.com/zbrush/downloadcenter/library/#prettyPhoto">http://pixologic.com/zbrush/downloadcenter/library/#prettyPhoto</a></p><p><a href="https://www.pinterest.com/evayali/matcap/">https://www.pinterest.com/evayali/matcap/</a></p><p><a href="https://www.google.com.hk/search?q=MatCap&amp;newwindow=1&amp;safe=strict&amp;hl=zh-CN&amp;biw=1575&amp;bih=833&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;sa=X&amp;ved=0ahUKEwju8JDTpZnSAhUGn5QKHawODTIQsAQIIg">https://www.google.com.hk/search?q=MatCap&amp;newwindow=1&amp;safe=strict&amp;hl=zh-CN&amp;biw=1575&amp;bih=833&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;sa=X&amp;ved=0ahUKEwju8JDTpZnSAhUGn5QKHawODTIQsAQIIg</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112103502642.png" alt="image-20211112103502642" style="zoom:33%;"> ]]></content>
      
      
      <categories>
          
          <category> ArtResource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何内嵌bilibili网站链接</title>
      <link href="/BloodSoul.github.io/2021/09/12/gamedevelop/website/blog/hexo/content/ru-he-nei-qian-bilibili-wang-zhan-lian-jie/"/>
      <url>/BloodSoul.github.io/2021/09/12/gamedevelop/website/blog/hexo/content/ru-he-nei-qian-bilibili-wang-zhan-lian-jie/</url>
      
        <content type="html"><![CDATA[<p>直接打开我们需要嵌入的视频网页，点击视频下方的分享按钮，把嵌入代码复制，如下图：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912224707012.png" alt="image-20210912224707012"> </p><p>先说一下外链引用的一些 缺点 ：最重要的一点是清晰度默认只能显示最低的，这个是万万不能接受的，如何调清晰度后面会讲到，先学会引用先，一步一步来</p><p>先看看一个我视频的嵌入代码</p><iframe src="//player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>那么如何改变样式大小呢？</p><p>只需要加入代码</p><p> width=”100%” height=”600”</p><p>这里的宽度和高度可以根据自己的需求自行修改定制</p><p>最终代码是这样的（已经加粗显示了，方便查看）：</p><iframe src="//player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="600"> </iframe><p>视频清晰度的调节<br>先来看看我们的视频地址</p><p>//player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1</p><p>修改一下我们的地址</p><p>在 // 前面加上 https:</p><p>在视频地址最后面加上  &amp;high_quality=1</p><p>最终的成品是这样的，新增加的部分我已经加粗显示了</p><p><a href="https://player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1&amp;high_quality=1">https://player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1&amp;high_quality=1</a></p><p>移动端如何自适应<br>经过谷歌一下，找到了一些解决方法，这里直接给大家分享解密一下下</p><p>先直接看一下成品</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?aid=76053337&amp;;bvid=BV11J41127DF&amp;cid=130096191&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0" frameborder="no" scrolling="no"></iframe></div><p>稍微解释一下上面代码的含义：</p><p>page -&gt; 起始下标为 1 (默认值也是为1)</p><p>as_wide -&gt; 是否宽屏 【1: 宽屏, 0: 小屏】</p><p>high_quality -&gt; 是否高清 【1: 高清(最高1080p) / 0: 最低视频质量(默认)】</p><p>danmaku -&gt; 是否开启弹幕 【1: 开启(默认), 0: 关闭】</p><p>allowfullscreen -&gt; allowfullscreen= “ture” 允许全屏，使用该参数可以在浏览器中全屏播放</p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_align.asp">align</a></td><td align="left">leftrighttopmiddlebottom</td><td align="left">不赞成使用。请使用样式代替。规定如何根据周围的元素来对齐此框架。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_frameborder.asp">frameborder</a></td><td align="left">10</td><td align="left">规定是否显示框架周围的边框。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_height.asp">height</a></td><td align="left"><em>pixels</em> <em>%</em></td><td align="left">规定 iframe 的高度。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_longdesc.asp">longdesc</a></td><td align="left"><em>URL</em></td><td align="left">规定一个页面，该页面包含了有关 iframe 的较长描述。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_marginheight.asp">marginheight</a></td><td align="left"><em>pixels</em></td><td align="left">定义 iframe 的顶部和底部的边距。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_marginwidth.asp">marginwidth</a></td><td align="left"><em>pixels</em></td><td align="left">定义 iframe 的左侧和右侧的边距。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_name.asp">name</a></td><td align="left"><em>frame_name</em></td><td align="left">规定 iframe 的名称。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_sandbox.asp">sandbox</a></td><td align="left">“”allow-formsallow-same-originallow-scriptsallow-top-navigation</td><td align="left">启用一系列对 <iframe> 中内容的额外限制。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_scrolling.asp">scrolling</a></td><td align="left">yesnoauto</td><td align="left">规定是否在 iframe 中显示滚动条。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_seamless.asp">seamless</a></td><td align="left">seamless</td><td align="left">规定 <iframe> 看上去像是包含文档的一部分。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_src.asp">src</a></td><td align="left"><em>URL</em></td><td align="left">规定在 iframe 中显示的文档的 URL。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_srcdoc.asp">srcdoc</a></td><td align="left"><em>HTML_code</em></td><td align="left">规定在 <iframe> 中显示的页面的 HTML 内容。</td></tr><tr><td align="left"><a href="http://www.w3school.com.cn/tags/att_iframe_width.asp">width</a></td><td align="left"><em>pixels</em> <em>%</em></td><td align="left">定义 iframe 的宽度。</td></tr></tbody></table><p>文档转载改编自馨客栈研究院：<a href="https://www.bilibili.com/read/cv6775208">https://www.bilibili.com/read/cv6775208</a></p></iframe></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery添加live2d看板娘</title>
      <link href="/BloodSoul.github.io/2021/09/12/gamedevelop/website/blog/hexo/theme/matery-tian-jia-live2d-kan-ban-niang/"/>
      <url>/BloodSoul.github.io/2021/09/12/gamedevelop/website/blog/hexo/theme/matery-tian-jia-live2d-kan-ban-niang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、克隆资源"><a href="#一、克隆资源" class="headerlink" title="一、克隆资源"></a>一、克隆资源</h1><p>找到 live2d-widget fork 一份到自己的仓库。地址：  <a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912215146016.png" alt="image-20210912215146016"> </p><p>找到 live2d_api fork 一份到自己的仓库。地址： <a href="https://github.com/fghrsh/live2d_api">https://github.com/fghrsh/live2d_api</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912215321806.png" alt="image-20210912215321806"> </p><p>live2d-widget ：前端显示代码逻辑</p><p>live2d_api：live2d 动画核心 api，以及存放 live2d 模型资源</p><p>纸飞机彩蛋：<a href="http://www.websiteasteroids.com/%EF%BC%8C%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%EF%BC%9Ahttps://github.com/stevenjoezhang/asteroids">http://www.websiteasteroids.com/，仓库地址：https://github.com/stevenjoezhang/asteroids</a></p><h1 id="二、配置CDN"><a href="#二、配置CDN" class="headerlink" title="二、配置CDN"></a>二、配置CDN</h1><p><strong>JSDELIVR</strong> 一个免费快速的 CDN，官方地址：<a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912220514129.png" alt="image-20210912220514129" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912220608842.png" alt="image-20210912220608842" style="zoom: 67%;"> <p>下载 live2d-widget，在 autoload.js 脚本，修改 CDN 加载路径： live2d_path、cdnPath @后面为仓库的 Tag</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912220241022.png" alt="image-20210912220241022" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221000269.png" alt="image-20210912221000269" style="zoom: 80%;"> <p>在 waifu-tips.js 脚本修改 个人信息链接地址和纸飞机代码地址：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221234706.png" alt="image-20210912221234706" style="zoom: 50%;">  <p>目录结构：</p><ul><li><code>waifu-tips.js</code> 包含了按钮和对话框的逻辑</li><li><code>waifu-tips.json</code> 中定义了触发条件（<code>selector</code>，CSS 选择器）和触发时显示的文字（<code>text</code>）</li><li><code>waifu.css</code> 是看板娘的样式表</li></ul><p>修改完后，需要新建对应的 Tag</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221622555.png" alt="image-20210912221622555" style="zoom: 80%;">  <p>在对应的 GitHub 仓库 新建 Release 版本</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221747249.png" alt="image-20210912221747249" style="zoom: 67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221853137.png" alt="image-20210912221853137" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912221919590.png" alt="image-20210912221919590" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912222117313.png" alt="image-20210912222117313" style="zoom:67%;"> <p>CDN 生效是需要一段时间的，根据测试大概需要 1分钟左右</p><p>可以通过直接在浏览器中访问对应地址，查看是否生效完成</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912222331252.png" alt="image-20210912222331252" style="zoom:67%;"> <h1 id="三、植入-Matery-主题"><a href="#三、植入-Matery-主题" class="headerlink" title="三、植入 Matery 主题"></a>三、植入 Matery 主题</h1><p>在 head.ejs 中，添加对应脚本引用</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912222534030.png" alt="image-20210912222534030"> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/klj35/live2d-widget@v0.9.1/autoload.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>live2d 需要 font-awesome 库，默认 matery 已经添加了，如过因为一些原因没有添加需要手动添加如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912223112918.png" alt="image-20210912223112918" style="zoom:80%;"> ]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速熟悉 Matery 代码</title>
      <link href="/BloodSoul.github.io/2021/09/12/gamedevelop/website/blog/hexo/theme/kuai-su-shou-xi-matery-dai-ma/"/>
      <url>/BloodSoul.github.io/2021/09/12/gamedevelop/website/blog/hexo/theme/kuai-su-shou-xi-matery-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="一、语言"><a href="#一、语言" class="headerlink" title="一、语言"></a>一、语言</h1><h2 id="1-1-HTML"><a href="#1-1-HTML" class="headerlink" title="1.1 HTML"></a>1.1 HTML</h2><h3 id="1-1-1-简介"><a href="#1-1-1-简介" class="headerlink" title="1.1.1 简介"></a>1.1.1 简介</h3><p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。</p><p>您可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。</p><h3 id="1-1-2-总览"><a href="#1-1-2-总览" class="headerlink" title="1.1.2 总览"></a>1.1.2 总览</h3><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912125724400.png" alt="image-20210912125724400" style="zoom: 67%;"> <h3 id="1-1-3-教程网站"><a href="#1-1-3-教程网站" class="headerlink" title="1.1.3 教程网站"></a>1.1.3 教程网站</h3><p>菜鸟教程 ：<a href="https://www.runoob.com/html/html-intro.html">https://www.runoob.com/html/html-intro.html</a></p><p>W3School： <a href="https://www.w3school.com.cn/tags/index.asp">https://www.w3school.com.cn/tags/index.asp</a></p><h2 id="1-2-JavaScript"><a href="#1-2-JavaScript" class="headerlink" title="1.2 JavaScript"></a>1.2 JavaScript</h2><h3 id="1-2-1-简介"><a href="#1-2-1-简介" class="headerlink" title="1.2.1 简介"></a>1.2.1 简介</h3><p>JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><p>JavaScript 是一种轻量级的编程语言。</p><p>JavaScript 是可插入 HTML 页面的编程代码。</p><p>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</p><h3 id="1-2-2-本博客常用内容"><a href="#1-2-2-本博客常用内容" class="headerlink" title="1.2.2 本博客常用内容"></a>1.2.2 本博客常用内容</h3><p>ES2015(ES6) 新增加了两个重要的 JavaScript 关键字: <strong>let</strong> 和 <strong>const</strong>。</p><p><strong>let</strong> 声明的变量只在 <strong>let</strong> 命令所在的代码块内有效。</p><p><strong>const</strong> 声明一个只读的常量，一旦声明，常量的值就不能改变。</p><p>在 ES6 之前，JavaScript 只有两种作用域： <strong>全局变量</strong> 与 <strong>函数内的局部变量</strong>。</p><h3 id="1-2-3-教程网站"><a href="#1-2-3-教程网站" class="headerlink" title="1.2.3 教程网站"></a>1.2.3 教程网站</h3><p>菜鸟教程 ：<a href="https://www.runoob.com/js/js-tutorial.html">https://www.runoob.com/js/js-tutorial.html</a></p><h2 id="1-3-CSS"><a href="#1-3-CSS" class="headerlink" title="1.3 CSS"></a>1.3 CSS</h2><h3 id="1-3-1-简介"><a href="#1-3-1-简介" class="headerlink" title="1.3.1 简介"></a>1.3.1 简介</h3><ul><li>CSS 指层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)</li><li>样式定义<strong>如何显示</strong> HTML 元素</li><li>样式通常存储在<strong>样式表</strong>中</li><li>把样式添加到 HTML 4.0 中，是为了<strong>解决内容与表现分离的问题</strong></li><li><strong>外部样式表</strong>可以极大提高工作效率</li><li>外部样式表通常存储在 <strong>CSS 文件</strong>中</li><li>多个样式定义可<strong>层叠</strong>为一个</li></ul><h3 id="1-3-2-本博客常用"><a href="#1-3-2-本博客常用" class="headerlink" title="1.3.2 本博客常用"></a>1.3.2 本博客常用</h3><h5 id="1-3-2-1-声明-id"><a href="#1-3-2-1-声明-id" class="headerlink" title="1.3.2.1 声明 id"></a>1.3.2.1 声明 id</h5><p>CSS 中使用 # + idName 来声明 id，例如：#cardId、#fogImage</p><p>1.3.2.2 声明类</p><p>CSS 中使用 “.” 来声明类，例如：.bookClass、.img-item</p><p>CSS 中使用 @ 来声明媒体</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912131156275.png" alt="image-20210912131156275" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912131234082.png" alt="image-20210912131234082" style="zoom:50%;"> <h3 id="1-3-3-教程网站"><a href="#1-3-3-教程网站" class="headerlink" title="1.3.3 教程网站"></a>1.3.3 教程网站</h3><p>菜鸟教程： <a href="https://www.runoob.com/css/css-intro.html">https://www.runoob.com/css/css-intro.html</a></p><h2 id="1-4-EJS"><a href="#1-4-EJS" class="headerlink" title="1.4 EJS"></a>1.4 EJS</h2><h3 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1 简介"></a>1.4.1 简介</h3><p>“E” 代表什么？可以表示 “可嵌入（Embedded）”，也可以是“高效（Effective）”、“优雅（Elegant）”或者是“简单（Easy）”。EJS 是一套简单的模板语言，<strong>帮你利用普通的 JavaScript 代码生成 HTML 页面</strong>。EJS 没有如何组织内容的教条；也没有再造一套迭代和控制流语法；有的只是普通的 JavaScript 代码而已。</p><h3 id="1-4-2-教程网站"><a href="#1-4-2-教程网站" class="headerlink" title="1.4.2 教程网站"></a>1.4.2 教程网站</h3><p>EJS 官网： <a href="https://ejs.bootcss.com/#docs">https://ejs.bootcss.com/#docs</a></p><h2 id="1-5-HTML-DOM"><a href="#1-5-HTML-DOM" class="headerlink" title="1.5 HTML DOM"></a>1.5 HTML DOM</h2><h3 id="1-5-1-简介"><a href="#1-5-1-简介" class="headerlink" title="1.5.1 简介"></a>1.5.1 简介</h3><p>HTML DOM 定义了访问和操作 HTML 文档的标准。</p><h5 id="1-5-1-1-什么是-DOM？"><a href="#1-5-1-1-什么是-DOM？" class="headerlink" title="1.5.1.1 什么是 DOM？"></a>1.5.1.1 什么是 DOM？</h5><p>DOM 是 W3C（万维网联盟）的标准。</p><p>DOM 定义了访问 HTML 和 XML 文档的标准：</p><blockquote><p>“W3C 文档对象模型 （DOM） 是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。”</p></blockquote><p>W3C DOM 标准被分为 3 个不同的部分：</p><ul><li>核心 DOM - 针对任何结构化文档的标准模型</li><li>XML DOM - 针对 XML 文档的标准模型</li><li>HTML DOM - 针对 HTML 文档的标准模型</li></ul><p><strong>编者注：</strong>DOM 是 Document Object Model（文档对象模型）的缩写。</p><h5 id="1-5-1-2-什么是-HTML-DOM？"><a href="#1-5-1-2-什么是-HTML-DOM？" class="headerlink" title="1.5.1.2 什么是 HTML DOM？"></a>1.5.1.2 什么是 HTML DOM？</h5><p>HTML DOM 是：</p><ul><li>HTML 的标准对象模型</li><li>HTML 的标准编程接口</li><li>W3C 标准</li></ul><p>HTML DOM 定义了所有 HTML 元素的<em>对象</em>和<em>属性</em>，以及访问它们的<em>方法</em>。</p><p><em>换言之，HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准。</em></p><h3 id="1-5-2-教程"><a href="#1-5-2-教程" class="headerlink" title="1.5.2 教程"></a>1.5.2 教程</h3><p>菜鸟教程：<a href="https://www.runoob.com/htmldom/htmldom-intro.html">https://www.runoob.com/htmldom/htmldom-intro.html</a></p><h1 id="二、类库"><a href="#二、类库" class="headerlink" title="二、类库"></a>二、类库</h1><h2 id="2-1-JQuery"><a href="#2-1-JQuery" class="headerlink" title="2.1 JQuery"></a>2.1 JQuery</h2><h3 id="2-1-1-简介"><a href="#2-1-1-简介" class="headerlink" title="2.1.1 简介"></a>2.1.1 简介</h3><p>jQuery 是一个 JavaScript 库。</p><p>jQuery 极大地简化了 JavaScript 编程。</p><p>jQuery 库可以通过一行简单的标记被添加到网页中。</p><p>jQuery 是一个 JavaScript 函数库。</p><p>jQuery 是一个轻量级的”写的少，做的多”的 JavaScript 库。</p><p>jQuery 库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities</li></ul><p><strong>提示：</strong> 除此之外，jQuery 还提供了大量的插件。</p><h3 id="2-1-2-教程网站"><a href="#2-1-2-教程网站" class="headerlink" title="2.1.2 教程网站"></a>2.1.2 教程网站</h3><p>菜鸟教程：<a href="https://www.runoob.com/jquery/jquery-tutorial.html">https://www.runoob.com/jquery/jquery-tutorial.html</a></p><h2 id="2-2-lightGallery"><a href="#2-2-lightGallery" class="headerlink" title="2.2 lightGallery"></a>2.2 lightGallery</h2><h3 id="2-2-1-简介"><a href="#2-2-1-简介" class="headerlink" title="2.2.1 简介"></a>2.2.1 简介</h3><p>A lightweight, modular, JavaScript image and video lightbox gallery plugin. Available for React.js, Vue.js, Angular, and TypeScript.</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912132143259.png" alt="image-20210912132143259" style="zoom:67%;"> <h3 id="2-2-1-教程网站"><a href="#2-2-1-教程网站" class="headerlink" title="2.2.1 教程网站"></a>2.2.1 教程网站</h3><p>lightGallery官网 <a href="https://www.lightgalleryjs.com/docs/getting-started/">https://www.lightgalleryjs.com/docs/getting-started/</a></p><h1 id="三、Matery-流程图"><a href="#三、Matery-流程图" class="headerlink" title="三、Matery 流程图"></a>三、Matery 流程图</h1><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/block%E6%B5%81%E7%A8%8B%E5%9B%BE.drawio.png" alt="block流程图.drawio"> </p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站视频下载</title>
      <link href="/BloodSoul.github.io/2021/09/11/hobby/shi-pin-xia-zai/b-zhan-shi-pin-xia-zai/"/>
      <url>/BloodSoul.github.io/2021/09/11/hobby/shi-pin-xia-zai/b-zhan-shi-pin-xia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="一、准备环境"><a href="#一、准备环境" class="headerlink" title="一、准备环境"></a>一、准备环境</h1><p>Step1：下载贝贝本地解析工具并安装</p><p>地址 <a href="https://xbeibeix.com/file/?get=610e8b4af1a6e">https://xbeibeix.com/file/?get=610e8b4af1a6e</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911003752673.png" alt="image-20210911003752673" style="zoom:50%;"> <p>Step2：下载 ffmpeg 视频解析工具</p><p>官网地址： <a href="https://www.ffmpeg.org/">https://www.ffmpeg.org/</a></p><p>下载地址：<a href="https://www.ffmpeg.org/download.html#build-windows">https://www.ffmpeg.org/download.html#build-windows</a></p><p> 选择对应平台，然后点击下面的链接</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911011221456.png" alt="image-20210911011221456" style="zoom:50%;"> <p>向下滚动到 release，建议下载 full 版本</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911011350452.png" alt="image-20210911011350452" style="zoom:50%;"> <h1 id="二、准备视频"><a href="#二、准备视频" class="headerlink" title="二、准备视频"></a>二、准备视频</h1><p>step1: 启动下载的贝贝本地解析软件，点击主程序</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911004806307.png" alt="image-20210911004806307" style="zoom:50%;"> <p>step2：去贝贝本地解析视频网站，输入视频地址，并点击解析。网站地址： <a href="https://xbeibeix.com/api/bilibili/service">https://xbeibeix.com/api/bilibili/service</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911004920949.png" alt="image-20210911004920949" style="zoom:50%;"> <p>step3：滚动到网页最下端，选择视频尺寸点击下载，选择音频尺寸点击下载</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911005515190.png" alt="image-20210911005515190" style="zoom:50%;"> <p>step4：回到贝贝本地工具，点击下载器，在打开的网页中可以查看下载进度</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911005431379.png" alt="image-20210911005431379" style="zoom:50%;"> <p>step5: 点击蓝色文字，可以查看文件下载到的具体位置</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911010504524.png" alt="image-20210911010504524"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911010532233.png" alt="image-20210911010532233"></p><p>step6：去到对应路径，早到两个 .m4s 文件代表视频准备完成</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911010638181.png" alt="image-20210911010638181"> </p><h1 id="三、视频合并"><a href="#三、视频合并" class="headerlink" title="三、视频合并"></a>三、视频合并</h1><p>Step1：解压下载好的 ffmpeg</p><p>Step2：将准备好的两个视频从新命名为 video 和 audio，并复制到 ffmpeg 的 bin 目录下</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911011929545.png" alt="image-20210911011929545" style="zoom:80%;"> <p>Step3：通过 shift + 鼠标右键，点击在此处打开 PowerShell 窗口，输入如下指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.<span class="token punctuation">\</span>ffmpeg.exe -i video.m4s -i audio.m4s -codec copy Output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示如下则表示成功，会有一个 Output.mp4 文件，这个就是我们最终的结果</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911012307117.png" alt="image-20210911012307117" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911012707247.png" alt="image-20210911012707247" style="zoom:80%;"> <h1 id="四、视频合并的其他方式"><a href="#四、视频合并的其他方式" class="headerlink" title="四、视频合并的其他方式"></a>四、视频合并的其他方式</h1><h2 id="4-1-基于-ffmpeg-开发的一些可视化工具"><a href="#4-1-基于-ffmpeg-开发的一些可视化工具" class="headerlink" title="4.1 基于 ffmpeg 开发的一些可视化工具"></a>4.1 基于 ffmpeg 开发的一些可视化工具</h2><h3 id="4-1-1-贝贝工具箱"><a href="#4-1-1-贝贝工具箱" class="headerlink" title="4.1.1 贝贝工具箱"></a>4.1.1 贝贝工具箱</h3><h4 id="4-1-1-1-下载工具"><a href="#4-1-1-1-下载工具" class="headerlink" title="4.1.1.1 下载工具"></a>4.1.1.1 下载工具</h4><p>在贝贝网站上点击下载贝贝工具箱，解压密码 123</p><p>网站地址 <a href="https://xbeibeix.com/api/bilibili/">https://xbeibeix.com/api/bilibili/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911093916564.png" alt="image-20210911093916564" style="zoom: 67%;"> <h4 id="4-1-1-2-工具使用方式"><a href="#4-1-1-2-工具使用方式" class="headerlink" title="4.1.1.2 工具使用方式"></a>4.1.1.2 工具使用方式</h4><p>打开工具一次点击 视频功能-&gt;视频音频合并-&gt;选择视频，选择音频-&gt;运行</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911094402614.png" alt="image-20210911094402614" style="zoom:67%;"> <h3 id="4-1-2-贝贝在线音频视频合并"><a href="#4-1-2-贝贝在线音频视频合并" class="headerlink" title="4.1.2 贝贝在线音频视频合并"></a>4.1.2 贝贝在线音频视频合并</h3><p>网站地址：<a href="https://xbeibeix.com/videotool/">https://xbeibeix.com/videotool/</a></p><p>依次点击合并-&gt;选择视频、音频-&gt;合并视频与音频-&gt;下载</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911094836049.png" alt="image-20210911094836049" style="zoom: 67%;"> <h3 id="4-1-3-有损去水印"><a href="#4-1-3-有损去水印" class="headerlink" title="4.1.3 有损去水印"></a>4.1.3 有损去水印</h3><p>利用格式工程进行去水印地址 <a href="http://www.pcgeshi.com/">http://www.pcgeshi.com/</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911131437452.png" alt="image-20210911131437452" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911131538354.png" alt="image-20210911131538354" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911131607496.png" alt="image-20210911131607496" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911131645810.png" alt="image-20210911131645810" style="zoom:50%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210911131717300.png" alt="image-20210911131717300" style="zoom:50%;"> ]]></content>
      
      
      <categories>
          
          <category> Hobby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式学习</title>
      <link href="/BloodSoul.github.io/2021/09/10/gamedevelop/assisttool/ban-ben-guan-li/ming-ling-xing/zheng-ze-biao-da-shi-xue-xi/"/>
      <url>/BloodSoul.github.io/2021/09/10/gamedevelop/assisttool/ban-ben-guan-li/ming-ling-xing/zheng-ze-biao-da-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在使用 Picgo 上传图片的时，会默认添加一个 ![] 图片名称标记，导致最终的文档会附带一些无意义的图片名称（主要是我懒，没给图片起名，大部分都是截图或者复制的图片），想动态筛选替换，抹去无意义的干扰，废话不多说，直接开始。</p><p>以下内容从菜鸟教程正则表达式复制，原文链接 <a href="https://www.runoob.com/regexp/regexp-syntax.html">https://www.runoob.com/regexp/regexp-syntax.html</a></p><p>常用公式写到最前面：</p><ul><li><p>用于匹配 alt=”xxx”： <strong>alt=”.+?\b”</strong></p></li><li><p>用于匹配 ![xxx]： <strong>![.+]</strong></p></li></ul><h1 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h1><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[ABC]</td><td align="left">匹配 <strong>[…]</strong> 中的所有字符，例如 <strong>[aeiou]</strong> 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910160148979.png"></td></tr><tr><td align="left">[^ABC]</td><td align="left">匹配除了 <strong>[…]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910160226835.png"></td></tr><tr><td align="left">[A-Z]</td><td align="left">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/C5E357BD-65E3-4EB3-9D80-10D096F19287.jpg"></td></tr><tr><td align="left">.</td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/0FD7E77D-38A7-43BC-B51A-7DBA23A77756.jpg"></td></tr><tr><td align="left">[\s\S]</td><td align="left">匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/47CA6C59-64CF-433A-909E-1E342349A4E0.jpg"></td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/F35A5971-3519-4CAE-8BEC-9DE8F4A55257.jpg"></td></tr></tbody></table><hr><h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\cx</td><td align="left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><hr><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <strong>runoo*b</strong> 中的 *****，简单的说就是表示任何字符串的意思。如果要查找字符串中的 ***** 符号，则需要对 ***** 进行转义，即在其前加一个 <em>***，**runo*ob</em>* 匹配字符串 <strong>runo*ob</strong>。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符*<em>*</em> 放在它们前面。下表列出了正则表达式中的特殊字符：</p><table><thead><tr><th align="left">特别字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$</td><td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td align="left">( )</td><td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td align="left">[</td><td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td align="left">\</td><td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “"，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td align="left">{</td><td align="left">标记限定符表达式的开始。要匹配 {，请使用 {。</td></tr><tr><td align="left">|</td><td align="left">指明两项之间的一个选择。要匹配 |，请使用 |。</td></tr></tbody></table><hr><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><p>以下正则表达式匹配一个正整数，**[1-9]<strong>设置第一个数字不是 0，</strong>[0-9]*** 表示任意多个数字：</p><pre class="line-numbers language-none"><code class="language-none">/[1-9][0-9]*/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/F249891D-F3D9-48D5-A3CB-6FD8FD029117.jpg"></p><p>请注意，限定符出现在范围表达式之后。因此，它应用于整个范围表达式，在本例中，只指定从 0 到 9 的数字（包括 0 和 9）。</p><p>这里不使用 + 限定符，因为在第二个位置或后面的位置不一定需要有一个数字。也不使用 ? 字符，因为使用 ? 会将整数限制到只有两位数。</p><p>如果你想设置 0~99 的两位数，可以使用下面的表达式来至少指定一位但至多两位数字。</p><pre class="line-numbers language-none"><code class="language-none">/[0-9]{1,2}/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的表达式的缺点是，只能匹配两位数字，而且可以匹配 0、00、01、10 99 的章节编号仍只匹配开头两位数字。</p><p>改进下，匹配 1~99 的正整数表达式如下：</p><pre class="line-numbers language-none"><code class="language-none">/[1-9][0-9]?/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">/[1-9][0-9]{0,1}/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>*</strong> 和 <strong>+</strong> 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。</p><p>例如，您可能搜索 HTML 文档，以查找在 <strong>h1</strong> 标签内的内容。HTML 代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;h1&gt;RUNOOB-菜鸟教程&lt;/h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>贪婪：</strong>下面的表达式匹配从开始小于符号 (&lt;) 到关闭 h1 标记的大于符号 (&gt;) 之间的所有内容。</p><pre class="line-numbers language-none"><code class="language-none">/&lt;.*&gt;/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/AD8F3320-2F2E-4513-9BB5-84450D62783D.jpg"></p><p><strong>非贪婪：</strong>如果您只需要匹配开始和结束 h1 标签，下面的非贪婪表达式只匹配 &lt;h1&gt;。</p><pre class="line-numbers language-none"><code class="language-none">/&lt;.*?&gt;/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/A6E72665-CE61-46F4-A72B-A34BC13F5820.jpg"></p><p>也可以使用以下正则表达式来匹配 h1 标签，表达式则是：</p><pre class="line-numbers language-none"><code class="language-none">/&lt;\w+?&gt;/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/C6E89F76-D059-4600-A507-74C42306A790.jpg"></p><p>通过在 *<strong><strong>、</strong>+</strong> 或 <strong>?</strong> 限定符之后放置 <strong>?</strong> ，该表达式从”贪婪”表达式转换为”非贪婪”表达式或者最小匹配。</p><hr><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td align="left">\B</td><td align="left">非单词边界匹配。</td></tr></tbody></table><p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 <strong>^*</strong> 之类的表达式。</p><p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <strong>^</strong> 字符。不要将 <strong>^</strong> 的这种用法与中括号表达式内的用法混淆。</p><p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <strong>$</strong> 字符。</p><p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p><pre class="line-numbers language-none"><code class="language-none">/^Chapter [1-9][0-9]{0,1}/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它既出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。</p><pre class="line-numbers language-none"><code class="language-none">/^Chapter [1-9][0-9]{0,1}$/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>匹配单词边界稍有不同，但向正则表达式添加了很重要的能力。单词边界是单词和空格之间的位置。非单词边界是任何其他位置。下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现在单词边界后面：</p><pre class="line-numbers language-none"><code class="language-none">/\bCha/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>\b</strong> 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 Chapter 中的字符串 ter，因为它出现在单词边界的前面：</p><pre class="line-numbers language-none"><code class="language-none">/ter\b/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：</p><pre class="line-numbers language-none"><code class="language-none">/\Bapt/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>字符串 apt 出现在单词 Chapter 中的非单词边界处，但出现在单词 aptitude 中的单词边界处。对于 <strong>\B</strong> 非单词边界运算符，位置并不重要，因为匹配不关心究竟是单词的开头还是结尾。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。</p><p><strong>()</strong> 表示捕获分组， <strong>()</strong> 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg"></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/82A7298A-2A94-49E3-AA27-A7778EE89711.jpg"></p><p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong>?:</strong> 放在第一个选项前来消除这种副作用。</p><p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?=</strong> 和 <strong>?!</strong> ，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><h3 id="以下列出-、-lt-、-、-lt-的使用区别"><a href="#以下列出-、-lt-、-、-lt-的使用区别" class="headerlink" title="以下列出 ?=、?<=、?!、?<! 的使用区别"></a>以下列出 ?=、?&lt;=、?!、?&lt;! 的使用区别</h3><p> <strong>exp1(?=exp2)</strong> ：查找 exp2 前面的 exp1。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/reg-111.jpg"></p><p><strong>(?&lt;=exp2)exp1</strong>：查找 exp2 后面的 exp1。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/reg-222.jpg"></p><p><strong>exp1(?!exp2)</strong> ：查找后面不是 exp2 的 exp1。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/reg-333.jpg"></p><p><strong>(?&lt;!exp2)exp1</strong>：查找前面不是 exp2 的 exp1。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/reg-444.jpg"></p><blockquote><p>更多内容可以参考：<a href="https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html">正则表达式的先行断言(lookahead)和后行断言(lookbehind)</a></p></blockquote><hr><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <strong>\n</strong> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p><p>可以使用非捕获元字符 <strong>?:<strong>、</strong>?=</strong> 或 <strong>?!</strong> 来重写捕获，忽略对相关匹配的保存。</p><p>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。以下面的句子为例：</p><pre class="line-numbers language-none"><code class="language-none">Is is the cost of of gasoline going up up?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的句子很显然有多个重复的单词。如果能设计一种方法定位该句子，而不必查找每个单词的重复出现，那该有多好。下面的正则表达式使用单个子表达式来实现这一点 ：链接 <a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp3">https://www.runoob.com/try/try.php?filename=tryjsref_regexp3</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910170028508.png" alt="" style="zoom: 67%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910170259432.png"> </p><p>捕获的表达式，正如 <strong>[a-z]+</strong> 指定的，包括一个或多个字母。正则表达式的第二部分是对以前捕获的子匹配项的引用，即，单词的第二个匹配项正好由括号表达式匹配。<strong>\1</strong> 指定第一个子匹配项。</p><p>单词边界元字符确保只检测整个单词。否则，诸如 “is issued” 或 “this is” 之类的词组将不能正确地被此表达式识别。</p><p>正则表达式后面的全局标记 <strong>g</strong> 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。</p><p>表达式的结尾处的不区分大小写 <strong>i</strong> 标记指定不区分大小写。</p><p>多行标记指定换行符的两边可能出现潜在的匹配。</p><p>反向引用还可以将通用资源指示符 (URI) 分解为其组件。假定您想将下面的 URI 分解为协议（ftp、http 等等）、域地址和页/路径：</p><pre class="line-numbers language-none"><code class="language-none">http://www.runoob.com:80/html/html-tutorial.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面的正则表达式提供该功能：链接 <a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp4">https://www.runoob.com/try/try.php?filename=tryjsref_regexp4</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910170455200.png"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910170542288.png"> </p><p>第三行代码 <strong>str.match(patt1)</strong> 返回一个数组，实例中的数组包含 5 个元素，索引 0 对应的是整个字符串，索引 1 对应第一个匹配符（括号内），以此类推。</p><p>第一个括号子表达式捕获 Web 地址的协议部分。该子表达式匹配在冒号和两个正斜杠前面的任何单词。</p><p>第二个括号子表达式捕获地址的域地址部分。子表达式匹配非 <strong>:</strong> 和 <strong>/</strong> 之后的一个或多个字符。</p><p>第三个括号子表达式捕获端口号（如果指定了的话）。该子表达式匹配冒号后面的零个或多个数字。只能重复一次该子表达式。</p><p>最后，第四个括号子表达式捕获 Web 地址指定的路径和 / 或页信息。该子表达式能匹配不包括 # 或空格字符的任何字符序列。</p><p>将正则表达式应用到上面的 URI，各子匹配项包含下面的内容：</p><ul><li>第一个括号子表达式包含 <strong>http</strong></li><li>第二个括号子表达式包含 <strong><a href="http://www.runoob.com/">www.runoob.com</a></strong></li><li>第三个括号子表达式包含 <strong>:80</strong></li><li>第四个括号子表达式包含 <strong>/html/html-tutorial.html</strong></li></ul><h1 id="三、修饰符（标记）"><a href="#三、修饰符（标记）" class="headerlink" title="三、修饰符（标记）"></a>三、修饰符（标记）</h1><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p><p>标记不写在正则表达式里，标记位于表达式之外，格式如下：</p><pre class="line-numbers language-none"><code class="language-none">/pattern/flags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了正则表达式常用的修饰符：</p><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">ignore - 不区分大小写</td><td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td align="left">g</td><td align="left">global - 全局匹配</td><td align="left">查找所有的匹配项。</td></tr><tr><td align="left">m</td><td align="left">multi line - 多行匹配</td><td align="left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td align="left">s</td><td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td align="left">默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><h3 id="g-修饰符"><a href="#g-修饰符" class="headerlink" title="g 修饰符"></a>g 修饰符</h3><p>g 修饰符可以查找字符串中所有的匹配项：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/D1A5F1E7-E25E-448E-9BE3-68508E058E99.jpg"></p><p>实例<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171220928.png"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171243134.png"><br><a href="https://www.runoob.com/try/try.php?filename=tryjsref_match_regexp4">尝试一下 »</a></p><h3 id="i-修饰符"><a href="#i-修饰符" class="headerlink" title="i 修饰符"></a>i 修饰符</h3><p>i 修饰符为不区分大小写匹配，实例如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/FF2D211D-0B88-492C-BAA4-04183278383E.jpg"></p><p>实例<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171433999.png"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171452455.png"><br><a href="https://www.runoob.com/try/try.php?filename=tryjsref_match_regexp3">尝试一下 »</a></p><h3 id="m-修饰符"><a href="#m-修饰符" class="headerlink" title="m 修饰符"></a>m 修饰符</h3><p>m 修饰符可以使 <strong>^</strong> 和 <strong>$</strong> 匹配一段文本中每行的开始和结束位置。</p><p>g 只匹配第一行，添加 m 之后实现多行。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/BC3E6D8A-21D2-44F8-A1AE-D90C4939D37A.jpg"></p><p>以下实例字符串中使用 <strong>\n</strong> 来换行：</p><p>实例<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171625576.png"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171644247.png"> </p><p><a href="https://www.runoob.com/try/try.php?filename=tryjsref_match_regexp6">尝试一下 »</a></p><h3 id="s-修饰符"><a href="#s-修饰符" class="headerlink" title="s 修饰符"></a>s 修饰符</h3><p>默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 s 之后, <strong>.</strong> 中包含换行符 <strong>\n</strong>。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/5CDFC964-F0C4-4ADE-80F3-17FB4748DE14.jpg"> </p><p>s 修饰符实例如下：</p><p>实例<br><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171723138.png"> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910171738473.png"><br><a href="https://www.runoob.com/try/try.php?filename=tryjsref_match_regexp5">尝试一下 »</a></p><h1 id="四、元字符"><a href="#四、元字符" class="headerlink" title="四、元字符"></a>四、元字符</h1><p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “" 而 “(“ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td align="left">(?=pattern)</td><td align="left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?=95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?&lt;=pattern)</td><td align="left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”`(?&lt;=95</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类似，只是方向相反。例如”`(?&lt;!95</td></tr><tr><td align="left">x|y</td><td align="left">匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^xyz]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td align="left">[^a-z]</td><td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td align="left">\cx</td><td align="left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="left">\W</td><td align="left">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td align="left">\xn</td><td align="left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="left">\num</td><td align="left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td align="left">\nml</td><td align="left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910172328949.png"> </p><p><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp-metachar">尝试一下 »</a> </p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210910172351115.png"> </p><h1 id="五、运算优先级"><a href="#五、运算优先级" class="headerlink" title="五、运算优先级"></a>五、运算优先级</h1><p>正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。</p><p>相同优先级的从左到右进行运算，不同优先级的运算先高后低。下表从最高到最低说明了各种正则表达式运算符的优先级顺序：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">转义符</td></tr><tr><td align="left">(), (?:), (?=), []</td><td align="left">圆括号和方括号</td></tr><tr><td align="left">*, +, ?, {n}, {n,}, {n,m}</td><td align="left">限定符</td></tr><tr><td align="left">^, $, \任何元字符、任何字符</td><td align="left">定位点和序列（即：位置和顺序）</td></tr><tr><td align="left">|</td><td align="left">替换，”或”操作 字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</td></tr></tbody></table><h1 id="六、匹配规则"><a href="#六、匹配规则" class="headerlink" title="六、匹配规则"></a>六、匹配规则</h1><h2 id="基本模式匹配"><a href="#基本模式匹配" class="headerlink" title="基本模式匹配"></a>基本模式匹配</h2><p>一切从最基本的开始。模式，是正则表达式最基本的元素，它们是一组描述字符串特征的字符。模式可以很简单，由普通的字符串组成，也可以非常复杂，往往用特殊的字符表示一个范围内的字符、重复出现，或表示上下文。例如：</p><pre class="line-numbers language-none"><code class="language-none">^once<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个模式包含一个特殊的字符 <strong>^</strong>，表示该模式只匹配那些以 <strong>once</strong> 开头的字符串。例如该模式与字符串 <strong>“once upon a time”</strong> 匹配，与 <strong>“There once was a man from NewYork”</strong> 不匹配。正如如 <strong>^</strong> 符号表示开头一样， <strong>$</strong>   符号用来匹配那些以给定模式结尾的字符串。</p><pre class="line-numbers language-none"><code class="language-none">bucket$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个模式与 <strong>“Who kept all of this cash in a bucket”</strong> 匹配，与 <strong>“buckets”</strong> 不匹配。字符 <strong>^</strong> 和 <strong>$</strong> 同时使用时，表示精确匹配（字符串与模式一样）。例如：</p><pre class="line-numbers language-none"><code class="language-none">^bucket$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只匹配字符串 <strong>“bucket”</strong> 。如果一个模式不包括 <strong>^</strong> 和 <strong>$</strong> ，那么它与任何包含该模式的字符串匹配。例如模式：</p><pre class="line-numbers language-none"><code class="language-none">once<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与字符串</p><pre class="line-numbers language-none"><code class="language-none">There once was a man from NewYorkWho kept all of his cash in a bucket.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是匹配的。</p><p>在该模式中的字母 <strong>(o-n-c-e)</strong> 是字面的字符，也就是说，他们表示该字母本身，数字也是一样的。其他一些稍微复杂的字符，如标点符号和白字符（空格、制表符等），要用到转义序列。所有的转义序列都用反斜杠   \  打头。制表符的转义序列是 <strong>\t</strong> 。所以如果我们要检测一个字符串是否以制表符开头，可以用这个模式：</p><pre class="line-numbers language-none"><code class="language-none">^\t <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似的，用 <strong>\n</strong> 表示 <strong>“新行”</strong> ， <strong>\r</strong> 表示回车。其他的特殊符号，可以用在前面加上反斜杠，如反斜杠本身用 \ 表示，句号 <strong>.</strong> 用 <strong>.</strong> 表示，以此类推。</p><h2 id="字符簇"><a href="#字符簇" class="headerlink" title="字符簇"></a>字符簇</h2><p>在 INTERNET 的程序中，正则表达式通常用来验证用户的输入。当用户提交一个 FORM 以后，要判断输入的电话号码、地址、EMAIL 地址、信用卡号码等是否有效，用普通的基于字面的字符是不够的。</p><p>所以要用一种更自由的描述我们要的模式的办法，它就是字符簇。要建立一个表示所有元音字符的字符簇，就把所有的元音字符放在一个方括号里：</p><pre class="line-numbers language-none"><code class="language-none">[AaEeIiOoUu]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个模式与任何元音字符匹配，但只能表示一个字符。用连字号可以表示一个字符的范围，如：</p><pre class="line-numbers language-none"><code class="language-none">[a-z] // 匹配所有的小写字母 [A-Z] // 匹配所有的大写字母 [a-zA-Z] // 匹配所有的字母 [0-9] // 匹配所有的数字 [0-9\.\-] // 匹配所有的数字，句号和减号 [ \f\r\t\n] // 匹配所有的白字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的，这些也只表示一个字符，这是一个非常重要的。如果要匹配一个由一个小写字母和一位数字组成的字符串，比如 “z2”、”t6” 或 “g7”，但不是 “ab2”、”r2d3” 或 “b52” 的话，用这个模式：</p><pre class="line-numbers language-none"><code class="language-none">^[a-z][0-9]$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尽管 <strong>[a-z]</strong> 代表 26 个字母的范围，但在这里它只能与第一个字符是小写字母的字符串匹配。</p><p>前面曾经提到^表示字符串的开头，但它还有另外一个含义。当在一组方括号里使用 <strong>^</strong> 时，它表示”<strong>非</strong>“或”<strong>排除</strong>“的意思，常常用来剔除某个字符。还用前面的例子，我们要求第一个字符不能是数字：</p><pre class="line-numbers language-none"><code class="language-none">^[^0-9][0-9]$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个模式与 “&amp;5”、”g7”及”-2” 是匹配的，但与 “12”、”66” 是不匹配的。下面是几个排除特定字符的例子：</p><pre class="line-numbers language-none"><code class="language-none">[^a-z] //除了小写字母以外的所有字符 [^\\\/\^] //除了(\)(/)(^)之外的所有字符 [^\"\'] //除了双引号(")和单引号(')之外的所有字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>特殊字符 <strong>.</strong>(点，句号)在正则表达式中用来表示除了”新行”之外的所有字符。所以模式 <strong>^.5$</strong> 与任何两个字符的、以数字5结尾和以其他非”新行”字符开头的字符串匹配。模式 <strong>.</strong> 可以匹配任何字符串，<strong>换行符（\n、\r）除外</strong>。</p><p>PHP的正则表达式有一些内置的通用字符簇，列表如下：</p><table><thead><tr><th align="left">字符簇</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[[:alpha:]]</td><td align="left">任何字母</td></tr><tr><td align="left">[[:digit:]]</td><td align="left">任何数字</td></tr><tr><td align="left">[[:alnum:]]</td><td align="left">任何字母和数字</td></tr><tr><td align="left">[[:space:]]</td><td align="left">任何空白字符</td></tr><tr><td align="left">[[:upper:]]</td><td align="left">任何大写字母</td></tr><tr><td align="left">[[:lower:]]</td><td align="left">任何小写字母</td></tr><tr><td align="left">[[:punct:]]</td><td align="left">任何标点符号</td></tr><tr><td align="left">[[:xdigit:]]</td><td align="left">任何16进制的数字，相当于[0-9a-fA-F]</td></tr></tbody></table><h2 id="确定重复出现"><a href="#确定重复出现" class="headerlink" title="确定重复出现"></a>确定重复出现</h2><p>到现在为止，你已经知道如何去匹配一个字母或数字，但更多的情况下，可能要匹配一个单词或一组数字。一个单词有若干个字母组成，一组数字有若干个单数组成。跟在字符或字符簇后面的花括号({})用来确定前面的内容的重复出现的次数。</p><table><thead><tr><th align="left">字符簇</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^[a-zA-Z_]$</td><td align="left">所有的字母和下划线</td></tr><tr><td align="left">^[[:alpha:]]{3}$</td><td align="left">所有的3个字母的单词</td></tr><tr><td align="left">^a$</td><td align="left">字母a</td></tr><tr><td align="left">^a{4}$</td><td align="left">aaaa</td></tr><tr><td align="left">^a{2,4}$</td><td align="left">aa,aaa或aaaa</td></tr><tr><td align="left">^a{1,3}$</td><td align="left">a,aa或aaa</td></tr><tr><td align="left">^a{2,}$</td><td align="left">包含多于两个a的字符串</td></tr><tr><td align="left">^a{2,}</td><td align="left">如：aardvark和aaab，但apple不行</td></tr><tr><td align="left">a{2,}</td><td align="left">如：baad和aaa，但Nantucket不行</td></tr><tr><td align="left">\t{2}</td><td align="left">两个制表符</td></tr><tr><td align="left">.{2}</td><td align="left">所有的两个字符</td></tr></tbody></table><p>这些例子描述了花括号的三种不同的用法。一个数字 <strong>{x}</strong> 的意思是<strong>前面的字符或字符簇只出现x次</strong> ；一个数字加逗号 <strong>{x,}</strong> 的意思是<strong>前面的内容出现x或更多的次数</strong> ；两个数字用逗号分隔的数字 <strong>{x,y}</strong> 表示 <strong>前面的内容至少出现x次，但不超过y次</strong>。我们可以把模式扩展到更多的单词或数字：</p><pre class="line-numbers language-none"><code class="language-none">^[a-zA-Z0-9_]{1,}$      // 所有包含一个以上的字母、数字或下划线的字符串 ^[1-9][0-9]{0,}$        // 所有的正整数 ^\-{0,1}[0-9]{1,}$      // 所有的整数 ^[-]?[0-9]+\.?[0-9]+$   // 所有的浮点数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后一个例子不太好理解，是吗？这么看吧：以一个可选的负号 (<strong>[-]?</strong>) 开头 (<strong>^</strong>)、跟着1个或更多的数字( <strong>[0-9]+</strong> )、和一个小数点(<strong>.</strong>)再跟上1个或多个数字( <strong>[0-9]+</strong> )，并且后面没有其他任何东西( <strong>$</strong> )。下面你将知道能够使用的更为简单的方法。</p><p>特殊字符 <strong>?</strong> 与 <strong>{0,1}</strong> 是相等的，它们都代表着： <strong>0个或1个前面的内容</strong> 或 <strong>前面的内容是可选的</strong> 。所以刚才的例子可以简化为：</p><pre class="line-numbers language-none"><code class="language-none">^\-?[0-9]{1,}\.?[0-9]{1,}$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>特殊字符 <strong>*</strong> 与 <strong>{0,}</strong> 是相等的，它们都代表着 <strong>0 个或多个前面的内容</strong> 。最后，字符 <strong>+</strong> 与 <strong>{1,}</strong> 是相等的，表示 <strong>1 个或多个前面的内容</strong> ，所以上面的4个例子可以写成：</p><pre class="line-numbers language-none"><code class="language-none">^[a-zA-Z0-9_]+$      // 所有包含一个以上的字母、数字或下划线的字符串 ^[1-9][0-9]*$        // 所有的正整数 ^\-?[0-9]+$          // 所有的整数 ^[-]?[0-9]+(\.[0-9]+)?$ // 所有的浮点数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然这并不能从技术上降低正则表达式的复杂性，但可以使它们更容易阅读。</p><h1 id="六、示例"><a href="#六、示例" class="headerlink" title="六、示例"></a>六、示例</h1><h2 id="a、校验数字的表达式"><a href="#a、校验数字的表达式" class="headerlink" title="a、校验数字的表达式"></a>a、校验数字的表达式</h2><ul><li>数字：<strong>^[0-9]*$</strong></li><li>n位的数字：<strong>^\d{n}$</strong></li><li>至少n位的数字<strong>：^\d{n,}$</strong></li><li>m-n位的数字：<strong>^\d{m,n}$</strong></li><li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li><li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li><li>带1-2位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li><li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li><li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>有1~3位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li><li>非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li><li>非零的负整数：<strong>^-[1-9][]0-9”*$ 或 ^-[1-9]\d*$</strong></li><li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li><li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li><li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</strong></li><li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</strong></li><li>正浮点数：<strong>^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</strong></li><li>负浮点数：<strong>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</strong></li><li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</strong></li></ul><hr><h2 id="b、校验字符的表达式"><a href="#b、校验字符的表达式" class="headerlink" title="b、校验字符的表达式"></a>b、校验字符的表达式</h2><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li><li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号： <strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有^%&amp;’,;=?$"等字符： <strong>[^%&amp;’,;=?$\x22]+</strong></li><li>禁止输入含有~的字符： <strong>[^~\x22]+</strong></li></ul><hr><h2 id="c、特殊需求表达式"><a href="#c、特殊需求表达式" class="headerlink" title="c、特殊需求表达式"></a>c、特殊需求表达式</h2><ul><li>Email地址： <strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</strong></li><li>域名： <strong>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?</strong></li><li>InternetURL： <strong>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</strong></li><li>手机号码：<strong>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：**(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)**</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9]|1[0-2])$</strong></li><li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件： <strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</strong></li><li>中文字符的正则表达式： <strong>[\u4e00-\u9fa5]</strong></li><li>双字节字符： <strong>[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</strong></li><li>空白行的正则表达式： <strong>\n\s*\r (可以用来删除空白行)</strong></li><li>HTML标记的正则表达式： <strong>&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</strong></li><li>腾讯QQ号： <strong>[1-9][0-9]{4,} (腾讯QQ号从10000开始)</strong> </li><li>中国邮政编码： <strong>[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</strong></li><li>IPv4地址： <strong>((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}</strong></li></ul><h2 id="d-匹配-PicGo-图片的表达式"><a href="#d-匹配-PicGo-图片的表达式" class="headerlink" title="d. 匹配 PicGo 图片的表达式"></a>d. 匹配 PicGo 图片的表达式</h2><ul><li><p>用于匹配 alt=”xxx”： <strong>alt=”.+?\b”</strong></p></li><li><p>用于匹配 ![xxx]： <strong>![.+]</strong></p></li></ul><h1 id="七、实践心得"><a href="#七、实践心得" class="headerlink" title="七、实践心得"></a>七、实践心得</h1><p>在做 Shader评估工具时，需要匹配所使用的 Sin 方法</p><p>匹配 sin(xx); 的思路</p><p>1、先使用 \b 来匹配单词的开始或结尾</p><p>2、使用 sin 来匹配主题内容</p><p>4、使用 ( 来匹配 “(”,来排除后面跟其他字母的情况</p><p>3、因为sin 和（）中间可以有任意多个空格，所以使用 \s 来匹配一个空格，后面跟上 * 来匹配没有空格或者有任意个空格</p><p>4、最终如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">\bsin\s*\(<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20211112112930034.png" alt="image-20211112112930034" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> AssistTool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纹理</title>
      <link href="/BloodSoul.github.io/2021/09/10/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/zi-chan/wen-li/wen-li/"/>
      <url>/BloodSoul.github.io/2021/09/10/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/zi-chan/wen-li/wen-li/</url>
      
        <content type="html"><![CDATA[<h1 id="一、纹理"><a href="#一、纹理" class="headerlink" title="一、纹理"></a>一、纹理</h1><p>在计算机图形学中，纹理贴图是使用图像、函数或其他数据源来改变物体表面外观的技术</p><p>图像纹理中的像素通常被称为纹素（Texels），区别于屏幕上的像素</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/tex_PY1_WuJian_zj.png"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/NSZ_YuYi_Clothes.png" style="zoom: 80%;"> </p><h1 id="二、纹理映射或（贴图）"><a href="#二、纹理映射或（贴图）" class="headerlink" title="二、纹理映射或（贴图）"></a>二、纹理映射或（贴图）</h1><p>根据Kershaw的术语，通过将投影方程（projector function）运用于空间中的点 ，从而得到一组称为参数空间值（parameter-spacevalues）的关于纹理的数值。这个过程就称为贴图（Mapping，也称映射 ）,也就是纹理贴图（Texture Mapping，也称纹理映射 ）这个词的由来。</p><h1 id="三、纹理管线"><a href="#三、纹理管线" class="headerlink" title="三、纹理管线"></a>三、纹理管线</h1><p>纹理贴图可以用一个通用的纹理管线来进行描述</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/1.jpg"> </p><p>下面是对上图中描述的纹理管线的分步概述：</p><ul><li>第一步。通过将投影方程（projector function）运用于空间中的点 ，从而得到一组称为参数空间值（parameter-space values）的关于纹理的数值。</li><li>第二步。在使用这些新值访问纹理之前，可以使用一个或者多个映射函数（corresponder function）将参数空间值（parameter-space values ）转换到纹理空间。</li><li>第三步。使用这些纹理空间值（texture-space locations）从纹理中获取相应的值（obtain value）。例如，可以使用图像纹理的数组索引来检索像素值。</li><li>第四步。再使用值变换函数（value transform function）对检索结果进行值变换，最后使用得到的新值来改变表面属性，如材质或者着色法线等等。</li></ul><p>一个砖块的纹理映射流程：</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-ad23ce4ad86fc84a79a0a57e7ae8c5ba_r.jpg" alt="" style="zoom: 33%;"></h1><p>在具体的参考帧画面中找到物体空间中的位置(x,y,z)，如图中点（-2.3,7.1,88.2），然后对该位置运用投影函数。这个投影函数通常将向量(x,y,z)转换为一个二元向量(u,v)。在此示例中使用的投影函数是一个正交投影，类似一个投影仪，将具有光泽的砖墙图像投影到多边形表面上。再考虑砖墙这边，其实这个投影过程就是将砖墙平面上的点变换为值域为0到1之间的一对(u,v)值，如图，(0.32,0.29)就是这个我们通过投影函数得到的uv值。而我们图像的分辨率是256 x 256，所以，将256分别乘以(0.32,0.29)，去掉小数点，得到纹理坐标(81, 74)。通过这个纹理坐标，可以在纹理贴图上查找到坐标对应的颜色值，所以，我们接着找到砖块图像上像素位置为(81,74)处的点，得到颜色(0.9,0.8,0.7)。而由于原始砖墙的颜色太暗，因此可以使用一个值变换函数，给每个向量乘以1.1，就可以得到我们纹理管线过程的结果——颜色值(0.99,0.88,0.77)。</p><p>更多示例如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-48-16.png" alt="" style="zoom:50%;"> <p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-49-6.png" alt="" style="zoom:33%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-49-30.png" alt="" style="zoom: 25%;"> </p><h2 id="3-1-投影函数-The-Projector-Function"><a href="#3-1-投影函数-The-Projector-Function" class="headerlink" title="3.1 投影函数 The Projector Function"></a>3.1 投影函数 The Projector Function</h2><p>作为纹理管线的第一步，投影函数的功能就是将空间中的三维点转化为纹理坐标，也就是获取表面的位置并将其投影到参数空间中。</p><p>在常规情况下，投影函数通常在美术建模阶段使用，并将投影结果存储于顶点数据中。也就是说，在软件开发过程中，我们一般不会去用投影函数去计算得到投影结果，而是直接使用在美术建模过程中，已经存储在模型顶点数据中的投影结果。</p><p>下图中上面一行从左到右分别为球形、圆柱、平面，以及自然uv投影：下面一行所示为把不同的投影运用于同一个物体的情形。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-38-22.png" alt="" style="zoom:33%;"> <p>下图为 Maya 中的平面投影 <a href="https://help.autodesk.com/view/MAYAUL/2022/CHS/?guid=GUID-B6519472-C0ED-4C07-99C6-12107A3509D9">https://help.autodesk.com/view/MAYAUL/2022/CHS/?guid=GUID-B6519472-C0ED-4C07-99C6-12107A3509D9</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-39-43.png"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_15-5-5.png" alt="" style="zoom: 67%;"> </p><h2 id="3-2-映射函数-The-Corresponder-Function"><a href="#3-2-映射函数-The-Corresponder-Function" class="headerlink" title="3.2 映射函数 The Corresponder Function"></a>3.2 映射函数 The Corresponder Function</h2><p>映射函数（The Corresponder Function）的作用是将参数空间坐标（parameter-space coordinates）转换为纹理空间位置（texture space locations）。</p><p>我们知道图像会出现在物体表面的(u,v)位置上，且uv值的正常范围在[0,1)范围内。超出这个值域的纹理，其显示方式便可以由映射函数（The Corresponder Function）来决定。</p><p>在OpenGL中，这类映射函数称为“封装模式（Warapping Mode）”，在Direct3D中，这类函数叫做“寻址模式（Texture Addressing Mode）”。最常见的映射函数有以下几种：</p><ul><li>重复寻址模式，wrap (DirectX), repeat (OpenGL)。图像在表面上重复出现。</li><li>镜像寻址模式，mirror。图像在物体表面上不断重复，但每次重复时对图像进行镜像或者反转。</li><li>夹取寻址模式，clamp (DirectX) ,clamp to edge (OpenGL)。夹取纹理寻址模式将纹理坐标夹取在[0.0，1.0]之间，也就是说，在[0.0，1.0]之间就是把纹理复制一遍，然后对于[0.0，1.0]之外的内容，将边缘的内容沿着u轴和v轴进行延伸。</li><li>边框颜色寻址模式，border (DirectX) ,clamp to border (OpenGL)。边框颜色寻址模式就是在[0.0，1.0]之间绘制纹理，然后[0.0，1.0]之外的内容就用边框颜色填充。</li></ul><p>下图寻址模式，从左到右分别是重复寻址、镜像寻址、夹取寻址、边框颜色寻址</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_14-44-52.png"> </p><p>下图为Unity中的可用设置</p><p>![](C:\Users\Administrator\Desktop\纹理\纹理 - 乌拉拉 - 真有趣 docs_files\image2021-9-9_14-43-50.png) </p><h3 id="3-2-1-映射纹理过小引发的问题"><a href="#3-2-1-映射纹理过小引发的问题" class="headerlink" title="3.2.1 映射纹理过小引发的问题"></a>3.2.1 映射<strong>纹理过小引发的问题</strong></h3><p>纹理过小的问题相对容易理解，想想我们把一张100x100的纹理贴图应用在一500x500的屏幕之上必然会导致走样失真，因为屏幕空间中的许多个像素都映射到纹理上的同一个纹素上。</p><h4 id="3-2-1-1-纹理过滤（Texture-Filtering）"><a href="#3-2-1-1-纹理过滤（Texture-Filtering）" class="headerlink" title="3.2.1.1 纹理过滤（Texture Filtering）"></a>3.2.1.1 纹理过滤（Texture Filtering）</h4><p>纹理过滤的作用是将浮点型纹理坐标转换为整数的像素坐标，并对采样结果进行处理。</p><p>简单地说，由于我们用于显示纹理的图形与纹理图像存在大小、形状的区别，我们需要在采样过程中进行一定的处理来进行滤波，否则会显示为伪像，包括重叠、错位等。</p><h4 id="3-2-1-2-邻近过滤（Nearest-Neighbor-Filtering）"><a href="#3-2-1-2-邻近过滤（Nearest-Neighbor-Filtering）" class="headerlink" title="3.2.1.2 邻近过滤（Nearest Neighbor Filtering）"></a>3.2.1.2 邻近过滤（Nearest Neighbor Filtering）</h4><p>选择中心点最接近纹理坐标的那个像素，也是最简单的纹理过滤方式，只需要一次采样，效率最高，如图1所示，邻近过滤的计算方法为：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_15-42-1.png"> </p><h4 id="3-2-1-3-线性过滤，也称为双线性过滤（-Bi-linear-Filtering）"><a href="#3-2-1-3-线性过滤，也称为双线性过滤（-Bi-linear-Filtering）" class="headerlink" title="3.2.1.3 线性过滤，也称为双线性过滤（(Bi)linear Filtering）"></a>3.2.1.3 线性过滤，也称为双线性过滤（(Bi)linear Filtering）</h4><p>选择中心点周围的4个纹素加权计算出来，需要4次采样，如图2所示，线性过滤的计算方法如等式2，先从水平方向上根据距离 s 加权计算，再根据垂直方向 t 加权计算。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_15-46-33.png"> </p><p>两种滤波效果如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-3215f8d8526abfb1e5ccb813fe801e1d_r.jpg"> </p><h3 id="3-2-2-映射纹理过大引发的问题"><a href="#3-2-2-映射纹理过大引发的问题" class="headerlink" title="3.2.2 映射纹理过大引发的问题"></a>3.2.2 映射<strong>纹理过大引发的问题</strong></h3><p>若映射纹理远远大于屏幕像素，屏幕上的单个像素将被映射到许多纹素（texels）</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-6f82f715d0198b2415b5dc0d3265cd69_r.jpg" alt="" style="zoom:50%;">  <p>映射纹理过大，直接使用 <strong>Point sampled</strong> 采样表现如下图，近处锯齿！远处摩尔纹！非常严重的走样现象</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-2a6b2b72a8b13bdc9e978d2da218634d_r.jpg" alt="" style="zoom:50%;"> <h4 id="3-2-2-1-Mipmap"><a href="#3-2-2-1-Mipmap" class="headerlink" title="3.2.2.1 Mipmap"></a>3.2.2.1 Mipmap</h4><p>我们已经知道了在采样纹理时，纹理大小跟图形大小接近才会有好的显示效果，因此便有了Mipmap技术。Mipmap的原理是预先生成一系列以2为倍数缩小的纹理序列，在采样纹理时根据图形的大小自动选择相近等级的Mipmap进行采样。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_15-57-33.png" alt="" style="zoom:50%;"> <p>那么如何去确定使用哪个level的texture呢？利用屏幕像素的相邻像素点估算footprint大小再确定level D</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_15-59-48.png" alt="" style="zoom:67%;"> <p>在屏幕空间中取当前像素点的右方和上方的两个相邻像素点(4个全取也可以)，分别查询得到这3个点对应在Texture space的坐标，计算出当前像素点与右方像素点和上方像素点在Texture space的距离，二者取最大值，计算公式如图中所示，那么level D就是这个距离的log2值 (D = log2L) ! 这不难理解，读者可以具体取几个例子比如L = 1，L = 2，L = 4，看看是否符合这样的计算即可。</p><p>但是这里D值算出来是一个连续值，并不是一个整数，有两种对应的方法：</p><p>\1. 四舍五入取得最近的那个level D</p><p>\2. 利用D值在 向下和向上取整的两个不同level进行<strong>三线性过滤（Trilinear filtering）</strong> </p><h4 id="3-2-2-2-三线性过滤（Trilinear-filtering）"><a href="#3-2-2-2-三线性过滤（Trilinear-filtering）" class="headerlink" title="3.2.2.2 三线性过滤（Trilinear filtering）"></a>3.2.2.2 <strong>三线性过滤（Trilinear filtering）</strong></h4><p>所谓3线性插值，就是在向下取整的D level上进行一次双线性插值(前文提过)，再在D+1 level之上进行一次双线性插值，这二者数据再根据实际的连续D值在向下和向上取整的两个不同level之间的比例，再来一次线性插值，而这整体就是一个三线性插值了。</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-5-19.png" alt="" style="zoom:67%;"> <p>应用三线性过滤效果如下，虽然和一开始的 <strong>point sample</strong> 有了很大的进步，但是有一个严重的问题是，远处的地板产生一种过曝的现象，完全糊在了一起。该如何解决这个最后的问题呢？</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-7-20.png" style="zoom:50%;"> <h4 id="3-2-2-3-各向异性过滤（-Anisotropic-Filtering）"><a href="#3-2-2-3-各向异性过滤（-Anisotropic-Filtering）" class="headerlink" title="3.2.2.3 各向异性过滤（ Anisotropic Filtering）"></a>3.2.2.3 各向异性过滤（ Anisotropic Filtering）</h4><p>各向异性过滤就是纹理过滤的终极形态，它比三线性滤波效果更好，也更复杂。各向异性过滤，分别考虑uv两个方向的缩放，然后在多层纹理之间加权计算出最后结果。</p><p>三线性过滤将uv等价的考虑，最多只加权两层纹理，如下图：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1003f344d0ffc9d683b66167e45c0359_720w.jpg"> </p><p>各向异性过滤方式，需要估计纹理梯度，区分u方向和v方向：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-19-8.png"> </p><p>计算需要采样的层数：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-19-45.png"> </p><p>即最小的纹理层开始采样，采样N层，最后再取加权算出结果，它消耗的上限受maxAniso控制。</p><p>应用各向异性过滤后效果如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-21-1.png" alt=" " style="zoom: 33%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-15acc5a127110daeb710eea4f0ad4036_r.jpg" alt="" style="zoom: 50%;">  <p>对应Unity中的设置</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-23-59.png"> </p><h1 id="四、常见贴图类型"><a href="#四、常见贴图类型" class="headerlink" title="四、常见贴图类型"></a>四、常见贴图类型</h1><h3 id="4-1-凹凸贴图与其改进"><a href="#4-1-凹凸贴图与其改进" class="headerlink" title="4. 1 凹凸贴图与其改进"></a>4. 1 凹凸贴图与其改进</h3><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-5272853f8c2d3bd9a2f220f914ede96a_r.jpg"></p><h4 id="4-1-1-Bump-Mapping"><a href="#4-1-1-Bump-Mapping" class="headerlink" title="4.1.1 Bump Mapping"></a>4.1.1 Bump Mapping</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-abd63e5b5c7fd88fa04501f0e0a07aaa_r.jpg"></p><h4 id="4-1-2-Displacement-Map"><a href="#4-1-2-Displacement-Map" class="headerlink" title="4.1.2 Displacement Map"></a>4.1.2 Displacement Map</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-96b885b9a91bb426edaaeb22118546cd_r.jpg"></p><h4 id="4-1-3-Normal-Mapping"><a href="#4-1-3-Normal-Mapping" class="headerlink" title="4.1.3 Normal Mapping"></a>4.1.3 Normal Mapping</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-2c28cc15e8ec5a370eea13ae984f032d_r.jpg"></p><h4 id="4-1-4-视差贴图-Parallax-Mapping"><a href="#4-1-4-视差贴图-Parallax-Mapping" class="headerlink" title="4.1.4 视差贴图 Parallax Mapping"></a>4.1.4 视差贴图 Parallax Mapping</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1cd32708218ce6f9d13ee5b63057ae16_r.jpg"></p><h4 id="4-1-5-浮雕贴图-Relief-Mapping"><a href="#4-1-5-浮雕贴图-Relief-Mapping" class="headerlink" title="4.1.5 浮雕贴图 Relief Mapping"></a>4.1.5 浮雕贴图 Relief Mapping</h4><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-5d3578dbe0249a5dfc5a3fe85c772b43_r.jpg"> </p><h3 id="4-2-颜色贴图"><a href="#4-2-颜色贴图" class="headerlink" title="4.2 颜色贴图"></a>4.2 <strong>颜色贴图</strong></h3><h4 id="4-2-1-Diffuse-Map"><a href="#4-2-1-Diffuse-Map" class="headerlink" title="4.2.1 Diffuse Map"></a>4.2.1 Diffuse Map</h4><p><em><strong>*<img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-789fa5062b6a566576d2e3d6d04797f3_r.jpg">*</strong></em></p><h4 id="4-2-2-Albedo"><a href="#4-2-2-Albedo" class="headerlink" title="4.2.2 Albedo"></a>4.2.2 Albedo</h4><p>Unity的Shader（着色器）中，把颜色贴图叫做Albedo</p><h4 id="4-2-3-Base-Color"><a href="#4-2-3-Base-Color" class="headerlink" title="4.2.3 Base Color"></a>4.2.3 Base Color</h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-d3f464f2b1763a132cfd8101140167c6_720w.jpg"></strong></p><h5 id="4-2-4-Gradient-amp-Ramp、ColorLUT"><a href="#4-2-4-Gradient-amp-Ramp、ColorLUT" class="headerlink" title="4.2.4 Gradient&amp;Ramp、ColorLUT"></a>4.2.4 Gradient&amp;Ramp、ColorLUT</h5><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-e34af351c4c27444922f1be024ae9266_r.jpg" alt="" style="zoom:50%;"> <img src="https://pic2.zhimg.com/v2-4ec86be8d77d30ee2af57b09291dbd89_r.jpg" alt="" style="zoom: 35%;"></strong></p><h3 id="4-3-反射贴图"><a href="#4-3-反射贴图" class="headerlink" title="4.3 反射贴图"></a><strong>4.3</strong> <strong>反射贴图</strong></h3><h4 id="4-3-1-Metallic"><a href="#4-3-1-Metallic" class="headerlink" title="4.3.1 Metallic"></a><strong>4.3.1</strong> <strong>Metallic</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-9589bc81206bada3f7c7f6e64ef60d8f_720w.jpg"></strong></p><h4 id="4-3-2-Roughness"><a href="#4-3-2-Roughness" class="headerlink" title="4.3.2 Roughness"></a><strong>4.3.2</strong> <strong>Roughness</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1737b102ad88f07453b3dd1428aff31b_r.jpg"></strong></p><h4 id="4-3-3-Specular"><a href="#4-3-3-Specular" class="headerlink" title="4.3.3 Specular"></a><strong>4.3.3</strong> <strong>Specular</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-27bae95238b7c6341379df3bd9361aa7_720w.jpg"></strong></p><h4 id="4-3-4-Glossiness"><a href="#4-3-4-Glossiness" class="headerlink" title="4.3.4 Glossiness"></a><strong>4.3.4</strong> <strong>Glossiness</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1b1884be30e98b06e630968a639bfb54_r.jpg"></strong></p><h4 id="4-3-5-Anisotropic-Map"><a href="#4-3-5-Anisotropic-Map" class="headerlink" title="4.3.5 Anisotropic Map"></a><strong>4.3.5</strong> <strong>Anisotropic Map</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-b566da8a0290fbc4d0cbacde1cc924ae_r.jpg"></strong></p><h3 id="4-4-结构贴图"><a href="#4-4-结构贴图" class="headerlink" title="4.4 结构贴图"></a><strong>4.4 结构贴图</strong></h3><h4 id="4-4-1-Ambient-Occlusion（AO，环境光遮蔽贴图）"><a href="#4-4-1-Ambient-Occlusion（AO，环境光遮蔽贴图）" class="headerlink" title="4.4.1 Ambient Occlusion（AO，环境光遮蔽贴图）"></a><strong>4.4.1</strong> <strong>Ambient Occlusion（AO，环境光遮蔽贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-35237b0d005143b90ef2a3d377d9da5b_720w.jpg"></strong></p><h4 id="4-4-2-Cavity-Map（缝隙图）"><a href="#4-4-2-Cavity-Map（缝隙图）" class="headerlink" title="4.4.2 Cavity Map（缝隙图）"></a><strong>4.4.2 Cavity Map（缝隙图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-6cc52a339811855d597903ecffc6acfa_r.jpg"></strong></p><h4 id="4-4-3-Bent-Normal（环境法线贴图）"><a href="#4-4-3-Bent-Normal（环境法线贴图）" class="headerlink" title="4.4.3 Bent Normal（环境法线贴图）"></a>4.4.3 Bent Normal（环境法线贴图）</h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-3028543a883308309492717d43747057_720w.jpg"></strong></p><h4 id="4-4-4-Curvature（曲率贴图）"><a href="#4-4-4-Curvature（曲率贴图）" class="headerlink" title="4.4.4 Curvature（曲率贴图）"></a><strong>4.4.4</strong> <strong>Curvature（曲率贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-2f5a1cc1fbfd3bb977992c86e429f09e_r.jpg"></strong></p><h4 id="4-4-5-Thickness（厚度贴图）"><a href="#4-4-5-Thickness（厚度贴图）" class="headerlink" title="4.4.5 Thickness（厚度贴图）"></a><strong>4.4.5</strong> <strong>Thickness（厚度贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-3f404f5ef701c1cde8e689391d2b7850_r.jpg"></strong></p><h3 id="4-5-光照与环境贴图"><a href="#4-5-光照与环境贴图" class="headerlink" title="4.5 光照与环境贴图"></a><strong>4.5</strong> <strong>光照与环境贴图</strong></h3><h4 id="4-5-1-Light-Map"><a href="#4-5-1-Light-Map" class="headerlink" title="4.5.1 Light Map"></a><strong>4.5.1</strong> <strong>Light Map</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1156a778d011d8513fd2c7fea255888f_r.jpg"></strong></p><h4 id="4-5-2-Spherical-Environment-Map（球面环境贴图）"><a href="#4-5-2-Spherical-Environment-Map（球面环境贴图）" class="headerlink" title="4.5.2 Spherical Environment Map（球面环境贴图）"></a><strong>4.5.2 Spherical Environment Map（球面环境贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-36f45e31e0362b01c442578e645f7699_720w.jpg"></strong></p><h4 id="4-5-3-Cube-Map（立方体贴图）"><a href="#4-5-3-Cube-Map（立方体贴图）" class="headerlink" title="4.5.3 Cube Map（立方体贴图）"></a><strong>4.5.3 Cube Map（立方体贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-b5c6f96230a4a88a4a9fc04b9215d7a7_720w.jpg"></strong></p><h4 id="4-5-4-Radiosity-Normal-Map（辐射度法线贴图）"><a href="#4-5-4-Radiosity-Normal-Map（辐射度法线贴图）" class="headerlink" title="4.5.4 Radiosity Normal Map（辐射度法线贴图）"></a><strong>4.5.4 Radiosity Normal Map（辐射度法线贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1af7a46eab78f4234336fab3667bae0c_720w.jpg"></strong></p><h3 id="4-6-特殊用途贴图"><a href="#4-6-特殊用途贴图" class="headerlink" title="4.6 特殊用途贴图"></a><strong>4.6 特殊用途贴图</strong></h3><h4 id="4-6-1-ID-Mask-Map（ID、遮罩贴图）"><a href="#4-6-1-ID-Mask-Map（ID、遮罩贴图）" class="headerlink" title="4.6.1 ID Mask Map（ID、遮罩贴图）"></a><strong>4.6.1 ID Mask Map（ID、遮罩贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-1748a9305b8d7f2368cbfc22c751b0fe_720w.jpg"></strong></p><h4 id="4-6-2-Emissive-Map（自发光贴图）"><a href="#4-6-2-Emissive-Map（自发光贴图）" class="headerlink" title="4.6.2 Emissive Map（自发光贴图）"></a><strong>4.6.2 Emissive Map（自发光贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-0d545c1a8a9b89e050183feddf4272fb_720w.jpg"></strong></p><h4 id="4-6-3-Opacity（透明贴图）"><a href="#4-6-3-Opacity（透明贴图）" class="headerlink" title="4.6.3 Opacity（透明贴图）"></a><strong>4.6.3 Opacity（透明贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-dba031695b48e6a0a768eea7f4c28f2c_720w.jpg"></strong></p><h4 id="4-6-4-Position-Map（位置贴图）"><a href="#4-6-4-Position-Map（位置贴图）" class="headerlink" title="4.6.4 Position Map（位置贴图）"></a><strong>4.6.4 Position Map（位置贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-6999a8e6d314a9b6748e79affa77f75b_720w.jpg"></strong></p><h4 id="4-6-5-Detail（细节贴图）"><a href="#4-6-5-Detail（细节贴图）" class="headerlink" title="4.6.5 Detail（细节贴图）"></a><strong>4.6.5 Detail（细节贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-c123846f1ea40c3087d8d412e6dfe004_720w.jpg" alt="" style="zoom:50%;"><img src="https://pic4.zhimg.com/80/v2-17e48fd7a6e33521bf1b8b06f47df9b7_720w.jpg" alt="" style="zoom: 67%;"></strong></p><h4 id="4-6-6-Flow-Map（流动贴图）"><a href="#4-6-6-Flow-Map（流动贴图）" class="headerlink" title="4.6.6 Flow Map（流动贴图）"></a><strong>4.6.6 Flow Map（流动贴图）</strong></h4><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2021-9-9_16-59-59.png" alt="" style="zoom:67%;"> <h4 id="4-6-7-DuDv-Map-（扭曲贴图）"><a href="#4-6-7-DuDv-Map-（扭曲贴图）" class="headerlink" title="4.6.7 DuDv Map （扭曲贴图）"></a><strong>4.6.7</strong> <strong>DuDv Map （扭曲贴图）</strong></h4><p><strong><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-22f9f4fbecc9ea008dadfdf749f26e46_720w.jpg" alt="" style="zoom: 67%;"><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/v2-b05650700471bce622b142b0dfd2b5a9_720w.jpg" alt="" style="zoom: 67%;"></strong></p><h4 id="4-6-8-Unordered-Access-view-UAV-textures"><a href="#4-6-8-Unordered-Access-view-UAV-textures" class="headerlink" title="4.6.8 Unordered Access view (UAV textures )"></a>4.6.8 Unordered Access view (UAV textures )</h4><p>支持无序访问的贴图，详细解释如下：</p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/graphics-concepts/shader-resource-view--srv-">https://docs.microsoft.com/en-us/windows/uwp/graphics-concepts/shader-resource-view--srv-</a></p><h1 id="五、纹理压缩"><a href="#五、纹理压缩" class="headerlink" title="五、纹理压缩"></a>五、纹理压缩</h1><h3 id="为什么我们需要纹理压缩格式？"><a href="#为什么我们需要纹理压缩格式？" class="headerlink" title="为什么我们需要纹理压缩格式？"></a>为什么我们需要纹理压缩格式？</h3><p>例如R5G6B5，A4R4G4B4，A1R5G5B5，R8G8B8，A8R8G8B8等未经压缩的图片格式，是能够被GPU直接读取的原生纹理格式。但在低端硬件设备或者说移动平台下，有两个问题需要解决。</p><ul><li><strong>内存：</strong>例如 A8R8G8B8 格式一个像素占 4 字节，如果是 512x512 分辨率内存就占用 512x512x4 b=1048576 b=1 M，一般手游占用内存大概 300M，峰值也不该超过 600M，这种内存消耗在低端设备上根本无法接受。</li><li><strong>数据传输的带宽：</strong>带宽是发热的元凶，在渲染3D场景时，会有大量的贴图被传输到GPU，不经限制的话总线带宽很快就会成为瓶颈，手机秒变暖手宝，严重的还会影响渲染性能。</li></ul><p>因此我们需要一种内存占用既小又能被 GPU 读取的格式——压缩纹理格式。纹理压缩对应的算法是以某种形式的固定速率有损向量量化 (lossy vector quantization ) 将固定大小的像素块编码进固定大小的字节块中。</p><ul><li><strong>固定速率</strong>：因为GPU需要能够高效的随机访问一个像素，这意味着对任意像素，解码速度不该有太大的变化。因此，我们常见的贴图压缩算法都是有损压缩。相反的例如 zip 则是一种可变速率压缩。</li><li>**向量量化(Vector quantization, VQ)**：一种量化技术，将一组大量的点(向量)分成具有近似相同数量的最接近它们的点的组。每个组用它的质心点表示，因此存在数据误差，适用于有损压缩。放到纹理压缩中来理解，就是例如将4x4块像素的颜色以2个基色来表示。</li><li><strong>压缩比</strong>：通常以比特率或每像素的平均比特数 (bits per pixel, bpp) 表示，常见的为 2~8bpp。一般 RGB 原生纹理的像素指 24 位，4bpp 表示每像素占4位，所以也可以认为 4bpp 表示压缩比为6:1。</li></ul><h3 id="为什么我们不使用-png、jpg-这类常见的压缩格式？"><a href="#为什么我们不使用-png、jpg-这类常见的压缩格式？" class="headerlink" title="为什么我们不使用 png、jpg 这类常见的压缩格式？"></a>为什么我们不使用 png、jpg 这类常见的压缩格式？</h3><p>尽管像 jpg、png 的压缩率很高，但并不适合纹理，主要问题是<strong>不支持像素的随机访问</strong>，这对 GPU 相当不友好，GPU 渲染时只使用需要的纹理部分，我们总不可能为了访问某个像素去解码整张纹理吧？不知道顺序，也不确定相邻的三角形是否在纹理上采样也相邻，很难有优化。这类格式更适合下载传输以及减少磁盘空间而使用。</p><p><strong>Unity支持的所有压缩格式及推荐</strong></p><p><a href="https://docs.unity3d.com/cn/2018.4/Manual/class-TextureImporterOverride.html">https://docs.unity3d.com/cn/2018.4/Manual/class-TextureImporterOverride.html</a></p><h3 id="常见纹理压缩格式"><a href="#常见纹理压缩格式" class="headerlink" title="常见纹理压缩格式"></a>常见纹理压缩格式</h3><h3 id="ETC"><a href="#ETC" class="headerlink" title="ETC"></a>ETC</h3><p>ETC（Ericsson Texture Compression）<strong>最初为移动设备开发，如今它是安卓的标准压缩方案</strong>，ETC1在OpenGL和OpenGL ES中都有支持。</p><p>其原理简单来说，是将4x4 的像素块编码为2x4或4x2像素的两个块的方法，每个块指定一个基色，每个像素的颜色通过一个编码为相对于这些基色偏移的灰度值确定。</p><p>具体来说，ETC1每4x4像素块编码为64位的字节数据，每一个像素块又分为两个2x4子块（由一个“flip”位控制水平或竖直划分），每个子块包含一个3位的修饰表索引（modifier table index）和一个基本颜色值，这两个颜色值要么是2*R4G4B4要么是R5G5B5+R3G3B3（由一个“ diff”位控制是哪一种）。</p><p>3位的修饰表索引对应于8种修饰值：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-38-28.png"> </p><p>这样一个子块由1个基本颜色值和4个修饰值可以确定出4种新的颜色值：<br><code>color0 = base_color + RGB(modifier0, modifier0, modifier0)</code></p><pre class="line-numbers language-none"><code class="language-none">color1 = base_color + RGB(modifier1, modifier1, modifier1)color2 = base_color + RGB(modifier2, modifier2, modifier2)color3 = base_color + RGB(modifier3, modifier3, modifier3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最终的颜色就是从这4个颜色值中选出。其原理就是另外32位数据中包含16个2位选择器数据，每个像素的颜色都根据2位选择器的值从这4种中选出。</p><p>ETC1编码方式直观图如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-38-55.png"> </p><p>Unity几种ETC纹理压缩格式：</p><p>RGB ETC1 4 bit ：4 bits/pixel，对RGB压缩比6:1，不支持Alpha，绝大部分安卓设备都支持。</p><p>RGB ETC2 4 bit ：4 bits/pixel，对RGB压缩比6:1。不支持Alpha，ETC2兼容ETC1，压缩质量可能更高，但对于色度变化大的块误差也更大，需要在OpenGL ES 3.0和OpenGL 4.3以上版本。</p><p>RGBA ETC2 8bit ：8 bits/pixel，对RGBA压缩比4:1。支持完全的透明通道，版本要求同上。</p><p>RGB +1bit Alpha ETC2 4bit ：4 bits/pixel。支持1bit的Alpha通道，也就是只支持镂空图，图片只有透明和不透明部分，没有中间的透明度。</p><p>EAC：核心原理与ETC相同，但它只用于单通道或双通道数据，OpenGL ES 3.0和OpenGL 4.3后的设备大部分支持，但由于安卓平台五花八门的兼容性，一般不建议用单双通道贴图。</p><h3 id="DXT"><a href="#DXT" class="headerlink" title="DXT"></a>DXT</h3><p>原名S3TC（S3 Texture Compression ），由S3 Graphics开发的一种与组块有关的有损压缩算法，也叫DXTn或DXTC（DirectX Texture），是块截断编码（Block Truncation Coding）的一种改进。<strong>由于版权专利一般用于Window平台。</strong></p><p>其原理简单来说，是由一对低精度的“基色”来描述一个4x4的RGB像素块，并允许每个像素在这些基色之间指定一个插值。S3TC有多种变体，每种都是为特定类型的图像数据设计，但它们都是将4x4的像素块转换为64位或128位的数据。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-40-30.png"> </p><p>BC1（Block Compression）是最小的一种变体，也是转换比最高的一种，在不需要高精度也不需要a值时可以使用。它将4x4个像素作为一个块（block）存储64位数据，其中包括两个16位RGB值（R5G6B5，人眼对绿色更敏感）$color_0$和$color_1$，和16个2位选择器值，一个像素最终的颜色值由$color_0$、$color_1$和对应的2位选择器值决定。混合公式如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-41-5.png"> </p><p>它的工作方式直观图如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-41-31.png"> </p><p>BC2在BC1的基础上支持了a值。它将4x4共16个像素存储为128位数据，其中包括64位a通道（每像素4位）和64位颜色通道，颜色和DXT1一致，即两个16位RGB值和16个2位索引表x。它的透明度只有4位共16种数值，相比DXT5有些辣鸡基本没人用。DXT2和DXT3的差别在于是否是预乘过的颜色。</p><p>BC3在BC2的基础上改进了a值算法。BC3将4x4共16个像素存储为128位数据，其中包括64位a通道（两个8位a值和一个4x4的3位索引表）和64位颜色通道，颜色和DXT1一样，即两个16位RGB值和16个2位索引表x。由于a值采用了和颜色一样类似的块压缩算法，所以数值范围更广，BC是比较常见的。</p><p>BC4和BC5在D3D10中可用，只能存储一个/两个颜色通道。</p><p>BC6H和BC7在D3D11中可用。BC6H是一个不带a值的HDR格式，它将4x4共16个像素存储为128位数据，其中包括两个48位的RGB值（16:16:16），每个颜色分量都是带符号浮点值（1 个符号位 + 5 个指数位 + 10 个尾数位），以及16个2位索引表。</p><p>BC7相比其它有点特殊，虽然它也是将4x4共16个像素存储为128位数据，但它的最低有效位为mode位，（最低有效位即最低的非0位）根据不同模式，颜色值的存储格式不同，是否有a值或a值的存储格式也不尽相同，是一种比较灵活的存储格式，但这也意味着解码所带来更多的消耗。</p><h3 id="PVRTC"><a href="#PVRTC" class="headerlink" title="PVRTC"></a>PVRTC</h3><p>PVRTC (PowerVR Texture Compression)由Imagination公司专为PowerVR显卡核心设计，<strong>由于专利原因一般它只被用于苹果的设备，仅Iphone、Ipad和部分PowerVR的安卓机支持</strong>。这可能是这几种压缩格式中最不公开的技术。</p><p>PVRTC不同于DXT和ETC这类基于块的算法，而将整张纹理分为了高频信号和低频信号，低频信号由两张低分辨率的图像A和B表示，这两张图在两个维度上都缩小了4倍，高频信号则是全分辨率但低精度的调制图像M，M记录了每个像素混合的权重。要解码时，A和B图像经过双线性插值（bilinearly）宽高放大4倍，然后与M图上的权重进行混合。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-44-3.png"> </p><p>PVRTC 4-bpp模式下，每4x4像素占一个64位数据块，2-bpp模式下每8x4像素会有一个64位数据块。两者大同小异，我们仅说4-bpp模式。</p><p>4-bpp模式下，A和B图缩小后都只保存一个颜色值，如下图所示，A图比B图少1位，但两张图都可以选择以RGB或ARGB的方式存储（最高位决定为哪种），A色可以用RGB554或ARGB3443格式编码，B色可以用RGB555或ARGB3444格式编码。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-44-26.png"> </p><p>在解码时，为了解码任意像素，必须读取4个相邻的PVRTC块，使用这4个块来解码一个5x5块。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-44-41.png"> </p><p>使用双线性过滤来对A和B图进行扩大，然后A和B图根据M图与“Mode”位进行混合，这里的”Mode”位为1时，M图中10值像素被看作是开启了”punch-through alpha”，alpha通道会被强制清零，这种神奇的操作是为了兼容旧应用程序，具体就不说了。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-45-1.png"> </p><p>单从4bpp模式来看，PVRTC和BC、ETC非常相似，都有两个颜色值，但基本思想却是不同的。</p><p>Unity几种PVRTC的纹理压缩格式：</p><p><strong>苹果的所有移动设备都支持PVRTC。</strong></p><p><strong>PVRTC2质量比PVRTC更高，而且支持NPOT（非2次幂纹理），是PVRTC的升级版。</strong></p><p>PVRTC和PVRTC2都支持4-bpp和2-bpp的ARGB格式。</p><p>RGB PVRTC 4 bit ：4 bits/pixel，对RGB压缩比6:1，安卓设备需要PowerVR Series 5以上。</p><p>RGBA PVRTC 4 bit ：4 bits/pixel，对RGBA压缩比8:1，3位Alpha值，设备同上。</p><p>RGB PVRTC 2 bit ：2 bits/pixel，对RGB压缩比6:1，安卓和IOS设备需要PowerVR Series 5X以上。</p><p>RGBA PVRTC 2 bit ：2 bits/pixel，对RGBA压缩比8:1，3位Alpha值，设备同上。</p><h3 id="ASTC"><a href="#ASTC" class="headerlink" title="ASTC"></a>ASTC</h3><p>ASTC（Adaptive Scalable Texture Compression），由ARM和AMD联合开发，2012年发布，是较新的一种压缩格式，唯一一个不受专利权影响的压缩格式。ASTC在压缩率、图像质量、种类上都挺不错的，也正在逐步代替前三种，最大的缺点可能就是兼容性还不够完善和解码时间较长，但以现在移动端的发展趋势来看，GPU计算能力越来越难成为瓶颈，因此非常有希望在以后能成为统一的压缩格式。</p><p>ASTC也是一种基于块的有损压缩算法，它很像BC7，不同的是块中像素数量可变，它的特点有很多：<br>- 较高的灵活性：支持1-4分量的贴图；</p><p>- 压缩率/质量灵活可变：根据不同图片会选择不同压缩率级别的算法；</p><p>- 支持2d/3d贴图；</p><p>- 跨平台：IOS、安卓、PC都；</p><p>- 同时支持LDR和HDR：BC6H虽然支持HDR但不支持Alpha通道；</p><p>ASTC格式的块为固定大小的128位。2D纹理编码中，他从4x4到12x12像素都有，对应的压缩比从3:1到27:1。所有支持的块和比特率如下：</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-46-33.png"> </p><p>Increment列表示压缩比的增量，这也表示ASTC的比特率可以在小数级变化，这种技术称为BISE(Bounded Integer Sequence Encoding)。</p><p>但要注意的是尽管纹理可以被编码为1-4通道图像，但是解码后的值总是以RGBA格式输出。在LDR sRGB模式下，颜色值以8位整数的形式返回，而如果是HDR则将以16位浮点数的形式返回。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以2020年市场上的移动设备支持来看</p><ul><li>安卓：用ETC2没有什么问题；至于ASTC在Android 5.0/OpenGL ES 3.1后支持，市场大部分机型都支持（98.5%），可以考虑选择，但毕竟是安卓，要做好处理兼容性的心里准备。</li><li>IOS：在iPhone6以上（包含）都支持ASTC，6以下可以选择PVRTC2。</li></ul><p>最后，所有压缩格式的简要描述如下，灰色框表示已经过时了或基本不用了。</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image2020-11-26_9-48-33.png"> </p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><p>游戏资源常见贴图类型 <a href="https://zhuanlan.zhihu.com/p/260973533">https://zhuanlan.zhihu.com/p/260973533</a></p><p>计算机图形学七：纹理映射(Texture Mapping)及Mipmap技术 <a href="https://zhuanlan.zhihu.com/p/144332091">https://zhuanlan.zhihu.com/p/144332091</a></p><p>【《Real-Time Rendering 3rd》 提炼总结】(五) 第六章 · 纹理贴图及相关技术 <a href="https://zhuanlan.zhihu.com/p/27551369">https://zhuanlan.zhihu.com/p/27551369</a></p><p>纹理过滤漫谈 <a href="https://zhuanlan.zhihu.com/p/137242786">https://zhuanlan.zhihu.com/p/137242786</a></p><p>图形学底层探秘 - 纹理采样、环绕、过滤与Mipmap的那些事 <a href="https://zhuanlan.zhihu.com/p/143377682">https://zhuanlan.zhihu.com/p/143377682</a></p><p>Texture Import Settings <a href="https://docs.unity3d.com/Manual/class-TextureImporter.html"> https://docs.unity3d.com/Manual/class-TextureImporter.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资产 </tag>
            
            <tag> 纹理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ET 环境配置</title>
      <link href="/BloodSoul.github.io/2021/09/08/gamedevelop/gameengine/unity/xiang-mu-kuang-jia/et-huan-jing-pei-zhi/"/>
      <url>/BloodSoul.github.io/2021/09/08/gamedevelop/gameengine/unity/xiang-mu-kuang-jia/et-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、克隆-ET-工程"><a href="#一、克隆-ET-工程" class="headerlink" title="一、克隆 ET 工程"></a>一、克隆 ET 工程</h1><p>目前ET6暂时还没有支持 ILRuntime 热更</p><p>网站链接：<a href="https://github.com/egametang/ET">https://github.com/egametang/ET</a></p><p>克隆地址：<a href="https://github.com/egametang/ET.git">https://github.com/egametang/ET.git</a></p><p>网友添加的 ILRuntime 热更地址：</p><p>最大限度的保持了原有结构： <a href="https://github.com/mister91jiao/ET_ILRuntime/">https://github.com/mister91jiao/ET_ILRuntime/</a></p><p>同时添加了 FGUI，xAsset 流程：<a href="https://github.com/wqaetly/ET">https://github.com/wqaetly/ET</a></p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908225504785.png" alt="image-20210908225504785"></p><h1 id="二、安装-Unity"><a href="#二、安装-Unity" class="headerlink" title="二、安装 Unity"></a>二、安装 Unity</h1><p>需要至少安装 Unity2020版本，推荐 Unity2020 的 LTS 版本</p><p>链接：<a href="https://unity.cn/releases">https://unity.cn/releases</a></p><p>安装时添加 IL2CPP 模块</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908225725496.png" alt="image-20210908225725496"> </p><h1 id="三、安装-MongoDB"><a href="#三、安装-MongoDB" class="headerlink" title="三、安装 MongoDB"></a>三、安装 MongoDB</h1><p>MongoDB 下载地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p>可视化GUI MongoDB Compass 下载地址：<a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a></p><h3 id="MongoDB-环境配置"><a href="#MongoDB-环境配置" class="headerlink" title="MongoDB 环境配置"></a>MongoDB 环境配置</h3><p>安装时一定要选择Custom，否则不会生成后续初始化需要的 bin 目录</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908230450099.png" alt="image-20210908230450099" style="zoom:67%;"> <p>在安装目录的 bin 目录下，shift + 右键 在此处打开 Powershell，输入如下指令，其中 -dbpath 后面的路径是你的 mongoDB 安装下的data路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mongod -dbpath D:<span class="token punctuation">\</span>MongoDB<span class="token punctuation">\</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果结果显示如下：</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908231131039.png" alt="image-20210908231131039" style="zoom: 67%;"> <p>在浏览器中输入  <a href="http://localhost:27017/">http://localhost:27017/</a> 显示如下表示成功</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908231237238.png" alt="image-20210908231237238"> </p><p>运行 MongoDB Compass 如下</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908231404085.png" alt="image-20210908231404085" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908231441781.png" alt="image-20210908231441781" style="zoom:67%;"> <p>点击 Connect，显示如下表示连接成功</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210908231539087.png" alt="image-20210908231539087" style="zoom: 50%;">  <h1 id="四、配置服务端"><a href="#四、配置服务端" class="headerlink" title="四、配置服务端"></a>四、配置服务端</h1><p>在 .net 官网下载并安装 .NET 5.0 SDK 和 .NET Core 3.1 SDK  地址链接：<a href="https://dotnet.microsoft.com/download">https://dotnet.microsoft.com/download</a></p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912225618591.png" alt="image-20210912225618591" style="zoom:67%;"> <p>.NET Core3.1 要求 VS 版本在 2019 16.11.2 及以上 </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912225815516.png" alt="image-20210912225815516" style="zoom: 80%;"> <p>建议如下库全部安装</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230044375.png" alt="image-20210912230044375" style="zoom:67%;"> <p>安装完成后一定要重启电脑，重启电脑是为了让 .NET Core3.1 和  .NET 5.0 生效</p><p>在 Unity 中右键 Open in C# project 打开客户端，然后生成解决方案</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230426700.png" alt="image-20210912230426700" style="zoom:67%;"> <p>在 ET 工程中 打开 Server 端工程，然后执行同样的方式进行编译</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230602442.png" alt="image-20210912230602442" style="zoom:67%;"> <p>确保全部生成成功</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230706019.png" alt="image-20210912230706019" style="zoom:67%;"> <h1 id="五、启动测试"><a href="#五、启动测试" class="headerlink" title="五、启动测试"></a>五、启动测试</h1><p>运行 Server.App</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912225345493.png" alt="image-20210912225345493"> </p><p>运行 init 场景</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912225146556.png" alt="image-20210912225146556" style="zoom:80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230815664.png" alt="image-20210912230815664" style="zoom: 80%;"> <p>小人自动行走，日志有输出即表示成功</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230846891.png" alt="image-20210912230846891" style="zoom:67%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912230943197.png" alt="image-20210912230943197" style="zoom:67%;"> <h1 id="六-网友添加的-ILRuntime-版本启动流程"><a href="#六-网友添加的-ILRuntime-版本启动流程" class="headerlink" title="六 网友添加的 ILRuntime 版本启动流程"></a>六 网友添加的 ILRuntime 版本启动流程</h1><p>仓库地址：<a href="https://github.com/wqaetly/ET">https://github.com/wqaetly/ET</a></p><p>按造第四项配置服务端的流程，先编译客户端代码，在编译服务端代码</p><h5 id="6-1-生成-AB-资源"><a href="#6-1-生成-AB-资源" class="headerlink" title="6.1 生成 AB 资源"></a>6.1 生成 AB 资源</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912232458762.png" alt="image-20210912232458762" style="zoom:67%;"> <h5 id="6-2-生成-CLR"><a href="#6-2-生成-CLR" class="headerlink" title="6.2 生成 CLR"></a>6.2 生成 CLR</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912232633695.png" alt="image-20210912232633695" style="zoom:67%;"> <h5 id="6-3-启动资源服务器"><a href="#6-3-启动资源服务器" class="headerlink" title="6.3 启动资源服务器"></a>6.3 启动资源服务器</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912232741501.png" alt="image-20210912232741501" style="zoom:67%;"> <p>显示如下代表启动成功</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912232812885.png" alt="image-20210912232812885"> </p><h5 id="6-4-启动服务器"><a href="#6-4-启动服务器" class="headerlink" title="6.4 启动服务器"></a>6.4 启动服务器</h5><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233024927.png" alt="image-20210912233024927" style="zoom:67%;"> <p>也可以在 Tools -&gt; 打开服务器选项-&gt;启动服务器</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233123773.png" alt="image-20210912233123773" style="zoom: 80%;"> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233151531.png" alt="image-20210912233151531" style="zoom:67%;"> <p>6.5 启动客户端</p><p>运行 Init 场景，显示账号登录界面，且控制台没有报错表示成功链接资源服务器成功</p><p>点击登录-&gt;匹配模式，进入到小人界面，且没有报错，表示服务器连接成功</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233316034.png" alt="image-20210912233316034" style="zoom:67%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233420983.png" alt="image-20210912233420983" style="zoom:80%;">  <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210912233731118.png" alt="image-20210912233731118" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青青草原——草的俯视矫正、大小渐变</title>
      <link href="/BloodSoul.github.io/2021/08/28/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-cao-de-fu-shi-jiao-zheng-da-xiao-jian-bian/"/>
      <url>/BloodSoul.github.io/2021/08/28/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-cao-de-fu-shi-jiao-zheng-da-xiao-jian-bian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、草的俯视大小矫正"><a href="#一、草的俯视大小矫正" class="headerlink" title="一、草的俯视大小矫正"></a>一、草的俯视大小矫正</h1><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>step1：通过观察方向和竖直向上方向的叉乘（叉乘顺序不能变，Unity是右手坐标系，叉乘需要用左手），可以计算出上下左右各个区域的草，具体如下：</p><ol><li>叉乘结果的X，代表从前向后，也就是从Z轴负方向到Z轴正方向,中间为零</li><li>叉乘结果的Z，代表从右到左，也就是从X轴正方向到X轴负方向。一般使用是取反，以便与X轴对齐，即从X轴负方向到X轴正方向</li><li>通过结合计算的结果X,Z，便得出的从垂直向上的点到四周渐变的Mask值</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E5%8F%89%E4%B9%98%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA.png" style="zoom:50%;"> </li></ol><p>step2：通过观察方向和竖直向上的点乘值，来作为俯视矫正的角度偏移值</p><p>step3：将计算的过的俯视矫正大小值，加入到顶点位置中</p><p>伪代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half3 perspectiveMask = cross(ViewDir,(0,1,0));half3 perspectiveAngleMask = dot(viewDir,(0,1,0));half3 finalMask = half3(-perspectiveMask.z,0,perspectiveMask.x) * perspectiveAngleMask;half3 positionOS = positionOS + finalMask * perspectiveInstensity;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、大小渐变"><a href="#二、大小渐变" class="headerlink" title="二、大小渐变"></a>二、大小渐变</h4>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 场景 </tag>
            
            <tag> 草 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青青草原——草的颜色渐变、AO模拟、简易透光</title>
      <link href="/BloodSoul.github.io/2021/08/09/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-cao-de-yan-se-jian-bian-ao-mo-ni-jian-yi-tou-guang/"/>
      <url>/BloodSoul.github.io/2021/08/09/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-cao-de-yan-se-jian-bian-ao-mo-ni-jian-yi-tou-guang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、草的颜色渐变"><a href="#一、草的颜色渐变" class="headerlink" title="一、草的颜色渐变"></a>一、草的颜色渐变</h1><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>step1：定义两个渐变色</p><p>step2：定义渐变因子</p><p>step3：将渐变后的颜色与主颜色进行混合</p><p>伪代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half4 gradientColor1;half4 gradientColor2;half gradientTerm;half4 finalGradientColor = lerp(gradientColor1,gradientColor2,gradientTerm);half3 finalColor = finalGradientColor.rgb * albedoColor.rgb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="扩展方式"><a href="#扩展方式" class="headerlink" title="扩展方式"></a>扩展方式</h4><p>可以使用 noise 贴图或者程序 noise 计算，并把这个值加入的渐变色的混合因子中，来实现颜色的随机变换</p><h1 id="二、AO模拟"><a href="#二、AO模拟" class="headerlink" title="二、AO模拟"></a>二、AO模拟</h1><h4 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h4><p>step1：定义一个AO的颜色</p><p>step2：AO的Mask计算可以用如下方式：</p><ul><li>方式一：使用UV的V</li><li>方式二：使用法线和竖直向上及（0,1,0）的点乘值</li><li>方式三：使用第四套UV，并通过绘制贴图的 R 通道进行控制，也是本案例中采用方式</li></ul><p>step3：将AO的颜色与主颜色进行混合</p><p>伪代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half4 AOColor;half AOMask = tex2D(_AOMaskTex,uv4);half4 finalAoColor = lerp(AOColor,half4(1,1,1,1),AOMask);half3 finalColor = finalAoColor.rgb * albedoColor.rgb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、透光实现"><a href="#三、透光实现" class="headerlink" title="三、透光实现"></a>三、透光实现</h3><h4 id="实现方式-2"><a href="#实现方式-2" class="headerlink" title="实现方式"></a>实现方式</h4><p>step1：定义一个透光颜色</p><p>step2：观察方向的Mask计算：观察方向和主光源相反的方向越一致，透光的效果就越强烈，通过点乘计算，并将值重新映射到0,1</p><p>step3：贴图mask：使用第四套UV，并通过绘制贴图的 G 通道进行控制</p><p>step4：将透光的颜色与主贴图颜色进行 <strong>叠加</strong></p><p>伪代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half4 subsurfaceColor;half viewMask = dot(viewDir,-lightDir);viewMask = viewMask * 0.5 + 0.5;half texMask = tex2D(_AOMaskTex,uv4);half4 finalSubsurfaceColor = subsurfaceColor * viewMask * texMask;half3 finalColor = finalSubsurfaceColor.rgb + albedoColor.rgb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 场景 </tag>
            
            <tag> 草 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青青草原——弯曲、震动、旋转</title>
      <link href="/BloodSoul.github.io/2021/08/08/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-wan-qu-zhen-dong-xuan-zhuan/"/>
      <url>/BloodSoul.github.io/2021/08/08/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-wan-qu-zhen-dong-xuan-zhuan/</url>
      
        <content type="html"><![CDATA[<h1 id="一、模型预处理处理"><a href="#一、模型预处理处理" class="headerlink" title="一、模型预处理处理"></a>一、模型预处理处理</h1><h4 id="为什么需要对模型进行预处理？"><a href="#为什么需要对模型进行预处理？" class="headerlink" title="为什么需要对模型进行预处理？"></a>为什么需要对模型进行预处理？</h4><p>草地渲染的主要困难点在于数量庞大，经常以万为单位，因为本人知识有限，暂时只能想到如下几点优化方式：</p><ol><li>对草进行场景划分管理，例如四叉树或八叉树，然后进行视锥体裁剪剔除，还可以利用 Compute Shader，Jobs 等进行加速处理</li><li>将部分草进行模型合并，大约在一万面左右，做成不同形状的预制体，然后进行摆放（<strong>本次学习使用该方案</strong>）</li><li>针对合并的草模型，可以使用LOD技术，优化性能</li></ol><h4 id="合并草模型"><a href="#合并草模型" class="headerlink" title="合并草模型"></a>合并草模型</h4><p>在 3ds Max 中对草进行模型合并，也可以使用 Unity 的其他插件（如：Mesh Baker）直接在Unity中合并</p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E8%8D%89%E5%90%88%E5%B9%B6.png" alt="草合并" style="zoom:50%;"> <h4 id="烘焙模型锚点"><a href="#烘焙模型锚点" class="headerlink" title="烘焙模型锚点"></a>烘焙模型锚点</h4><ul><li>为了能够更精细的控制每颗草的弯曲，我们可以将原本草的锚点位置坐标烘焙在模型的第四套UV通道中。</li><li>思路为：因为模型是合并的，每个草之间并不是连续的，都是独立的个体，所以模型面数之间必定存在断层，不连续的地方，由此入手，进行查找区分。</li><li>实现方式为从任意个面开始，向外扩散，直到出现不连续停止，被选中的面作为一个Element，然后进行该Element的顶点坐标相加去平均值。</li></ul><h6 id="伪代码如下"><a href="#伪代码如下" class="headerlink" title="伪代码如下"></a>伪代码如下</h6><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">// 计算元素var grassElements = new List&lt;int&gt;(vertexCount);for (int i = 0; i &lt; trianglesCount; i += 3){    var index1 = triangles[i + 0];    var index2 = triangles[i + 1];    var index3 = triangles[i + 2];    int element = 0;    if (grassElements[index1] != -1)    {        element = grassElements[index1];    }    else if (grassElements[index2] != -1)    {        element = grassElements[index2];    }    else if (grassElements[index3] != -1)    {        element = grassElements[index3];    }    else    {        element = elementCount;        elementCount++;    }    grassElements[index1] = element;    grassElements[index2] = element;    grassElements[index3] = element;}// 设置锚点for (int e = 0; e &lt; elementCount; e++){    var positions = new List&lt;Vector3&gt;();    for (int i = 0; i &lt; grassElements.Count; i++)    {        if (grassElements[i] == e)        {            positions.Add(vertices[i]);        }    }    float x = 0;    float z = 0;    for (int p = 0; p &lt; positions.Count; p++)    {        x = x + positions[p].x;        z = z + positions[p].z;    }    for (int i = 0; i &lt; grassElements.Count; i++)    {        if (grassElements[i] == e)        {            anchors[i] = new Vector4(x / positions.Count,0, z / positions.Count,0);        }    }    mesh.SetUVs(3, anchors);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用顶点色"><a href="#使用顶点色" class="headerlink" title="使用顶点色"></a>使用顶点色</h4><ul><li>R通道：使用顶点色R通道控制运动的 Offset，这样可以使用顶点刷工具，来打破运动的规律性</li><li>G通道：使用G通道来控制弯曲程度</li><li>B通道：使用B通道来控制旋转程度</li><li>A通道：使用A通道来控制震动程度</li></ul><h1 id="二、XZ轴弯曲、Y轴旋转"><a href="#二、XZ轴弯曲、Y轴旋转" class="headerlink" title="二、XZ轴弯曲、Y轴旋转"></a>二、XZ轴弯曲、Y轴旋转</h1><h4 id="计算绕轴旋转"><a href="#计算绕轴旋转" class="headerlink" title="计算绕轴旋转"></a>计算绕轴旋转</h4><p>假设给定草的顶点坐标为Pos，旋转的角度为Angle，旋转后的坐标为ResultPos</p><p>绕着X轴计算方式为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half3 rotationAxis = half3(Pos.x,0,0);half3 otherAxis = half3(0,Pos.yz);ResultPos = rotationAxis + otherAxis * Cos(Angle) + Cross(half3(1,0,0),otherAxis) * Sin(Angle);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>绕着Y轴计算方式为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half3 rotationAxis = half3(0,Pos.y,0);half3 otherAxis = half3(Pos.x,0,Pos.z);ResultPos = rotationAxis + otherAxis * Cos(Angle) + Cross(half3(0,1,0),otherAxis) * Sin(Angle);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>绕着Z轴计算方式为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half3 rotationAxis = half3(0,0,Pos.z);half3 otherAxis = half3(Pos.xy,0);ResultPos = rotationAxis + otherAxis * Cos(Angle) + Cross(half3(0,0,1),otherAxis) * Sin(Angle);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="计算旋转的角度-AngleXZ"><a href="#计算旋转的角度-AngleXZ" class="headerlink" title="计算旋转的角度 AngleXZ"></a>计算旋转的角度 AngleXZ</h4><p>读取UV3的锚点信息并转换到世界空间下为AnchorsPosWS</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half variationValue = Fract(AnchorsPosWS.x + AnchorsPosWS.z + VertexColor.r);half2 angleXZ = Sin(PositionWS.xz * _Scale + variationValue + _Speed * _Time );half2 finalAngleXZ = angleXZ * _Amplitude * _MaxBendValue * VertexColor.g;//finalAngleXZ.x 为绕着Z轴旋转的角度//finalAngleXZ.Z 为绕着X轴旋转的角度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算旋转的角度 AngleY</p><pre class="line-numbers language-none"><code class="language-none">half variationValue = Fract(AnchorsPosWS.x + AnchorsPosWS.z + VertexColor.r);half2 angleY = Sin(PositionWS.x * _Scale + variationValue + _Speed * _Time );half2 finalAngleY = angleY * _Amplitude * _MaxRollingValue * VertexColor.b;//finalAngleY 为绕着Y轴旋转的角度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、震动"><a href="#三、震动" class="headerlink" title="三、震动"></a>三、震动</h1><h4 id="震动的计算方式"><a href="#震动的计算方式" class="headerlink" title="震动的计算方式"></a>震动的计算方式</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">half variationValue = Fract(AnchorsPosWS.x + AnchorsPosWS.z + VertexColor.r) * _FlutterValue;half positionSum = PositionWS.x + PositionWS.y + PositionWS.z;half FlutterWave = Sin(positionSum * _Scale * 10 + variationValue + _Speed * _Time );half3 FinalFlutter = half3(FlutterWave,0,FlutterWave);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、最终结果"><a href="#四、最终结果" class="headerlink" title="四、最终结果"></a>四、最终结果</h1><p>为了较好的效果，将上述结算的结果作为模型空间中的变化。 使用模型空间坐标减去模型空间的锚点Anchor（因为旋转的计算，没有加上锚点，默认是在原点进行计算的），使得还原到原点，然后应用变化量，最后加加上锚点坐标记得最终模型空间顶点坐标。</p>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 场景 </tag>
            
            <tag> 草 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青青草原——概述及目录</title>
      <link href="/BloodSoul.github.io/2021/08/07/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-gai-shu-ji-mu-lu/"/>
      <url>/BloodSoul.github.io/2021/08/07/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-gai-shu-ji-mu-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、产生的原因"><a href="#一、产生的原因" class="headerlink" title="一、产生的原因"></a>一、产生的原因</h1><p>公司最近在做新的项目，项目内草效果感觉不是很好，自己对此也比较感兴趣，就趁着下班时间，对草地渲染进行研究学习，将学习的内容进行总结记录，方便自己查阅。如果恰巧能帮助到别人，那就更好了。</p><h1 id="二、最终效果"><a href="#二、最终效果" class="headerlink" title="二、最终效果"></a>二、最终效果</h1><iframe class="bilibili" src="//player.bilibili.com/player.html?aid=419673697&amp;bvid=BV123411r7oF&amp;cid=384526909&amp;page=1&amp;high_quality=1&amp;high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/%E9%9D%92%E9%9D%92%E8%8D%89%E5%8E%9F%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="青青草原效果图"></p><h1 id="三、系列目录"><a href="#三、系列目录" class="headerlink" title="三、系列目录"></a>三、系列目录</h1><ol><li>草自身的弯曲、震动、旋转</li><li>草的颜色渐变、AO模拟、简易透光</li><li>草的俯视矫正、大小渐变</li><li>打破统一的随机颜色效果</li><li>草的全局风力效果</li><li>草的全局多目标交互效果</li></ol>]]></content>
      
      
      <categories>
          
          <category> Rendering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染效果 </tag>
            
            <tag> 场景 </tag>
            
            <tag> 草 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/assisttool/chang-yong-gong-ju-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/assisttool/chang-yong-gong-ju-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/chang-yong-gong-ju/fan-yi-gong-ju/">翻译工具</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/chang-yong-gong-ju/shu-ji-cha-zhao/">书籍查找</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/assisttool/chang-yong-gong-ju/tu-xiang-xiu-fu-gong-ju/">图像修复工具</a></p>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DemoGallery索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/demogallery/demogallery-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/demogallery/demogallery-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/demogallery/mian-shi/mian-shi-ji-chu-zhi-shi-hui-gu/">面试基础知识回顾</a></p><h2 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/11/07/demogallery/demo1/grass/">grass</a></p>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gameengine/unity-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gameengine/unity-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h1><h2 id="、编程语言"><a href="#、编程语言" class="headerlink" title="、编程语言"></a>、编程语言</h2><h3 id="、、、CSharp"><a href="#、、、CSharp" class="headerlink" title="、、、CSharp"></a>、、、CSharp</h3><h3 id="、、、Lua"><a href="#、、、Lua" class="headerlink" title="、、、Lua"></a>、、、Lua</h3><h1 id="扩展内容Package"><a href="#扩展内容Package" class="headerlink" title="扩展内容Package"></a>扩展内容Package</h1><h1 id="、动画方向"><a href="#、动画方向" class="headerlink" title="、动画方向"></a>、动画方向</h1><h1 id="、工具方向"><a href="#、工具方向" class="headerlink" title="、工具方向"></a>、工具方向</h1><h3 id="、、、UI"><a href="#、、、UI" class="headerlink" title="、、、UI"></a>、、、UI</h3><ul><li>UGUI</li><li>UIElement</li></ul><h1 id="、渲染方向"><a href="#、渲染方向" class="headerlink" title="、渲染方向"></a>、渲染方向</h1><h2 id="、、、管线"><a href="#、、、管线" class="headerlink" title="、、、管线"></a>、、、管线</h2><ul><li>HDRP</li><li>URP</li></ul><h2 id="、、、渲染级别"><a href="#、、、渲染级别" class="headerlink" title="、、、渲染级别"></a>、、、渲染级别</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-bie/xuan-ran-ji-bie/">渲染级别</a></p><h2 id="、、、渲染技巧"><a href="#、、、渲染技巧" class="headerlink" title="、、、渲染技巧"></a>、、、渲染技巧</h2><ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/cong-shen-du-tu-chong-jian-shi-jie-zuo-biao/cong-shen-du-tu-chong-jian-shi-jie-zuo-biao/">从深度图重建世界坐标</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/25/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/gao-du-tu-zhuan-fa-xian/gao-du-tu-zhuan-fa-xian/">高度图转法线</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/huo-qu-ping-mu-zuo-biao/huo-qu-ping-mu-zuo-biao/">获取屏幕坐标</a></li><li>使用ComputerShader优化<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/shi-yong-computershader-you-hua/li-yong-ji-suan-zhao-se-qi-jin-xing-cai-jian-you-hua/">利用计算着色器进行裁剪优化</a></li></ul></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/xian-xing-shen-du/xian-xing-shen-du/">线性深度</a></li><li>UIClip<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/uiclip/uiclip-shi-yong-ji-qiao/">UIClip使用技巧</a></li></ul></li><li>UnityBlend<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/29/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/unityblend/unity-zhong-shi-xian-ps-de-hun-he-xiao-guo/">Unity中实现PS的混合效果</a></li></ul></li><li>UnityRT<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/11/12/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-ji-qiao/unityrt/unity-xuan-ran-rt-de-ji-chong-fang-shi/">Unity渲染RT的几种方式</a></li></ul></li></ul><h2 id="、、、渲染问题记录"><a href="#、、、渲染问题记录" class="headerlink" title="、、、渲染问题记录"></a>、、、渲染问题记录</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/17/gamedevelop/gameengine/unity/kuo-zhan-nei-rong-package/xuan-ran-fang-xiang/xuan-ran-wen-ti-ji-lu/shader-bao-cuo-ji-jin/">shader报错集锦</a></p><h1 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h1><h2 id="、ET"><a href="#、ET" class="headerlink" title="、ET"></a>、ET</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/08/gamedevelop/gameengine/unity/xiang-mu-kuang-jia/et-huan-jing-pei-zhi/">ET 环境配置</a></p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/24/gamedevelop/gameengine/unity/xiao-ji-qiao/unity-xiao-ji-qiao/">Unity小技巧</a></p><h1 id="小坑日记"><a href="#小坑日记" class="headerlink" title="小坑日记"></a>小坑日记</h1><h1 id="Unity报错集锦"><a href="#Unity报错集锦" class="headerlink" title="Unity报错集锦"></a>Unity报错集锦</h1><ol><li><p>Unity 常见问题 之 NDK (ndk)报错 Unity requires NDK r19 (64-bit)(19.0.05232133)</p><pre><code>&lt;https://blog.csdn.net/u014361280/article/details/113845080&gt; </code></pre></li></ol> <img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721231659886.png" alt="image-20220721231659886" style="zoom:67%;"> <p>首先下载 Android-NDK r 19 版本</p><p>点击链接直接下载ndk <a href="https://dl.google.com/android/repository/android-ndk-r19-windows-x86_64.zip">https://dl.google.com/android/repository/android-ndk-r19-windows-x86_64.zip</a></p><p>来自 <a href="https://blog.csdn.net/u014361280/article/details/113845080">https://blog.csdn.net/u014361280/article/details/113845080</a> </p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20220721231957480.png" alt="image-20220721231957480" style="zoom:67%;"> ]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hobby索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/hobby/hobby-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/hobby/hobby-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="视频下载"><a href="#视频下载" class="headerlink" title="视频下载"></a>视频下载</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/11/hobby/shi-pin-xia-zai/b-zhan-shi-pin-xia-zai/">B站视频下载</a></p><h1 id="有趣的东西"><a href="#有趣的东西" class="headerlink" title="有趣的东西"></a>有趣的东西</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/hobby/you-qu-de-dong-xi/you-yi-si-de-wang-zhan/">有意思的网站</a></p>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Movie所用工具索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/movie/movie-suo-yong-gong-ju-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/movie/movie-suo-yong-gong-ju-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="AE"><a href="#AE" class="headerlink" title="AE"></a>AE</h1><h1 id="PR"><a href="#PR" class="headerlink" title="PR"></a>PR</h1>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/website/blog-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/website/blog-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="、Content"><a href="#、Content" class="headerlink" title="、Content"></a>、Content</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/07/10/gamedevelop/website/blog/hexo/content/cong-ling-da-jian-ge-ren-hexo-bo-ke/">从零搭建个人 Hexo 博客</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/07/11/gamedevelop/website/blog/hexo/content/cong-ling-da-jian-markdown-wen-dang-bian-xie-huan-jing/">从零开始搭建 Markdown 文档编写环境</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/07/10/gamedevelop/website/blog/hexo/content/hexo-chang-yong-ming-ling-shuo-ming/">Hexo 常用命令说明</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/website/blog/hexo/content/mian-fei-cdn/">免费CDN</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/24/gamedevelop/website/blog/hexo/content/mathjax-shi-yong/">mathjax使用</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/12/gamedevelop/website/blog/hexo/content/ru-he-nei-qian-bilibili-wang-zhan-lian-jie/">如何内嵌bilibili网站链接</a></p><h2 id="、Theme"><a href="#、Theme" class="headerlink" title="、Theme"></a>、Theme</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/07/02/gamedevelop/website/blog/hexo/theme/matery-zhu-ti-shi-yong-shuo-ming/">Matery 主题使用说明</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/12/gamedevelop/website/blog/hexo/theme/kuai-su-shou-xi-matery-dai-ma/">快速熟悉 Matery 代码</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/12/gamedevelop/website/blog/hexo/theme/matery-tian-jia-live2d-kan-ban-niang/">matery添加live2d看板娘</a></p>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>版本管理索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/assisttool/ban-ben-guan-li-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/assisttool/ban-ben-guan-li-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h1><h2 id="、Git"><a href="#、Git" class="headerlink" title="、Git"></a>、Git</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/ban-ben-guan-li/ke-shi-hua-gong-ju/git/git-gong-ju/">git工具</a></p><h2 id="、SVN"><a href="#、SVN" class="headerlink" title="、SVN"></a>、SVN</h2><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/10/gamedevelop/assisttool/ban-ben-guan-li/ming-ling-xing/zheng-ze-biao-da-shi-xue-xi/">正则表达式学习</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/assisttool/ban-ben-guan-li/ming-ling-xing/shell-jiao-ben-xue-xi/">Shell脚本学习</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/assisttool/ban-ben-guan-li/ming-ling-xing/vim-bian-ji-cao-zuo/">Vim编辑操作</a></p>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AroundFunction索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/aroundfunction-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/aroundfunction-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="基础业务"><a href="#基础业务" class="headerlink" title="基础业务"></a>基础业务</h1><h2 id="、包体构建"><a href="#、包体构建" class="headerlink" title="、包体构建"></a>、包体构建</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/bao-ti-gou-jian/managertool/">ManagerTool</a></p><h2 id="、热更新"><a href="#、热更新" class="headerlink" title="、热更新"></a>、热更新</h2><h2 id="、SDK接入"><a href="#、SDK接入" class="headerlink" title="、SDK接入"></a>、SDK接入</h2><ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/yi-huan-jing-pei-zhi/">Unity与安卓联合开发一环境配置</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/er-dao-chu-aar/">Unity与安卓联合开发二导出AAR</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/san-qi-dong-zi-ding-yi-activity/">Unity与Android联合开发三启动自定义Activity</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/si-sdk-da-bao-wen-ti-hui-zong/">Unity与Android联合开发四SDK打包问题汇总</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2022/06/28/gamedevelop/gamecontent/aroundfunction/ji-chu-xi-tong/sdk-jie-ru/unity-yu-android-lian-he-kai-fa/wu-unity-diao-yong-an-zhuo-fang-fa-hui-zong/">Unity与Android联合开发五Unity调用安卓方法汇总</a></li></ul><h2 id="、UI系统"><a href="#、UI系统" class="headerlink" title="、UI系统"></a>、UI系统</h2><h1 id="通用业务"><a href="#通用业务" class="headerlink" title="通用业务"></a>通用业务</h1><h2 id="、背包"><a href="#、背包" class="headerlink" title="、背包"></a>、背包</h2><h2 id="、-登录"><a href="#、-登录" class="headerlink" title="、 登录"></a>、 登录</h2><h2 id="、-红点"><a href="#、-红点" class="headerlink" title="、 红点"></a>、 红点</h2><h2 id="、-邮件"><a href="#、-邮件" class="headerlink" title="、 邮件"></a>、 邮件</h2><h1 id="游戏安全"><a href="#游戏安全" class="headerlink" title="游戏安全"></a>游戏安全</h1><h2 id="、解包"><a href="#、解包" class="headerlink" title="、解包"></a>、解包</h2><p>APKTool 工具使用</p>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArtResource索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/artresource-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/artresource-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/artresource/cha-jian/mian-fei-mei-zhu-cha-jian/">免费美术插件</a></p><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/24/gamedevelop/gamecontent/artresource/zi-yuan/cai-zhi-ior-cha-xun/">材质IOR查询</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/13/gamedevelop/gamecontent/artresource/zi-yuan/mian-fei-zi-yuan-wang-zhan-shou-ji/">免费资源网站收集</a></p><h1 id="2D"><a href="#2D" class="headerlink" title="2D"></a>2D</h1><h2 id="、原画"><a href="#、原画" class="headerlink" title="、原画"></a>、原画</h2><h3 id="、、、理论知识"><a href="#、、、理论知识" class="headerlink" title="、、、理论知识"></a>、、、理论知识</h3><ul><li>风格分类<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/artresource/2d/yuan-hua/li-lun-zhi-shi/feng-ge-fen-lei/mei-zhu-hui-hua-fen-lei/">美术绘画分类</a></li></ul></li><li>透视<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/artresource/2d/yuan-hua/li-lun-zhi-shi/tou-shi/yuan-hua-xue-xi-01-tou-shi-yuan-li/">原画学习01_透视原理</a></li></ul></li></ul><h3 id="、、、所用工具"><a href="#、、、所用工具" class="headerlink" title="、、、所用工具"></a>、、、所用工具</h3><ul><li>PS</li></ul><h1 id="3D"><a href="#3D" class="headerlink" title="3D"></a>3D</h1><h2 id="、模型"><a href="#、模型" class="headerlink" title="、模型"></a>、模型</h2><h3 id="、、、场景"><a href="#、、、场景" class="headerlink" title="、、、场景"></a>、、、场景</h3><ul><li>理论知识</li><li>所用工具<ul><li>程序化工具<ul><li>Houdini</li><li>SD</li></ul></li><li>非程序化工具<ul><li>SpeedTree</li><li>WroldCreator</li></ul></li></ul></li></ul><h3 id="、、、角色"><a href="#、、、角色" class="headerlink" title="、、、角色"></a>、、、角色</h3><ul><li>理论知识</li><li>流程<ul><li>传统流程</li><li>次时代流程</li><li><strong>PBR流程</strong><ul><li>流程内容</li><li>所用工具<ul><li>烘焙工具<ul><li>MarmosetToobag 八猴<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/24/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/hong-bei-gong-ju/marmosettoobag-ba-hou/ba-hou-xuan-ran/">八猴渲染</a></li></ul></li><li>SP</li></ul></li><li>建模工具<ul><li>程序化工具<ul><li>Houdini</li><li>SD</li></ul></li><li>非程序化工具<ul><li>Blender</li><li>Maya<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/29/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/jian-mo-gong-ju/fei-cheng-xu-hua-gong-ju/maya/maya-xue-xi/">maya学习</a></li></ul></li><li>Zbrush<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/29/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/jian-mo-gong-ju/fei-cheng-xu-hua-gong-ju/zbrush/zbrush-xue-xi/">Zbrush学习</a></li></ul></li><li>3dsMax</li></ul></li></ul></li><li>贴图工具<ul><li>程序化工具<ul><li>SD<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/tie-tu-gong-ju/cheng-xu-hua-gong-ju/sd/sd-xue-xi/">SD学习</a></li></ul></li></ul></li><li>非程序化工具<ul><li>SP<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/24/gamedevelop/gamecontent/artresource/3d/mo-xing/jiao-se/liu-cheng/pbr-liu-cheng/suo-yong-gong-ju/tie-tu-gong-ju/fei-cheng-xu-hua-gong-ju/sp/sp-xue-xi-bi-ji/">SP学习笔记</a></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h1 id="2D与3D"><a href="#2D与3D" class="headerlink" title="2D与3D"></a>2D与3D</h1><h2 id="、特效"><a href="#、特效" class="headerlink" title="、特效"></a>、特效</h2><h3 id="、、、理论知识-1"><a href="#、、、理论知识-1" class="headerlink" title="、、、理论知识"></a>、、、理论知识</h3><h3 id="、、、所用工具-1"><a href="#、、、所用工具-1" class="headerlink" title="、、、所用工具"></a>、、、所用工具</h3><ul><li>程序化工具<ul><li>Houdini</li></ul></li><li>非程序化工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rendering索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/rendering-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/rendering-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h1><ul><li>真机调试<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/29/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/zhen-ji-diao-shi/shader-zhen-ji-diao-shi/">shader真机调试</a></li></ul></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/shu-xue-fen-xi-gong-ju/">数学分析工具</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/shader-xiao-guo-yan-zheng/">shader效果验证</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/fen-xi-gong-ju/shader-xing-neng-fen-xi/">shader性能分析</a></li></ul><h1 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h1><h2 id="、光照"><a href="#、光照" class="headerlink" title="、光照"></a>、光照</h2><h3 id="、、、环境光照"><a href="#、、、环境光照" class="headerlink" title="、、、环境光照"></a>、、、环境光照</h3><h3 id="、、、全局光照"><a href="#、、、全局光照" class="headerlink" title="、、、全局光照"></a>、、、全局光照</h3><h3 id="、、、直接光照"><a href="#、、、直接光照" class="headerlink" title="、、、直接光照"></a>、、、直接光照</h3><h2 id="、视觉外观"><a href="#、视觉外观" class="headerlink" title="、视觉外观"></a>、视觉外观</h2><h3 id="、、、伽马矫正"><a href="#、、、伽马矫正" class="headerlink" title="、、、伽马矫正"></a>、、、伽马矫正</h3><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shi-jue-wai-guan/jia-ma-xiao-zheng/jia-ma-xiao-zheng-yu-xian-xing-kong-jian/">伽马校正与线性空间</a></p><h3 id="、、、着色"><a href="#、、、着色" class="headerlink" title="、、、着色"></a>、、、着色</h3><ul><li>NPR<ul><li>描边<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shi-jue-wai-guan/zhao-se/npr/miao-bian/fa-xian-wai-kuo/">法线外扩</a></li></ul></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shi-jue-wai-guan/zhao-se/npr/npr-ji-zhu-fa-zhan/">NPR技术发展</a></li></ul></li><li>PBR</li></ul><h3 id="、、、走样反走样"><a href="#、、、走样反走样" class="headerlink" title="、、、走样反走样"></a>、、、走样反走样</h3><h2 id="、数学知识"><a href="#、数学知识" class="headerlink" title="、数学知识"></a>、数学知识</h2><h3 id="、、、傅里叶变换"><a href="#、、、傅里叶变换" class="headerlink" title="、、、傅里叶变换"></a>、、、傅里叶变换</h3><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/03/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/fu-li-xie-bian-huan/fu-li-xie-bian-huan/">傅里叶变换</a></p><h3 id="、、、概率论"><a href="#、、、概率论" class="headerlink" title="、、、概率论"></a>、、、概率论</h3><h3 id="、、、图形图像数字处理"><a href="#、、、图形图像数字处理" class="headerlink" title="、、、图形图像数字处理"></a>、、、图形图像数字处理</h3><h3 id="、、、微积分"><a href="#、、、微积分" class="headerlink" title="、、、微积分"></a>、、、微积分</h3><h3 id="、、、线性代数"><a href="#、、、线性代数" class="headerlink" title="、、、线性代数"></a>、、、线性代数</h3><ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/xian-xing-dai-shu/ju-zhen/ju-zhen/">矩阵</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/26/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/xian-xing-dai-shu/xiang-liang/xiang-liang/">向量</a></li></ul><h3 id="、、、噪声"><a href="#、、、噪声" class="headerlink" title="、、、噪声"></a>、、、噪声</h3><ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/shu-xue-zhi-shi/zao-sheng/fen-xing-bu-lang-yun-dong/fen-xing-bu-lang-yun-dong/">分形布朗运动</a></li></ul><h2 id="、图形硬件"><a href="#、图形硬件" class="headerlink" title="、图形硬件"></a>、图形硬件</h2><h3 id="、、、图形渲染管线"><a href="#、、、图形渲染管线" class="headerlink" title="、、、图形渲染管线"></a>、、、图形渲染管线</h3><ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/ji-he-zhao-se-qi/ji-he-zhao-se-qi/">几何着色器</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/qu-mian-xi-fen-zhao-se-qi/qu-mian-xi-fen-zhao-se-qi/">曲面细分着色器</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/02/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/xuan-ran-liu-shui-xian/xuan-ran-liu-shui-xian/">渲染流水线</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/computershader/computershader/">ComputerShader</a></li><li>其他<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/tu-xing-xuan-ran-guan-xian/vpos-vface-sv-vertexid/">VPOS-VFACE-SV-VertexID</a></li></ul></li></ul><h3 id="、、、GPU架构"><a href="#、、、GPU架构" class="headerlink" title="、、、GPU架构"></a>、、、GPU架构</h3><ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/gpu-jia-gou/tu-xing-api/tu-xing-api/">图形API</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/tu-xing-ying-jian/gpu-jia-gou/shaderlanguage/shaderlanguage/">ShaderLanguage</a></li></ul><h2 id="、优化技术"><a href="#、优化技术" class="headerlink" title="、优化技术"></a>、优化技术</h2><h3 id="、、、加速算法"><a href="#、、、加速算法" class="headerlink" title="、、、加速算法"></a>、、、加速算法</h3><h3 id="、、、碰撞检测"><a href="#、、、碰撞检测" class="headerlink" title="、、、碰撞检测"></a>、、、碰撞检测</h3><h3 id="、、、相交测试"><a href="#、、、相交测试" class="headerlink" title="、、、相交测试"></a>、、、相交测试</h3><h2 id="、资产"><a href="#、资产" class="headerlink" title="、资产"></a>、资产</h2><h3 id="、、、几何"><a href="#、、、几何" class="headerlink" title="、、、几何"></a>、、、几何</h3><ul><li>显示模型<ul><li>3D模型</li></ul></li><li>隐式模型<ul><li>曲线和曲面</li></ul></li></ul><h3 id="、、、纹理"><a href="#、、、纹理" class="headerlink" title="、、、纹理"></a>、、、纹理</h3><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/10/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/zi-chan/wen-li/wen-li/">纹理</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/li-lun-zhi-shi/zi-chan/wen-li/virtualtexture-xu-ni-wen-li/">虚拟纹理(VirtualTexture)</a></p><h1 id="渲染技巧"><a href="#渲染技巧" class="headerlink" title="渲染技巧"></a>渲染技巧</h1><h2 id="、黑白图转法线"><a href="#、黑白图转法线" class="headerlink" title="、黑白图转法线"></a>、黑白图转法线</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/xuan-ran-ji-qiao/hei-bai-tu-zhuan-fa-xian/hei-bai-tu-zhuan-fa-xian/">黑白图转法线</a></p><h2 id="、三平面映射"><a href="#、三平面映射" class="headerlink" title="、三平面映射"></a>、三平面映射</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/25/gamedevelop/gamecontent/rendering/xuan-ran-ji-qiao/san-ping-mian-ying-she/san-ping-mian-ying-she/">三平面映射</a></p><h2 id="、Matcap"><a href="#、Matcap" class="headerlink" title="、Matcap"></a>、Matcap</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/xuan-ran-ji-qiao/matcap/matcap-ji-qiao/">Matcap</a></p><h1 id="渲染教程"><a href="#渲染教程" class="headerlink" title="渲染教程"></a>渲染教程</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/xuan-ran-jiao-cheng/xuan-ran-shu-ji-jiao-cheng/">渲染书籍教程</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/13/gamedevelop/gamecontent/rendering/xuan-ran-jiao-cheng/shading-jiao-cheng-wang-zhan/">shading教程网站</a></p><h1 id="渲染框架"><a href="#渲染框架" class="headerlink" title="渲染框架"></a>渲染框架</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/21/gamedevelop/gamecontent/rendering/xuan-ran-kuang-jia/xuan-ran-kuang-jia/">渲染框架</a></p><h1 id="渲染效果"><a href="#渲染效果" class="headerlink" title="渲染效果"></a>渲染效果</h1><h2 id="、场景"><a href="#、场景" class="headerlink" title="、场景"></a>、场景</h2><h3 id="、、、草"><a href="#、、、草" class="headerlink" title="、、、草"></a>、、、草</h3><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/08/07/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-gai-shu-ji-mu-lu/">青青草原——概述及目录</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/08/28/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-cao-de-fu-shi-jiao-zheng-da-xiao-jian-bian/">青青草原——草的俯视矫正、大小渐变</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/08/08/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-wan-qu-zhen-dong-xuan-zhuan/">青青草原——弯曲、震动、旋转</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/08/09/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/cao/qing-qing-cao-yuan-cao-de-yan-se-jian-bian-ao-mo-ni-jian-yi-tou-guang/">青青草原——草的颜色渐变、AO模拟、简易透光</a></p><h3 id="、、、水"><a href="#、、、水" class="headerlink" title="、、、水"></a>、、、水</h3><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/shui/ke-jiao-hu-shui-mian-lian-yi/">可交互水面涟漪</a></p><h3 id="、、、特殊材质"><a href="#、、、特殊材质" class="headerlink" title="、、、特殊材质"></a>、、、特殊材质</h3><ul><li>潮湿材质<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/te-shu-cai-zhi/chao-shi-cai-zhi/chao-shi-cai-zhi-shi-xian-fang-shi/">潮湿材质实现方式</a></li></ul></li></ul><h3 id="、、、天气"><a href="#、、、天气" class="headerlink" title="、、、天气"></a>、、、天气</h3><ul><li>雨<ul><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/tian-qi/yu/chang-jing-yu-cai-zhi-xiao-guo/">场景雨材质效果</a></li><li><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/chang-jing/tian-qi/yu/ping-mu-yu-di-mo-ni/">屏幕雨滴模拟</a></li></ul></li></ul><h2 id="、后处理"><a href="#、后处理" class="headerlink" title="、后处理"></a>、后处理</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/11/12/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/hou-chu-li/color-lut-zhi-zuo/">Color_LUT制作</a></p><h2 id="、角色"><a href="#、角色" class="headerlink" title="、角色"></a>、角色</h2><h3 id="、、、头发渲染"><a href="#、、、头发渲染" class="headerlink" title="、、、头发渲染"></a>、、、头发渲染</h3><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/jiao-se/tou-fa-xuan-ran/kajiya-kay-tou-fa-xuan-ran/">kajiya-kay头发渲染</a></p><h2 id="、特效"><a href="#、特效" class="headerlink" title="、特效"></a>、特效</h2><h2 id="、UI"><a href="#、UI" class="headerlink" title="、UI"></a>、UI</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/29/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/ui/huo-yan-rong-jie/">火焰溶解</a></p><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/22/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/ui/2d-guang-zhao/">2D光照</a></p><h2 id="、渲染效果参考"><a href="#、渲染效果参考" class="headerlink" title="、渲染效果参考"></a>、渲染效果参考</h2><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/10/17/gamedevelop/gamecontent/rendering/xuan-ran-xiao-guo/xuan-ran-xiao-guo-can-kao/xuan-ran-xiao-guo-can-kao/">渲染效果参考</a></p>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GamePlay索引-IndexLv2</title>
      <link href="/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/gameplay-suo-yin-indexlv2/"/>
      <url>/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/gameplay-suo-yin-indexlv2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://klj35.github.io/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/">返回索引主页</a></p><h1 id="换装"><a href="#换装" class="headerlink" title="换装"></a>换装</h1><h1 id="技能编辑器"><a href="#技能编辑器" class="headerlink" title="技能编辑器"></a>技能编辑器</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/09/13/gamedevelop/gamecontent/gameplay/ji-neng-bian-ji-qi/hui-he-zhan-dou-ji-neng-bian-ji-qi/">回合战斗技能编辑器</a></p><h2 id="捏脸"><a href="#捏脸" class="headerlink" title="捏脸"></a>捏脸</h2><h1 id="网络同步"><a href="#网络同步" class="headerlink" title="网络同步"></a>网络同步</h1><p><a href="https://klj35.github.io/BloodSoul.github.io/2021/12/22/gamedevelop/gamecontent/gameplay/wang-luo-tong-bu/wang-luo-tong-bu/">网络同步</a></p><h1 id="战斗"><a href="#战斗" class="headerlink" title="战斗"></a>战斗</h1>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建 Markdown 文档编写环境</title>
      <link href="/BloodSoul.github.io/2021/07/11/gamedevelop/website/blog/hexo/content/cong-ling-da-jian-markdown-wen-dang-bian-xie-huan-jing/"/>
      <url>/BloodSoul.github.io/2021/07/11/gamedevelop/website/blog/hexo/content/cong-ling-da-jian-markdown-wen-dang-bian-xie-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Markdown-编辑器-Typora-环境配置"><a href="#一、Markdown-编辑器-Typora-环境配置" class="headerlink" title="一、Markdown 编辑器 Typora 环境配置"></a>一、Markdown 编辑器 Typora 环境配置</h1><blockquote><ol><li>下载并安装 Typora <a href="https://www.typora.io/">链接</a></li><li>下载 OneDark 主题皮肤 <a href="https://theme.typora.io/theme/OneDark/">链接</a></li><li>配置 OneDark 主题<ol><li>在Typora左上角 <code>文件-&gt;偏好设置-&gt;外观-&gt;打开主题文件夹</code><ol><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210711113853219.png" style="zoom: 50%;"> </li></ol></li><li>将解压后的 onedark.css 文件拷贝到其中</li><li>重启 Typora，在顶部选择<code>主题-&gt;Onedark</code></li></ol></li></ol></blockquote><h1 id="二、配置图床"><a href="#二、配置图床" class="headerlink" title="二、配置图床"></a>二、配置图床</h1><blockquote><ol><li>下载 PicGo <a href="https://molunerfinn.com/PicGo/">链接</a></li><li>按照 PicGo 配置手册，配置通信Token <a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">链接</a></li><li>在 Typora 中配置 PiGo<ol><li>在Typora左上角 文件-&gt;偏好设置-&gt;图像按照下图配置</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210711113225363.png" style="zoom: 50%;"> </li></ol></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建个人 Hexo 博客</title>
      <link href="/BloodSoul.github.io/2021/07/10/gamedevelop/website/blog/hexo/content/cong-ling-da-jian-ge-ren-hexo-bo-ke/"/>
      <url>/BloodSoul.github.io/2021/07/10/gamedevelop/website/blog/hexo/content/cong-ling-da-jian-ge-ren-hexo-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h4 id="a-下载并安装-Node-js"><a href="#a-下载并安装-Node-js" class="headerlink" title="a. 下载并安装 Node.js"></a>a. 下载并安装 <a href="https://nodejs.org/zh-cn/download/"><strong>Node.js</strong></a></h4><p>打开 cmd 验证安装是否成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示出对应版本号，表示安装成功</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710194608900.png"> </p><p>查看 NPM 是否安装成功，输入如下指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710200815627.png"> </p><h4 id="b-下载并安装-Git-客户端"><a href="#b-下载并安装-Git-客户端" class="headerlink" title="b. 下载并安装 Git 客户端"></a>b. 下载并安装 <a href="https://git-scm.com/downloads"><strong>Git 客户端</strong></a></h4><p>打开 cmd 验证安装是否成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示出对应版本号，表示安装成功</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710195514143.png"> </p><p>新建博客工程要存放的文件夹，我这边使用 Hexo_Matery，在Hexo_Matery文件夹内，鼠标右键-&gt;Git Bash Here，输入如下指令，设置淘宝源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二、搭建-Hexo"><a href="#二、搭建-Hexo" class="headerlink" title="二、搭建 Hexo"></a>二、搭建 Hexo</h1><h4 id="a-初始-Hexo-指令集"><a href="#a-初始-Hexo-指令集" class="headerlink" title="a. 初始 Hexo 指令集"></a>a. 初始 Hexo 指令集</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="b-初始化-Hexo-博客"><a href="#b-初始化-Hexo-博客" class="headerlink" title="b. 初始化 Hexo 博客"></a>b. 初始化 Hexo 博客</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="c-进行本地预览博客"><a href="#c-进行本地预览博客" class="headerlink" title="c. 进行本地预览博客"></a>c. 进行本地预览博客</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开浏览器输入：<a href="http://localhost:4000/">http://localhost:4000</a>，能够正常预览，表示搭建成功！</p><p><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710211816860.png"> </p><h1 id="三、将-Hexo-部署到-GitHub"><a href="#三、将-Hexo-部署到-GitHub" class="headerlink" title="三、将 Hexo 部署到 GitHub"></a>三、将 Hexo 部署到 GitHub</h1><h4 id="a-配置-GitHub-环境"><a href="#a-配置-GitHub-环境" class="headerlink" title="a. 配置 GitHub 环境"></a>a. 配置 GitHub 环境</h4><blockquote><ul><li>注册 GitHub 账号：<a href="https://github.com/">https://github.com/</a></li><li>设置本地 Git 与 远端 GitHub 的密钥<ul><li>在你的博客文件夹内（我的示例为<code>Hexo_Matery文件夹</code>）鼠标右键-&gt;Git Bash Here</li><li>配置你的 git 全局账号，命令输入如下：<ul><li>git config –global user.name “你的Github用户名”</li><li>git config –global user.email “你的Github邮箱” </li></ul></li><li>配置 ssh key，命令输入如下：<ul><li>ssh-keygen -t rsa -C “你的Github邮箱”    (生成新的公钥)</li><li>less ~/.ssh/id_rsa.pub    （查看公钥，并将其复制）</li></ul></li><li>在 <a href="https://github.com/settings/keys">GitHub 设置界面</a>填入密钥</li><li>验证密钥是否通过，命令输入如下：<ul><li>ssh -T <a href="mailto:git@github.com">git@github.com</a></li></ul></li></ul></li><li>新建一个仓库资源 <a href="https://github.com/new">https://github.com/new</a>，该资源的 SSH Clone 地址后面要用到</li></ul></blockquote><h4 id="b-编写-Hexo-博客的部署项"><a href="#b-编写-Hexo-博客的部署项" class="headerlink" title="b. 编写 Hexo 博客的部署项"></a>b. 编写 Hexo 博客的部署项</h4><blockquote><ul><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，打开 <code>_config.yml</code> 文件</li><li>在 deploy 项，按如下输入：<ul><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710220753733.png" style="zoom: 80%;"> </li><li><code>url</code> 就是项目的 SSH Clone 地址，<code>branch</code> 为需要部署到的分支名称</li></ul></li></ul></blockquote><h4 id="c-部署并推送到-GitHub"><a href="#c-部署并推送到-GitHub" class="headerlink" title="c. 部署并推送到 GitHub"></a>c. 部署并推送到 GitHub</h4><blockquote><ul><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，鼠标右键-&gt;Git Bash Here</li><li>安装 GitHub 部署插件，输入：npm install hexo-deployer-git –save</li><li>进行 GitHub 部署，输入：hexo clean &amp;&amp; hexo g&amp;&amp; hexo d</li><li>在你刚才创建的 GitHub 资源项目中，选择 <code>Settings</code></li><li>在 <code>Settings</code> 界面中选择左下角的 <code>Pages</code>，选择对应分支（示例为 <code>master</code>），然后点击 <code>Save</code></li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710222300137.png" style="zoom: 50%;"> </li><li>中间生成的链接即是你的博客地址</li></ul></blockquote><h4 id="d-处理部署到-GitHub-上排版丢失问题"><a href="#d-处理部署到-GitHub-上排版丢失问题" class="headerlink" title="d. 处理部署到 GitHub 上排版丢失问题"></a>d. 处理部署到 GitHub 上排版丢失问题</h4><blockquote><ul><li>复制 c 步骤最后生成的地址</li><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，打开 <code>_config.yml</code> 文件</li><li>将地址填入 <code>url</code> 项</li><li>并将 <code>root</code> （没有这手动写一个）项改成 “/you_project_name/“</li><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，鼠标右键-&gt;Git Bash Here，输入：hexo clean &amp;&amp; hexo g&amp;&amp; hexo d</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710223221224.png" style="zoom:80%;"> </li></ul></blockquote><h1 id="四、使用-Matery-主题美化"><a href="#四、使用-Matery-主题美化" class="headerlink" title="四、使用 Matery 主题美化"></a>四、使用 Matery 主题美化</h1><p>详细使用方式请参见我的 <a href="https://klj35.github.io/BloodSoul.github.io/2021/07/02/block/matery-zhu-ti-shi-yong-shuo-ming/">Matery 主题使用说明</a></p><h1 id="五、进行备份"><a href="#五、进行备份" class="headerlink" title="五、进行备份"></a>五、进行备份</h1><blockquote><ul><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，鼠标右键-&gt;Git Bash Here</li><li>安装备份插件，输入指令：npm install hexo-git-backup –save</li><li>在 <code>Hexo_Matery文件夹</code> 内根目录下，打开 <code>_config.yml</code> 文件，添加如下配置</li><li><img src="https://raw.githubusercontent.com/klj35/BloodSoulBlockImage/main/img/image-20210710225730474.png" style="zoom:80%;"> </li><li>仓库逗号后面的是备份成的分支名称</li><li>在 Git Bash 内输入命令：hexo b</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 常用命令说明</title>
      <link href="/BloodSoul.github.io/2021/07/10/gamedevelop/website/blog/hexo/content/hexo-chang-yong-ming-ling-shuo-ming/"/>
      <url>/BloodSoul.github.io/2021/07/10/gamedevelop/website/blog/hexo/content/hexo-chang-yong-ming-ling-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h1><h4 id="新建一个-Markdown-文档"><a href="#新建一个-Markdown-文档" class="headerlink" title="新建一个 Markdown 文档"></a>新建一个 Markdown 文档</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"markdown_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建一个页面"><a href="#新建一个页面" class="headerlink" title="新建一个页面"></a>新建一个页面</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"page_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建一个草稿"><a href="#新建一个草稿" class="headerlink" title="新建一个草稿"></a>新建一个草稿</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft <span class="token string">"draft_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo publish <span class="token string">"draft_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="清除缓存文件-db-json-和已生成的静态文件-public"><a href="#清除缓存文件-db-json-和已生成的静态文件-public" class="headerlink" title="清除缓存文件 (db.json) 和已生成的静态文件 (public)"></a>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="本地运行静态文件"><a href="#本地运行静态文件" class="headerlink" title="本地运行静态文件"></a>本地运行静态文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="备份到远端"><a href="#备份到远端" class="headerlink" title="备份到远端"></a>备份到远端</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo <span class="token builtin class-name">help</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Windows-常用组合命令"><a href="#Windows-常用组合命令" class="headerlink" title="Windows 常用组合命令"></a>Windows 常用组合命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d <span class="token operator">&amp;&amp;</span> hexo b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="官方使用说明（https-hexo-io-zh-cn-docs-commands）"><a href="#官方使用说明（https-hexo-io-zh-cn-docs-commands）" class="headerlink" title="官方使用说明（https://hexo.io/zh-cn/docs/commands）"></a><strong>官方使用说明</strong>（<a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a>）</h6>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery 主题使用说明</title>
      <link href="/BloodSoul.github.io/2021/07/02/gamedevelop/website/blog/hexo/theme/matery-zhu-ti-shi-yong-shuo-ming/"/>
      <url>/BloodSoul.github.io/2021/07/02/gamedevelop/website/blog/hexo/theme/matery-zhu-ti-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-matery"><a href="#hexo-theme-matery" class="headerlink" title="hexo-theme-matery"></a><a href="https://github.com/blinkfox/hexo-theme-matery/network">hexo-theme-matery</a></h1><p><a href="README.md">🇺🇸English Document</a> | <a href="http://blinkfox.com/">国内访问示例 (http://blinkfox.com)</a> | <a href="https://blinkfox.github.io/">Github 部署演示示例 (https://blinkfox.github.io)</a> | QQ 交流群1（已满）: <a href="https://jq.qq.com/?_wv=1027&amp;k=5zMDYHT"><code>926552981</code></a> | QQ 交流群2（推荐）: <a href="https://jq.qq.com/?_wv=1027&amp;k=53q2Ayp"><code>971887688</code></a></p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>             <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README.md">CHANGELOG.md</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客索引主页-IndexLv1</title>
      <link href="/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/"/>
      <url>/BloodSoul.github.io/2021/06/30/blogindex/indexlv1/bo-ke-suo-yin-zhu-ye-indexlv1/</url>
      
        <content type="html"><![CDATA[<h1 id="GameDevelop"><a href="#GameDevelop" class="headerlink" title="GameDevelop"></a>GameDevelop</h1><h2 id="、AssistTool"><a href="#、AssistTool" class="headerlink" title="、AssistTool"></a>、AssistTool</h2><h3 id="、、、版本管理"><a href="#、、、版本管理" class="headerlink" title="、、、版本管理"></a>、、、<a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/assisttool/ban-ben-guan-li-suo-yin-indexlv2/">版本管理</a></h3><h3 id="、、、常用工具"><a href="#、、、常用工具" class="headerlink" title="、、、常用工具"></a>、、、<a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/assisttool/chang-yong-gong-ju-suo-yin-indexlv2/">常用工具</a></h3><h2 id="、GameContent"><a href="#、GameContent" class="headerlink" title="、GameContent"></a>、GameContent</h2><h3 id="、、、AroundFunction"><a href="#、、、AroundFunction" class="headerlink" title="、、、AroundFunction"></a>、、、<a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/aroundfunction-suo-yin-indexlv2/">AroundFunction</a></h3><h3 id="、、、ArtResource"><a href="#、、、ArtResource" class="headerlink" title="、、、ArtResource"></a>、、、<a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/artresource-suo-yin-indexlv2/">ArtResource</a></h3><h3 id="、、、GamePlay"><a href="#、、、GamePlay" class="headerlink" title="、、、GamePlay"></a>、、、<a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/gameplay-suo-yin-indexlv2/">GamePlay</a></h3><h3 id="、、、Rendering"><a href="#、、、Rendering" class="headerlink" title="、、、Rendering"></a>、、、<a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gamecontent/rendering-suo-yin-indexlv2/">Rendering</a></h3><h2 id="、GameEngine"><a href="#、GameEngine" class="headerlink" title="、GameEngine"></a>、GameEngine</h2><h3 id="、、、Unity"><a href="#、、、Unity" class="headerlink" title="、、、Unity"></a>、、、<a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/gameengine/unity-suo-yin-indexlv2/">Unity</a></h3><h3 id="、、、Unreal"><a href="#、、、Unreal" class="headerlink" title="、、、Unreal"></a>、、、Unreal</h3><h2 id="、Movie"><a href="#、Movie" class="headerlink" title="、Movie"></a>、Movie</h2><h3 id="、、、所用工具"><a href="#、、、所用工具" class="headerlink" title="、、、所用工具"></a>、、、<a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/movie/movie-suo-yong-gong-ju-suo-yin-indexlv2/">所用工具</a></h3><h2 id="、Website"><a href="#、Website" class="headerlink" title="、Website"></a>、Website</h2><h3 id="、、、理论知识"><a href="#、、、理论知识" class="headerlink" title="、、、理论知识"></a>、、、理论知识</h3><h3 id="、、、Blog"><a href="#、、、Blog" class="headerlink" title="、、、Blog"></a>、、、<a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/website/blog-suo-yin-indexlv2/">Blog</a></h3><h1 id="Hobby"><a href="#Hobby" class="headerlink" title="Hobby"></a><a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/hobby/hobby-suo-yin-indexlv2/">Hobby</a></h1><h2 id="、视频下载"><a href="#、视频下载" class="headerlink" title="、视频下载"></a>、视频下载</h2><h2 id="、有趣的东西"><a href="#、有趣的东西" class="headerlink" title="、有趣的东西"></a>、有趣的东西</h2><h1 id="DemoGallery"><a href="#DemoGallery" class="headerlink" title="DemoGallery"></a><a href="https://klj35.github.io/BloodSoul.github.io/2021/07/30/blogindex/indexl2/demogallery/demogallery-suo-yin-indexlv2/">DemoGallery</a></h1><h2 id="、面试"><a href="#、面试" class="headerlink" title="、面试"></a>、面试</h2><h2 id="、Demo1"><a href="#、Demo1" class="headerlink" title="、Demo1"></a>、Demo1</h2>]]></content>
      
      
      <categories>
          
          <category> BlogIndex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexLv1 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
